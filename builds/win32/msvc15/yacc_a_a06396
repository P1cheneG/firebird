case 1:
  if (!yytrial)
{
			if (requireSemicolon)
				yyerrorIncompleteCmd(YYPOSNARG(1));

			parsedStatement = yyvsp[0].dsqlStatement;
		}
break;
case 2:
  if (!yytrial)
{ parsedStatement = yyvsp[-1].dsqlStatement; }
break;
case 3:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlDmlStatement(*statementPool, scratch->getAttachment(), yyvsp[0].stmtNode); }
break;
case 4:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlDdlStatement(*statementPool, scratch->getAttachment(), yyvsp[0].ddlNode); }
break;
case 5:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlTransactionStatement(*statementPool, scratch->getAttachment(), yyvsp[0].traNode); }
break;
case 6:
  if (!yytrial)
{
			yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlSessionManagementStatement(
				*statementPool, scratch->getAttachment(), yyvsp[0].mngNode);
		}
break;
case 7:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 8:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].storeNode; }
break;
case 9:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].mergeNode; }
break;
case 10:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 11:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 12:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execBlockNode; }
break;
case 13:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].selectNode; }
break;
case 14:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 15:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].updInsNode; }
break;
case 16:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 17:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 18:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 19:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 20:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 21:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 22:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].grantRevokeNode; }
break;
case 23:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 24:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].grantRevokeNode; }
break;
case 25:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 26:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].setTransactionNode; }
break;
case 27:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 28:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 29:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 30:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 31:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setDecFloatRoundNode; }
break;
case 32:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setDecFloatTrapsNode; }
break;
case 33:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setSessionNode; }
break;
case 34:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setRoleNode; }
break;
case 35:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].sessionResetNode; }
break;
case 36:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 37:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setBindNode; }
break;
case 38:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 39:
  if (!yytrial)
{ yyval.grantRevokeNode = newNode<GrantRevokeNode>(true); }
break;
case 40:
yyval.grantRevokeNode = yyvsp[0].grantRevokeNode;
break;
case 41:
  if (!yytrial)
{ yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode; }
break;
case 42:
yyval.privilegeArray = NOTRIAL(&yyvsp[0].grantRevokeNode->privileges);
break;
case 43:
yyval.granteeArray = NOTRIAL(&yyvsp[-6].grantRevokeNode->users);
break;
case 44:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_relation, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 45:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_procedure, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 46:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_udf, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 47:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_package_header, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 48:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_exception, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 49:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 50:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 51:
yyval.granteeArray = NOTRIAL(&yyvsp[-4].grantRevokeNode->users);
break;
case 52:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = yyvsp[-5].granteeClause;
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 53:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = newNode<GranteeClause>(obj_database, getSecurityClassName(obj_database));
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 54:
yyval.grantRevokeNode = NOTRIAL(yyvsp[0].grantRevokeNode);
break;
case 55:
yyval.granteeArray = NOTRIAL(&yyvsp[-3].grantRevokeNode->users);
break;
case 56:
  if (!yytrial)
{
			yyvsp[-7].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-7].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 57:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_relations, getSecurityClassName(obj_relations)); }
break;
case 58:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_views, getSecurityClassName(obj_views)); }
break;
case 59:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_procedures, getSecurityClassName(obj_procedures)); }
break;
case 60:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_functions, getSecurityClassName(obj_functions)); }
break;
case 61:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_packages, getSecurityClassName(obj_packages)); }
break;
case 62:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_generators, getSecurityClassName(obj_generators)); }
break;
case 63:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_generators, getSecurityClassName(obj_generators)); }
break;
case 64:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_domains, getSecurityClassName(obj_domains)); }
break;
case 65:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_exceptions, getSecurityClassName(obj_exceptions)); }
break;
case 66:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_roles, getSecurityClassName(obj_roles)); }
break;
case 67:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_charsets, getSecurityClassName(obj_charsets)); }
break;
case 68:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_collations, getSecurityClassName(obj_collations)); }
break;
case 69:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_filters, getSecurityClassName(obj_filters)); }
break;
case 72:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('A', NULL)); }
break;
case 73:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('A', NULL)); }
break;
case 74:
yyval.privilegeArray = yyvsp[0].privilegeArray;
break;
case 77:
yyval.privilegeArray = yyvsp[-2].privilegeArray;
break;
case 79:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('X', NULL)); }
break;
case 80:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('G', NULL)); }
break;
case 81:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('S', NULL)); }
break;
case 82:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('I', NULL)); }
break;
case 83:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('D', NULL)); }
break;
case 84:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('U', yyvsp[0].valueListNode)); }
break;
case 85:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('R', yyvsp[0].valueListNode)); }
break;
case 86:
  if (!yytrial)
{
			yyvsp[-2].privilegeArray->add(PrivilegeClause('C', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL));
		}
break;
case 92:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('C', NULL)); }
break;
case 93:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL)); }
break;
case 94:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL)); }
break;
case 95:
  if (!yytrial)
{
			yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL));
		}
break;
case 99:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('C', NULL)); }
break;
case 100:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('L', NULL)); }
break;
case 101:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('O', NULL)); }
break;
case 102:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 103:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 104:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 105:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 106:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 107:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 111:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 112:
  if (!yytrial)
{ yyval.grantRevokeNode = newNode<GrantRevokeNode>(false); }
break;
case 113:
  if (!yytrial)
{ yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode; }
break;
case 114:
yyval.privilegeArray = NOTRIAL(&yyvsp[-1].grantRevokeNode->privileges);
break;
case 115:
yyval.granteeArray = NOTRIAL(&yyvsp[-7].grantRevokeNode->users);
break;
case 116:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_relation, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 117:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_procedure, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 118:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_udf, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 119:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_package_header, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 120:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_exception, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 121:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 122:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 123:
yyval.granteeArray = NOTRIAL(&yyvsp[-5].grantRevokeNode->users);
break;
case 124:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = yyvsp[-4].granteeClause;
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-7].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 125:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = newNode<GranteeClause>(obj_database, getSecurityClassName(obj_database));
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-7].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 126:
yyval.grantRevokeNode = NOTRIAL(yyvsp[-1].grantRevokeNode);
break;
case 127:
  if (!yytrial)
{
			yyvsp[-7].grantRevokeNode->grantAdminOption = yyvsp[-6].boolVal;
			yyvsp[-7].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 129:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 130:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 131:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 132:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 133:
yyval.granteeArray = yyvsp[0].granteeArray;
break;
case 136:
yyval.granteeArray = yyvsp[-2].granteeArray;
break;
case 139:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_procedure, *yyvsp[0].metaNamePtr)); }
break;
case 140:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_udf, *yyvsp[0].metaNamePtr)); }
break;
case 141:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_package_header, *yyvsp[0].metaNamePtr)); }
break;
case 142:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_trigger, *yyvsp[0].metaNamePtr)); }
break;
case 143:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_view, *yyvsp[0].metaNamePtr)); }
break;
case 144:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr)); }
break;
case 145:
  if (!yytrial)
{ yyvsp[-3].granteeArray->add(GranteeClause(obj_privilege, *yyvsp[0].metaNamePtr)); }
break;
case 146:
  if (!yytrial)
{ yyvsp[-1].granteeArray->add(GranteeClause(obj_user_or_role, *yyvsp[0].metaNamePtr)); }
break;
case 147:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user, *yyvsp[0].metaNamePtr)); }
break;
case 148:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user_group, *yyvsp[0].metaNamePtr)); }
break;
case 150:
yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode;
break;
case 152:
  if (!yytrial)
{
			yyvsp[-1].grantRevokeNode->roles.add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr));
			yyvsp[-1].grantRevokeNode->defaultRoles.add(false);
		}
break;
case 153:
  if (!yytrial)
{
			yyvsp[-2].grantRevokeNode->roles.add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr));
			yyvsp[-2].grantRevokeNode->defaultRoles.add(true);
		}
break;
case 156:
  if (!yytrial)
{ yyvsp[-1].granteeArray->add(GranteeClause(obj_user_or_role, *yyvsp[0].metaNamePtr)); }
break;
case 157:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user, *yyvsp[0].metaNamePtr)); }
break;
case 158:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr)); }
break;
case 159:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode;}
break;
case 160:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 161:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterFunctionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 162:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 163:
yyval.parametersClause = NOTRIAL(&yyvsp[0].createAlterFunctionNode->parameters);
break;
case 164:
yyval.createAlterFunctionNode = yyvsp[-3].createAlterFunctionNode;
break;
case 165:
  if (!yytrial)
{
				yyval.createAlterFunctionNode = yyvsp[-9].createAlterFunctionNode;
				yyval.createAlterFunctionNode->external = newNode<ExternalClause>();
				yyval.createAlterFunctionNode->external->name = *yyvsp[-2].stringPtr;
				yyval.createAlterFunctionNode->external->udfModule = *yyvsp[0].stringPtr;
			}
break;
case 167:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(bid);
		}
break;
case 168:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_cstring;
			yyval.legacyField->charLength = (USHORT) yyvsp[-2].int32Val;
			if (yyvsp[0].metaNamePtr)
				yyval.legacyField->charSet = *yyvsp[0].metaNamePtr;
		}
break;
case 170:
yyval.parametersClause = yyvsp[0].parametersClause;
break;
case 172:
yyval.parametersClause = yyvsp[-1].parametersClause;
break;
case 175:
yyval.parametersClause = yyvsp[-2].parametersClause;
break;
case 177:
  if (!yytrial)
{
			yyvsp[-2].parametersClause->add(newNode<ParameterClause>(yyvsp[-1].legacyField));
			yyvsp[-2].parametersClause->back()->udfMechanism = yyvsp[0].nullableIntVal;
		}
break;
case 178:
  if (!yytrial)
{ yyval.nullableIntVal = std::nullopt; }
break;
case 179:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_descriptor; }
break;
case 180:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_scalar_array; }
break;
case 181:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_ref_with_null; }
break;
case 182:
yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
break;
case 184:
yyval.createAlterFunctionNode = yyvsp[-1].createAlterFunctionNode;
break;
case 186:
  if (!yytrial)
{
			yyvsp[-2].createAlterFunctionNode->returnType = newNode<ParameterClause>(yyvsp[-1].legacyField);
			yyvsp[-2].createAlterFunctionNode->returnType->udfMechanism = yyvsp[0].int32Val;
		}
break;
case 187:
  if (!yytrial)
{ yyvsp[-2].createAlterFunctionNode->udfReturnPos = yyvsp[0].int32Val; }
break;
case 188:
  if (!yytrial)
{ yyval.int32Val = FUN_reference; }
break;
case 189:
  if (!yytrial)
{ yyval.int32Val = FUN_value; }
break;
case 190:
  if (!yytrial)
{ yyval.int32Val = FUN_descriptor; }
break;
case 191:
  if (!yytrial)
{ yyval.int32Val = -1 * FUN_reference; }
break;
case 192:
  if (!yytrial)
{ yyval.int32Val = -1 * FUN_descriptor; }
break;
case 193:
  if (!yytrial)
{
				CreateFilterNode* node = newNode<CreateFilterNode>(*yyvsp[-8].metaNamePtr);
				node->inputFilter = yyvsp[-6].filterNameNumber;
				node->outputFilter = yyvsp[-4].filterNameNumber;
				node->entryPoint = *yyvsp[-2].stringPtr;
				node->moduleName = *yyvsp[0].stringPtr;
				yyval.ddlNode = node;
			}
break;
case 194:
  if (!yytrial)
{ yyval.filterNameNumber = newNode<CreateFilterNode::NameNumber>(*yyvsp[0].metaNamePtr); }
break;
case 195:
  if (!yytrial)
{ yyval.filterNameNumber = newNode<CreateFilterNode::NameNumber>(yyvsp[0].int32Val); }
break;
case 196:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 197:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterExceptionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 198:
  if (!yytrial)
{
				const auto node = newNode<CreateIndexNode>(*yyvsp[-3].metaNamePtr);
				node->active = yyvsp[-2].boolVal;
				node->unique = yyvsp[-7].boolVal;
				node->descending = yyvsp[-6].boolVal;
				node->createIfNotExistsOnly = yyvsp[-4].boolVal;
				node->relation = yyvsp[0].relSourceNode;
				yyval.ddlNode = node;
			}
break;
case 199:
yyval.createIndexNode = static_cast<CreateIndexNode*>(yyvsp[0].ddlNode);
break;
case 200:
  if (!yytrial)
{
				yyval.ddlNode = yyvsp[-2].ddlNode;
			}
break;
case 201:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterFunctionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 202:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterProcedureNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 203:
  if (!yytrial)
{
			const auto node = yyvsp[0].createRelationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 204:
  if (!yytrial)
{
			const auto node = yyvsp[0].createRelationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 205:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterTriggerNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 206:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterViewNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 207:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterSequenceNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 208:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterSequenceNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 209:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].alterDatabaseNode; }
break;
case 210:
  if (!yytrial)
{
			const auto node = yyvsp[0].createDomainNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 211:
  if (!yytrial)
{
			const auto node = yyvsp[0].createShadowNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 212:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterRoleNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			node->createFlag = true;
			yyval.ddlNode = node;
		}
break;
case 213:
  if (!yytrial)
{
			const auto node = yyvsp[0].createCollationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 214:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterUserNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 215:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterPackageNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 216:
  if (!yytrial)
{
			const auto node = yyvsp[0].createPackageBodyNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 217:
yyval.boolVal = false;
break;
case 218:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->createIfNotExistsOnly = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 219:
yyval.boolVal = true;
break;
case 220:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->createIfNotExistsOnly = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 221:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 222:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateProcedureNode>(yyvsp[0].createAlterProcedureNode); }
break;
case 223:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateFunctionNode>(yyvsp[0].createAlterFunctionNode); }
break;
case 224:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTableNode>(yyvsp[0].createRelationNode); }
break;
case 225:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTableNode>(yyvsp[0].createRelationNode); }
break;
case 226:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateViewNode>(yyvsp[0].createAlterViewNode); }
break;
case 227:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTriggerNode>(yyvsp[0].createAlterTriggerNode); }
break;
case 228:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageNode>(yyvsp[0].createAlterPackageNode); }
break;
case 229:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageBodyNode>(yyvsp[0].createPackageBodyNode); }
break;
case 230:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateExceptionNode>(yyvsp[0].createAlterExceptionNode); }
break;
case 231:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateSequenceNode>(yyvsp[0].createAlterSequenceNode); }
break;
case 232:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateSequenceNode>(yyvsp[0].createAlterSequenceNode); }
break;
case 233:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateUserNode>(yyvsp[0].createAlterUserNode); }
break;
case 234:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 235:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterProcedureNode; }
break;
case 236:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterFunctionNode; }
break;
case 237:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterTriggerNode; }
break;
case 238:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterPackageNode; }
break;
case 239:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 240:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 241:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterExceptionNode; }
break;
case 242:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 243:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 244:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterUserNode; }
break;
case 245:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 246:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 247:
  if (!yytrial)
{ yyval.createAlterExceptionNode = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString()); }
break;
case 248:
  if (!yytrial)
{
			CreateAlterExceptionNode* node = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString());
			node->alter = true;
			yyval.createAlterExceptionNode = node;
		}
break;
case 249:
  if (!yytrial)
{
			CreateAlterExceptionNode* node = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString());
			node->create = false;
			node->alter = true;
			yyval.createAlterExceptionNode = node;
		}
break;
case 250:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 251:
  if (!yytrial)
{ yyval.boolVal = yyvsp[0].boolVal; }
break;
case 252:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 253:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 254:
yyval.createIndexNode = yyvsp[0].createIndexNode;
break;
case 255:
  if (!yytrial)
{
			yyvsp[-3].createIndexNode->partial = yyvsp[0].boolSourceClause;
		}
break;
case 256:
  if (!yytrial)
{ yyvsp[-1].createIndexNode->columns = yyvsp[0].valueListNode; }
break;
case 257:
  if (!yytrial)
{ yyvsp[-1].createIndexNode->columns = yyvsp[0].valueListNode; }
break;
case 258:
  if (!yytrial)
{
 			yyvsp[-4].createIndexNode->computed = newNode<ValueSourceClause>();
			yyvsp[-4].createIndexNode->computed->value = yyvsp[-1].valueExprNode;
			yyvsp[-4].createIndexNode->computed->source = makeParseStr(YYPOSNARG(2), YYPOSNARG(4));
		}
break;
case 259:
  if (!yytrial)
{ yyval.boolSourceClause = nullptr; }
break;
case 260:
  if (!yytrial)
{
			auto clause = newNode<BoolSourceClause>();
			clause->value = yyvsp[0].boolExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.boolSourceClause = clause;
		}
break;
case 261:
  if (!yytrial)
{ yyval.createShadowNode = newNode<CreateShadowNode>(yyvsp[-3].int32Val, yyvsp[-2].boolVal, yyvsp[-1].boolVal, *yyvsp[0].stringPtr); }
break;
case 262:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 263:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 264:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 265:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 266:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 267:
  if (!yytrial)
{
				yyvsp[-1].legacyField->fld_name = *yyvsp[-3].metaNamePtr;
				yyval.createDomainNode = newNode<CreateDomainNode>(
					newNode<ParameterClause>(yyvsp[-1].legacyField, yyvsp[0].valueSourceClause));
			}
break;
case 268:
yyval.createDomainNode = yyvsp[0].createDomainNode;
break;
case 269:
  if (!yytrial)
{
				yyval.createDomainNode = yyvsp[-3].createDomainNode;
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
			}
break;
case 273:
yyval.createDomainNode = yyvsp[-1].createDomainNode;
break;
case 275:
  if (!yytrial)
{ setClause(yyvsp[-1].createDomainNode->notNull, "NOT NULL"); }
break;
case 276:
  if (!yytrial)
{ setClause(yyvsp[-1].createDomainNode->check, "DOMAIN CHECK CONSTRAINT", yyvsp[0].boolSourceClause); }
break;
case 279:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 280:
  if (!yytrial)
{ yyval.valueSourceClause = NULL; }
break;
case 283:
  if (!yytrial)
{
			BoolSourceClause* clause = newNode<BoolSourceClause>();
			clause->value = yyvsp[-1].boolExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(4));
			yyval.boolSourceClause = clause;
		}
break;
case 284:
  if (!yytrial)
{ yyval.createAlterSequenceNode = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr); }
break;
case 285:
yyval.createAlterSequenceNode = yyvsp[0].createAlterSequenceNode;
break;
case 286:
  if (!yytrial)
{ yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode; }
break;
case 288:
yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
break;
case 292:
  if (!yytrial)
{
			setClause(yyvsp[-3].createAlterSequenceNode->value, "START WITH", yyvsp[0].int64Val);
			setClause(yyvsp[-3].createAlterSequenceNode->restartSpecified, "RESTART", true);
		}
break;
case 293:
  if (!yytrial)
{ setClause(yyvsp[-3].createAlterSequenceNode->step, "INCREMENT BY", yyvsp[0].int32Val); }
break;
case 296:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr);
			node->alter = true;
			yyval.createAlterSequenceNode = node;
		}
break;
case 297:
  if (!yytrial)
{
			/* Remove this to implement CORE-5137*/
			if (!yyvsp[-2].createAlterSequenceNode->restartSpecified && !yyvsp[-2].createAlterSequenceNode->step.has_value())
				yyerrorIncompleteCmd(YYPOSNARG(3));
			yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
		}
break;
case 300:
  if (!yytrial)
{
			setClause(yyvsp[-1].createAlterSequenceNode->restartSpecified, "RESTART", true);
		}
break;
case 303:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr);
			node->create = false;
			node->alter = true;
			yyval.createAlterSequenceNode = node;
		}
break;
case 304:
  if (!yytrial)
{
			if (!yyvsp[-2].createAlterSequenceNode->restartSpecified && !yyvsp[-2].createAlterSequenceNode->value.has_value() && !yyvsp[-2].createAlterSequenceNode->step.has_value())
				yyerrorIncompleteCmd(YYPOSNARG(3));
			yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
		}
break;
case 309:
  if (!yytrial)
{
			setClause(yyvsp[-2].createAlterSequenceNode->restartSpecified, "RESTART", true);
			setClause(yyvsp[-2].createAlterSequenceNode->value, "RESTART WITH", yyvsp[0].nullableInt64Val);
		}
break;
case 310:
  if (!yytrial)
{ yyval.nullableInt64Val = std::nullopt; }
break;
case 311:
  if (!yytrial)
{ yyval.nullableInt64Val = yyvsp[0].int64Val; }
break;
case 312:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[-2].metaNamePtr);
			node->create = false;
			node->alter = true;
			node->legacy = true;
			node->restartSpecified = true;
			node->value = yyvsp[0].int64Val;
			yyval.createAlterSequenceNode = node;
		}
break;
case 313:
  if (!yytrial)
{ yyval.int64Val = yyvsp[0].int32Val; }
break;
case 314:
  if (!yytrial)
{
			SINT64 signedNumber = (SINT64) yyvsp[0].scaledNumber.number;

			if (!yyvsp[0].scaledNumber.hex && yyvsp[0].scaledNumber.number > MAX_SINT64)
			{
				ERRD_post(
					Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
					Arg::Gds(isc_arith_except) <<
					Arg::Gds(isc_numeric_out_of_range));
			}

			yyval.int64Val = signedNumber;
		}
break;
case 315:
  if (!yytrial)
{
			SINT64 signedNumber = (SINT64) yyvsp[0].scaledNumber.number;

			if (yyvsp[0].scaledNumber.hex && signedNumber == MIN_SINT64)
				ERRD_post(Arg::Gds(isc_exception_integer_overflow));

			yyval.int64Val = -signedNumber;
		}
break;
case 316:
  if (!yytrial)
{
			yyval.int64Val = MIN_SINT64;
		}
break;
case 317:
  if (!yytrial)
{ yyval.createAlterRoleNode = newNode<CreateAlterRoleNode>(*yyvsp[0].metaNamePtr); }
break;
case 318:
yyval.createAlterRoleNode = yyvsp[0].createAlterRoleNode;
break;
case 319:
  if (!yytrial)
{ yyval.createAlterRoleNode = yyvsp[-2].createAlterRoleNode; }
break;
case 323:
yyval.createAlterRoleNode = yyvsp[-4].createAlterRoleNode;
break;
case 325:
  if (!yytrial)
{ yyvsp[-3].createAlterRoleNode->sysPrivDrop = true; }
break;
case 327:
yyval.createAlterRoleNode = yyvsp[-2].createAlterRoleNode;
break;
case 329:
  if (!yytrial)
{ yyvsp[-1].createAlterRoleNode->addPrivilege(yyvsp[0].metaNamePtr); }
break;
case 330:
  if (!yytrial)
{ yyval.createCollationNode = newNode<CreateCollationNode>(*yyvsp[-2].metaNamePtr, *yyvsp[0].metaNamePtr); }
break;
case 331:
yyval.createCollationNode = yyvsp[0].createCollationNode;
break;
case 332:
yyval.createCollationNode = yyvsp[-2].createCollationNode;
break;
case 333:
yyval.createCollationNode = yyvsp[-4].createCollationNode;
break;
case 334:
  if (!yytrial)
{ yyval.createCollationNode = yyvsp[-6].createCollationNode; }
break;
case 336:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->fromName = *yyvsp[0].metaNamePtr; }
break;
case 337:
  if (!yytrial)
{ yyvsp[-5].createCollationNode->fromExternal = *yyvsp[-1].stringPtr; }
break;
case 341:
yyval.createCollationNode = yyvsp[-1].createCollationNode;
break;
case 346:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_PAD_SPACE); }
break;
case 347:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_PAD_SPACE); }
break;
case 348:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_CASE_INSENSITIVE); }
break;
case 349:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_CASE_INSENSITIVE); }
break;
case 350:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_ACCENT_INSENSITIVE); }
break;
case 351:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_ACCENT_INSENSITIVE); }
break;
case 353:
  if (!yytrial)
{
			const string& s = *yyvsp[0].stringPtr;
			yyvsp[-1].createCollationNode->specificAttributes.clear();
			yyvsp[-1].createCollationNode->specificAttributes.add((const UCHAR*) s.begin(), s.length());
		}
break;
case 354:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterCharSetNode>(*yyvsp[-4].metaNamePtr, *yyvsp[0].metaNamePtr); }
break;
case 355:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolSetNode>(AlterEDSPoolSetNode::POOL_SIZE, yyvsp[0].int32Val); }
break;
case 356:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolSetNode>(AlterEDSPoolSetNode::POOL_LIFETIME, yyvsp[-1].int32Val * yyvsp[0].intVal); }
break;
case 357:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_DB, yyvsp[0].intlStringPtr->getString()); }
break;
case 358:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_ALL); }
break;
case 359:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_OLDEST); }
break;
case 360:
  if (!yytrial)
{ yyval.intVal = 3600; }
break;
case 361:
  if (!yytrial)
{ yyval.intVal = 60; }
break;
case 362:
  if (!yytrial)
{ yyval.intVal = 1; }
break;
case 363:
  if (!yytrial)
{
				yyval.alterDatabaseNode = newNode<AlterDatabaseNode>();
				yyval.alterDatabaseNode->create = true;
			}
break;
case 364:
yyval.alterDatabaseNode = yyvsp[0].alterDatabaseNode;
break;
case 365:
yyval.alterDatabaseNode = yyvsp[-2].alterDatabaseNode;
break;
case 366:
  if (!yytrial)
{ yyval.alterDatabaseNode = yyvsp[-4].alterDatabaseNode; }
break;
case 373:
yyval.alterDatabaseNode = yyvsp[-1].alterDatabaseNode;
break;
case 388:
  if (!yytrial)
{ yyvsp[-4].alterDatabaseNode->setDefaultCharSet = *yyvsp[0].metaNamePtr; }
break;
case 389:
  if (!yytrial)
{
			yyvsp[-6].alterDatabaseNode->setDefaultCharSet = *yyvsp[-2].metaNamePtr;
			yyvsp[-6].alterDatabaseNode->setDefaultCollation = *yyvsp[0].metaNamePtr;
		}
break;
case 390:
  if (!yytrial)
{ yyvsp[-3].alterDatabaseNode->differenceFile = *yyvsp[0].stringPtr; }
break;
case 391:
  if (!yytrial)
{
				yyval.createRelationNode = newNode<CreateRelationNode>(yyvsp[-1].relSourceNode, yyvsp[0].stringPtr);
			}
break;
case 392:
yyval.createRelationNode = yyvsp[-1].createRelationNode;
break;
case 393:
yyval.relationNode = yyvsp[-4].createRelationNode;
break;
case 394:
  if (!yytrial)
{
				yyval.createRelationNode = yyvsp[-6].createRelationNode;
			}
break;
case 396:
yyval.relationNode = yyvsp[0].relationNode;
break;
case 397:
yyval.relationNode = yyvsp[-2].relationNode;
break;
case 399:
  if (!yytrial)
{ setClause(yyvsp[-1].relationNode->ssDefiner, "SQL SECURITY", yyvsp[0].boolVal); }
break;
case 400:
  if (!yytrial)
{ setClause(yyvsp[-1].relationNode->replicationState, "PUBLICATION", yyvsp[0].boolVal); }
break;
case 401:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 402:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 403:
  if (!yytrial)
{ yyval.triState = TriState(); }
break;
case 404:
  if (!yytrial)
{ yyval.triState = yyvsp[0].boolVal; }
break;
case 405:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 406:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 407:
  if (!yytrial)
{
				yyval.createRelationNode = newNode<CreateRelationNode>(yyvsp[0].relSourceNode);
				yyval.createRelationNode->relationType = std::nullopt;
			}
break;
case 408:
yyval.createRelationNode = yyvsp[-4].createRelationNode;
break;
case 409:
  if (!yytrial)
{
				yyval.createRelationNode = yyvsp[-6].createRelationNode;
				if (!yyval.createRelationNode->relationType.has_value())
					yyval.createRelationNode->relationType = rel_global_temp_delete;
			}
break;
case 410:
yyval.createRelationNode = yyvsp[0].createRelationNode;
break;
case 412:
yyval.createRelationNode = yyvsp[-2].createRelationNode;
break;
case 415:
  if (!yytrial)
{ setClause(yyvsp[-1].createRelationNode->ssDefiner, "SQL SECURITY", yyvsp[0].triState); }
break;
case 416:
  if (!yytrial)
{ setClause(yyvsp[-4].createRelationNode->relationType, "ON COMMIT DELETE ROWS", rel_global_temp_delete); }
break;
case 417:
  if (!yytrial)
{ setClause(yyvsp[-4].createRelationNode->relationType, "ON COMMIT PRESERVE ROWS", rel_global_temp_preserve); }
break;
case 418:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 419:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 420:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 423:
yyval.relationNode = yyvsp[0].createRelationNode;
break;
case 426:
  if (!yytrial)
{
				RelationNode::AddColumnClause* clause = yyval.addColumnClause =
					newNode<RelationNode::AddColumnClause>();
				clause->field = yyvsp[-1].legacyField;
				clause->field->fld_name = *yyvsp[-2].metaNamePtr;
				clause->defaultValue = yyvsp[0].valueSourceClause;
				yyvsp[-3].relationNode->clauses.add(clause);
			}
break;
case 427:
yyval.addColumnClause = NOTRIAL(yyvsp[0].addColumnClause);
break;
case 428:
  if (!yytrial)
{
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
				yyval.addColumnClause = yyvsp[-3].addColumnClause;
			}
break;
case 429:
  if (!yytrial)
{
				RelationNode::AddColumnClause* clause = yyval.addColumnClause =
					newNode<RelationNode::AddColumnClause>();
				clause->field = yyvsp[-1].legacyField;
				clause->field->fld_name = *yyvsp[-2].metaNamePtr;
				clause->identityOptions = yyvsp[0].identityOptions;
				yyvsp[-3].relationNode->clauses.add(clause);
			}
break;
case 430:
  if (!yytrial)
{
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
				yyval.addColumnClause = yyvsp[-3].addColumnClause;
			}
break;
case 431:
  if (!yytrial)
{
			RelationNode::AddColumnClause* clause = newNode<RelationNode::AddColumnClause>();
			clause->field = yyvsp[-1].legacyField;
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-3].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
			yyval.addColumnClause = clause;
		}
break;
case 432:
  if (!yytrial)
{
			RelationNode::AddColumnClause* clause = newNode<RelationNode::AddColumnClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-1].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-2].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
			yyval.addColumnClause = clause;
		}
break;
case 433:
  if (!yytrial)
{ yyval.identityOptions = newNode<RelationNode::IdentityOptions>(yyvsp[-2].identityType); }
break;
case 434:
yyval.identityOptions = yyvsp[0].identityOptions;
break;
case 435:
  if (!yytrial)
{ yyval.identityOptions = yyvsp[-2].identityOptions; }
break;
case 436:
  if (!yytrial)
{ yyval.identityType = IDENT_TYPE_BY_DEFAULT; }
break;
case 437:
  if (!yytrial)
{ yyval.identityType = IDENT_TYPE_ALWAYS; }
break;
case 439:
yyval.identityOptions = yyvsp[-1].identityOptions;
break;
case 443:
  if (!yytrial)
{ setClause(yyvsp[-3].identityOptions->startValue, "START WITH", yyvsp[0].int64Val); }
break;
case 444:
  if (!yytrial)
{ setClause(yyvsp[-3].identityOptions->increment, "INCREMENT BY", yyvsp[0].int32Val); }
break;
case 445:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[-1].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(2), YYPOSNARG(4));
			yyval.valueSourceClause = clause;
		}
break;
case 452:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 453:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 454:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 456:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 457:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfTable = *yyvsp[-2].metaNamePtr;
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 458:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
			yyval.legacyField->fullDomain = true;
		}
break;
case 459:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 460:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 461:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 462:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 463:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 464:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 466:
yyval.addColumnClause = yyvsp[0].addColumnClause;
break;
case 469:
yyval.addColumnClause = yyvsp[-1].addColumnClause;
break;
case 471:
  if (!yytrial)
{
			if (yyvsp[-2].metaNamePtr)
				yyvsp[-3].addColumnClause->constraints.back().name = *yyvsp[-2].metaNamePtr;
		}
break;
case 472:
  if (!yytrial)
{
			setClause(yyvsp[-1].addColumnClause->notNullSpecified, "NOT NULL");
			RelationNode::AddConstraintClause& constraint = yyvsp[-1].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_NOT_NULL;
		}
break;
case 473:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-1].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_CHECK;
			constraint.check = yyvsp[0].boolSourceClause;
		}
break;
case 474:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-5].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_FK;

			constraint.columns.add(yyvsp[-5].addColumnClause->field->fld_name);
			constraint.refRelation = *yyvsp[-3].metaNamePtr;
			constraint.refAction = yyvsp[-1].refActionClause;

			const ValueListNode* refColumns = yyvsp[-2].valueListNode;
			if (refColumns)
			{
				const NestConst<ValueExprNode>* ptr = refColumns->items.begin();

				for (const NestConst<ValueExprNode>* const end = refColumns->items.end(); ptr != end; ++ptr)
					constraint.refColumns.add(nodeAs<FieldNode>(*ptr)->dsqlName);
			}

			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 475:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-2].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_UNIQUE;
			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 476:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-3].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_PK;
			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 477:
yyval.relationNode = yyvsp[-1].relationNode;
break;
case 478:
  if (!yytrial)
{
			if (yyvsp[-2].metaNamePtr)
				yyvsp[0].addConstraintClause->name = *yyvsp[-2].metaNamePtr;
			yyval.addConstraintClause = yyvsp[0].addConstraintClause;
		}
break;
case 479:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 480:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 481:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_UNIQUE;

			const ValueListNode* columns = yyvsp[-1].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-3].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 482:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_PK;

			const ValueListNode* columns = yyvsp[-1].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-4].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 483:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_FK;

			const ValueListNode* columns = yyvsp[-5].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.refRelation = *yyvsp[-3].metaNamePtr;
			constraint.refAction = yyvsp[-1].refActionClause;

			const ValueListNode* refColumns = yyvsp[-2].valueListNode;
			if (refColumns)
			{
				const NestConst<ValueExprNode>* ptr = refColumns->items.begin();

				for (const NestConst<ValueExprNode>* const end = refColumns->items.end(); ptr != end; ++ptr)
					constraint.refColumns.add(nodeAs<FieldNode>(*ptr)->dsqlName);
			}

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-8].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 484:
  if (!yytrial)
{
			RelationNode::AddConstraintClause* constraint = newNode<RelationNode::AddConstraintClause>();
			constraint->constraintType = RelationNode::AddConstraintClause::CTYPE_CHECK;
			constraint->check = yyvsp[0].boolSourceClause;
			yyvsp[-1].relationNode->clauses.add(constraint);
			yyval.addConstraintClause = constraint;
		}
break;
case 485:
  if (!yytrial)
{ yyval.indexConstraintClause = newNode<RelationNode::IndexConstraintClause>(); }
break;
case 486:
  if (!yytrial)
{
			RelationNode::IndexConstraintClause* clause = yyval.indexConstraintClause =
				newNode<RelationNode::IndexConstraintClause>();
			clause->descending = yyvsp[-2].boolVal;
			clause->name = *yyvsp[0].metaNamePtr;
		}
break;
case 487:
  if (!yytrial)
{ yyval.refActionClause = NULL; }
break;
case 488:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[0].uintVal, 0); }
break;
case 489:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(0, yyvsp[0].uintVal); }
break;
case 490:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[0].uintVal, yyvsp[-1].uintVal); }
break;
case 491:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[-1].uintVal, yyvsp[0].uintVal); }
break;
case 492:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal;}
break;
case 493:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal;}
break;
case 494:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_CASCADE; }
break;
case 495:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_SET_DEFAULT; }
break;
case 496:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_SET_NULL; }
break;
case 497:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_NONE; }
break;
case 500:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[-4].createAlterProcedureNode;
			yyval.createAlterProcedureNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterProcedureNode->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(5));
			yyval.createAlterProcedureNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterProcedureNode->body = yyvsp[0].stmtNode;
		}
break;
case 501:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[-2].createAlterProcedureNode;
			yyval.createAlterProcedureNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterProcedureNode->source = *yyvsp[0].stringPtr;
		}
break;
case 502:
  if (!yytrial)
{ yyval.createAlterProcedureNode = newNode<CreateAlterProcedureNode>(*yyvsp[0].metaNamePtr); }
break;
case 503:
yyval.parametersClause = NOTRIAL(&yyvsp[0].createAlterProcedureNode->parameters);
break;
case 504:
yyval.parametersClause = NOTRIAL(&yyvsp[-2].createAlterProcedureNode->returns);
break;
case 505:
  if (!yytrial)
{ yyval.createAlterProcedureNode = yyvsp[-4].createAlterProcedureNode; }
break;
case 506:
  if (!yytrial)
{ yyval.createAlterProcedureNode = newNode<CreateAlterProcedureNode>(*yyvsp[0].metaNamePtr); }
break;
case 507:
  if (!yytrial)
{
				yyval.createAlterProcedureNode = yyvsp[-1].createAlterProcedureNode;
				yyval.createAlterProcedureNode->ssDefiner = yyvsp[0].nullableSqlSecurityVal;
			}
break;
case 508:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
			yyval.createAlterProcedureNode->create = false;
		}
break;
case 509:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
			yyval.createAlterProcedureNode->create = false;
		}
break;
case 510:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
		}
break;
case 518:
  if (!yytrial)
{
			setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
			yyvsp[-3].parametersClause->add(newNode<ParameterClause>(yyvsp[-2].legacyField, yyvsp[0].valueSourceClause));
		}
break;
case 521:
  if (!yytrial)
{
			setCollate(yyvsp[-1].legacyField, yyvsp[0].metaNamePtr);
			yyvsp[-2].parametersClause->add(newNode<ParameterClause>(yyvsp[-1].legacyField));
		}
break;
case 522:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[0].legacyField;
			yyval.legacyField->fld_name = *yyvsp[-1].metaNamePtr;
		}
break;
case 523:
  if (!yytrial)
{ yyval.valueSourceClause = NULL; }
break;
case 524:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 525:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 528:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[-4].createAlterFunctionNode;
			yyval.createAlterFunctionNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterFunctionNode->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(5));
			yyval.createAlterFunctionNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterFunctionNode->body = yyvsp[0].stmtNode;
		}
break;
case 529:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[-2].createAlterFunctionNode;
			yyval.createAlterFunctionNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterFunctionNode->source = *yyvsp[0].stringPtr;
		}
break;
case 530:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 531:
  if (!yytrial)
{
				yyval.createAlterFunctionNode = yyvsp[-6].createAlterFunctionNode;
				yyval.createAlterFunctionNode->returnType = newNode<ParameterClause>(yyvsp[-2].legacyField);
				setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
				yyval.createAlterFunctionNode->deterministic = yyvsp[0].boolVal;
			}
break;
case 532:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 533:
  if (!yytrial)
{ yyval.createAlterFunctionNode = yyvsp[-2].createAlterFunctionNode; }
break;
case 536:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterFunctionNode->deterministic, "DETERMINISTIC", yyvsp[0].boolVal); }
break;
case 537:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterFunctionNode->ssDefiner, "SQL SECURITY", yyvsp[0].nullableSqlSecurityVal); }
break;
case 538:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 539:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 540:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 541:
  if (!yytrial)
{ yyval.boolVal = yyvsp[0].boolVal; }
break;
case 542:
  if (!yytrial)
{
			yyval.externalClause = newNode<ExternalClause>();
			yyval.externalClause->name = *yyvsp[-2].stringPtr;
			yyval.externalClause->engine = *yyvsp[0].metaNamePtr;
		}
break;
case 543:
  if (!yytrial)
{
			yyval.externalClause = newNode<ExternalClause>();
			yyval.externalClause->engine = *yyvsp[0].metaNamePtr;
		}
break;
case 544:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 545:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 546:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
			yyval.createAlterFunctionNode->create = false;
		}
break;
case 547:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
			yyval.createAlterFunctionNode->create = false;
		}
break;
case 548:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
		}
break;
case 549:
  if (!yytrial)
{
			CreateAlterPackageNode* node = newNode<CreateAlterPackageNode>(*yyvsp[-5].metaNamePtr);
			node->ssDefiner = yyvsp[-4].nullableSqlSecurityVal;
			node->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(6));
			node->items = yyvsp[-1].packageItems;
			yyval.createAlterPackageNode = node;
		}
break;
case 550:
  if (!yytrial)
{
			CreateAlterPackageNode* node = newNode<CreateAlterPackageNode>(*yyvsp[-1].metaNamePtr);
			node->ssDefiner = yyvsp[0].nullableSqlSecurityVal;
			yyval.createAlterPackageNode = node;
		}
break;
case 552:
  if (!yytrial)
{ yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >(); }
break;
case 553:
  if (!yytrial)
{
			yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >();
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 554:
  if (!yytrial)
{
			yyval.packageItems = yyvsp[-1].packageItems;
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 555:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterFunctionNode); }
break;
case 556:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterProcedureNode); }
break;
case 557:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
			yyval.createAlterPackageNode->create = false;
		}
break;
case 558:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
			yyval.createAlterPackageNode->create = false;
		}
break;
case 559:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
		}
break;
case 560:
  if (!yytrial)
{
			CreatePackageBodyNode* node = newNode<CreatePackageBodyNode>(*yyvsp[-5].metaNamePtr);
			node->source = makeParseStr(YYPOSNARG(3), YYPOSNARG(6));
			node->declaredItems = yyvsp[-2].packageItems;
			node->items = yyvsp[-1].packageItems;
			yyval.createPackageBodyNode = node;
		}
break;
case 561:
  if (!yytrial)
{
			CreatePackageBodyNode* node = newNode<CreatePackageBodyNode>(*yyvsp[-4].metaNamePtr);
			node->source = makeParseStr(YYPOSNARG(3), YYPOSNARG(5));
			node->items = yyvsp[-1].packageItems;
			yyval.createPackageBodyNode = node;
		}
break;
case 562:
  if (!yytrial)
{ yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >(); }
break;
case 564:
  if (!yytrial)
{
			yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >();
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 565:
  if (!yytrial)
{
			yyval.packageItems = yyvsp[-1].packageItems;
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 566:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[0].createAlterFunctionNode); }
break;
case 567:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterFunctionNode); }
break;
case 568:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[0].createAlterProcedureNode); }
break;
case 569:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterProcedureNode); }
break;
case 570:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageBodyNode>(yyvsp[0].createPackageBodyNode); }
break;
case 571:
  if (!yytrial)
{
			LocalDeclarationsNode* forward = yyvsp[-1].localDeclarationsNode;
			LocalDeclarationsNode* nonForward = yyvsp[0].localDeclarationsNode;

			if (!forward)
				yyval.localDeclarationsNode = nonForward;
			else
			{
				if (nonForward)
					forward->statements.add(nonForward->statements.begin(), nonForward->statements.getCount());

				yyval.localDeclarationsNode = forward;
			}
		}
break;
case 572:
  if (!yytrial)
{ yyval.localDeclarationsNode = nullptr; }
break;
case 574:
  if (!yytrial)
{
			yyval.localDeclarationsNode = newNode<LocalDeclarationsNode>();
			yyval.localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 575:
  if (!yytrial)
{
			yyvsp[-1].localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
			yyval.localDeclarationsNode = yyvsp[-1].localDeclarationsNode;
		}
break;
case 576:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[-1].declareSubProcNode; }
break;
case 577:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[-1].declareSubFuncNode; }
break;
case 578:
  if (!yytrial)
{ yyval.localDeclarationsNode = nullptr; }
break;
case 580:
  if (!yytrial)
{
			yyval.localDeclarationsNode = newNode<LocalDeclarationsNode>();
			yyval.localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 581:
  if (!yytrial)
{
			yyvsp[-1].localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
			yyval.localDeclarationsNode = yyvsp[-1].localDeclarationsNode;
		}
break;
case 582:
  if (!yytrial)
{
			yyval.stmtNode = yyvsp[-1].stmtNode;
			yyval.stmtNode->line = YYPOSNARG(1).firstLine;
			yyval.stmtNode->column = YYPOSNARG(1).firstColumn;
		}
break;
case 583:
  if (!yytrial)
{
			DeclareSubProcNode* node = yyvsp[-3].declareSubProcNode;
			node->dsqlBlock->localDeclList = yyvsp[-1].localDeclarationsNode;
			node->dsqlBlock->body = yyvsp[0].stmtNode;

			for (FB_SIZE_T i = 0; i < node->dsqlBlock->parameters.getCount(); ++i)
				node->dsqlBlock->parameters[i]->parameterExpr = make_parameter();

			yyval.stmtNode = node;
		}
break;
case 584:
  if (!yytrial)
{
			DeclareSubFuncNode* node = yyvsp[-3].declareSubFuncNode;
			node->dsqlBlock->localDeclList = yyvsp[-1].localDeclarationsNode;
			node->dsqlBlock->body = yyvsp[0].stmtNode;

			for (FB_SIZE_T i = 0; i < node->dsqlBlock->parameters.getCount(); ++i)
				node->dsqlBlock->parameters[i]->parameterExpr = make_parameter();

			yyval.stmtNode = node;
		}
break;
case 585:
  if (!yytrial)
{
				yyval.declareSubProcNode = newNode<DeclareSubProcNode>(NOTRIAL(*yyvsp[0].metaNamePtr));
				yyval.declareSubProcNode->dsqlBlock = newNode<ExecBlockNode>();
			}
break;
case 586:
yyval.parametersClause = NOTRIAL(&yyvsp[0].declareSubProcNode->dsqlBlock->parameters);
break;
case 587:
yyval.parametersClause = NOTRIAL(&yyvsp[-2].declareSubProcNode->dsqlBlock->returns);
break;
case 588:
  if (!yytrial)
{ yyval.declareSubProcNode = yyvsp[-4].declareSubProcNode; }
break;
case 589:
  if (!yytrial)
{
				yyval.declareSubFuncNode = newNode<DeclareSubFuncNode>(NOTRIAL(*yyvsp[0].metaNamePtr));
				yyval.declareSubFuncNode->dsqlBlock = newNode<ExecBlockNode>();
			}
break;
case 590:
yyval.parametersClause = NOTRIAL(&yyvsp[0].declareSubFuncNode->dsqlBlock->parameters);
break;
case 591:
  if (!yytrial)
{
				yyval.declareSubFuncNode = yyvsp[-6].declareSubFuncNode;
				setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
				yyval.declareSubFuncNode->dsqlBlock->returns.add(newNode<ParameterClause>(yyvsp[-2].legacyField));
				yyval.declareSubFuncNode->dsqlDeterministic = yyvsp[0].boolVal;
			}
break;
case 594:
  if (!yytrial)
{
			/* Set collate before node allocation to prevent memory leak on throw*/
			setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
			DeclareVariableNode* node = newNode<DeclareVariableNode>();
			node->dsqlDef = newNode<ParameterClause>(yyvsp[-2].legacyField, yyvsp[0].valueSourceClause);
			yyval.stmtNode = node;
		}
break;
case 595:
  if (!yytrial)
{ yyval.valueSourceClause = nullptr; }
break;
case 596:
  if (!yytrial)
{
			const auto clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 597:
  if (!yytrial)
{
			const auto clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 600:
  if (!yytrial)
{
			DeclareCursorNode* node = newNode<DeclareCursorNode>(*yyvsp[-6].metaNamePtr,
				DeclareCursorNode::CUR_TYPE_EXPLICIT);
			node->dsqlScroll = yyvsp[-5].boolVal;
			node->dsqlSelect = yyvsp[-1].selectNode;
			yyval.stmtNode = node;
		}
break;
case 601:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 602:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 603:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 606:
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[-1].stmtNode); }
break;
case 607:
  if (!yytrial)
{ yyval.stmtNode = newNode<CompoundStmtNode>(); }
break;
case 608:
  if (!yytrial)
{
			BlockNode* node = newNode<BlockNode>();
			node->action = yyvsp[0].compoundStmtNode;
			yyval.stmtNode = node;
		}
break;
case 609:
  if (!yytrial)
{
			BlockNode* node = newNode<BlockNode>();
			node->action = yyvsp[-1].compoundStmtNode;
			node->handlers = yyvsp[0].compoundStmtNode;
			yyval.stmtNode = node;
		}
break;
case 610:
  if (!yytrial)
{
			yyval.compoundStmtNode = newNode<CompoundStmtNode>();
			yyval.compoundStmtNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 611:
  if (!yytrial)
{
			yyvsp[-1].compoundStmtNode->statements.add(yyvsp[0].stmtNode);
			yyval.compoundStmtNode = yyvsp[-1].compoundStmtNode;
		}
break;
case 612:
{YYVALID;}
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[-1].stmtNode); }
break;
case 613:
{YYVALID;}
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[0].stmtNode); }
break;
case 615:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].storeNode; }
break;
case 616:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].mergeNode; }
break;
case 618:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].updInsNode; }
break;
case 622:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 623:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 624:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 626:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 632:
  if (!yytrial)
{ yyval.stmtNode = newNode<SuspendNode>(); }
break;
case 633:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExitNode>(); }
break;
case 634:
  if (!yytrial)
{ yyval.stmtNode = newNode<ReturnNode>(yyvsp[0].valueExprNode); }
break;
case 635:
  if (!yytrial)
{ yyval.stmtNode = newNode<SessionManagementWrapperNode>(yyvsp[0].mngNode, makeParseStr(YYPOSNARG(1), YYPOSNARG(1))); }
break;
case 637:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 641:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].forNode; }
break;
case 642:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 643:
  if (!yytrial)
{
			InAutonomousTransactionNode* node = newNode<InAutonomousTransactionNode>();
			node->action = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 644:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[0].metaNamePtr); }
break;
case 645:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].valueExprNode); }
break;
case 646:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[-4].metaNamePtr, (ValueExprNode*) NULL, yyvsp[-1].valueListNode); }
break;
case 647:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(); }
break;
case 648:
  if (!yytrial)
{
				ForNode* node = newNode<ForNode>();
				node->dsqlLabelName = yyvsp[-2].metaNamePtr;
				node->dsqlSelect = yyvsp[0].selectNode;
				yyval.forNode = node;
			}
break;
case 649:
yyval.forNode = yyvsp[0].forNode;
break;
case 650:
  if (!yytrial)
{
				ForNode* node = yyvsp[-4].forNode;
				node->statement = yyvsp[0].stmtNode;
				yyval.forNode = node;
			}
break;
case 651:
  if (!yytrial)
{
			yyvsp[-2].forNode->dsqlInto = yyvsp[-1].valueListNode;
			yyvsp[-2].forNode->dsqlCursor = yyvsp[0].declCursorNode;
		}
break;
case 652:
  if (!yytrial)
{
			yyvsp[-2].forNode->dsqlInto = yyvsp[-1].valueListNode;
			yyvsp[-2].forNode->dsqlCursor = yyvsp[0].declCursorNode;
		}
break;
case 653:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 655:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 656:
  if (!yytrial)
{ yyval.execStatementNode = newNode<ExecStatementNode>(); }
break;
case 657:
yyval.execStatementNode = yyvsp[0].execStatementNode;
break;
case 658:
yyval.execStatementNode = yyvsp[-2].execStatementNode;
break;
case 659:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-4].execStatementNode;
		}
break;
case 660:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-2].execStatementNode;
			yyval.execStatementNode->outputs = yyvsp[0].valueListNode;
		}
break;
case 661:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-2].execStatementNode;
			yyval.execStatementNode->dsqlLabelName = yyvsp[-4].metaNamePtr;
			yyval.execStatementNode->innerStmt = yyvsp[0].stmtNode;
		}
break;
case 662:
  if (!yytrial)
{ yyvsp[-1].execStatementNode->sql = yyvsp[0].valueExprNode; }
break;
case 663:
yyval.execStatementNode = yyvsp[-4].execStatementNode;
break;
case 664:
  if (!yytrial)
{ yyvsp[-7].execStatementNode->sql = yyvsp[-5].valueExprNode; }
break;
case 665:
  if (!yytrial)
{ yyvsp[-7].execStatementNode->sql = yyvsp[-5].valueExprNode; }
break;
case 668:
  if (!yytrial)
{
			if (!yyvsp[-3].execStatementNode->inputNames)
				yyvsp[-3].execStatementNode->inputNames = FB_NEW_POOL(getPool()) EDS::ParamNames(getPool());

			yyvsp[-3].execStatementNode->inputNames->add(yyvsp[-2].metaNamePtr);

			if (!yyvsp[-3].execStatementNode->inputs)
				yyvsp[-3].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-3].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 669:
  if (!yytrial)
{
			if (!yyvsp[-4].execStatementNode->inputNames)
				yyvsp[-4].execStatementNode->inputNames = FB_NEW_POOL(getPool()) EDS::ParamNames(getPool());

			if (!yyvsp[-4].execStatementNode->excessInputs)
				yyvsp[-4].execStatementNode->excessInputs = FB_NEW_POOL(getPool()) EDS::ParamNumbers(getPool());

			yyvsp[-4].execStatementNode->excessInputs->add(yyvsp[-4].execStatementNode->inputNames->getCount());

			yyvsp[-4].execStatementNode->inputNames->add(yyvsp[-2].metaNamePtr);

			if (!yyvsp[-4].execStatementNode->inputs)
				yyvsp[-4].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-4].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 672:
  if (!yytrial)
{
			if (!yyvsp[-1].execStatementNode->inputs)
				yyvsp[-1].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-1].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 675:
yyval.execStatementNode = yyvsp[-1].execStatementNode;
break;
case 678:
  if (!yytrial)
{ setClause(yyvsp[-5].execStatementNode->dataSource, "EXTERNAL DATA SOURCE", yyvsp[0].valueExprNode); }
break;
case 679:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->dataSource, "EXTERNAL DATA SOURCE", yyvsp[0].valueExprNode); }
break;
case 680:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->userName, "USER", yyvsp[0].valueExprNode); }
break;
case 681:
  if (!yytrial)
{ setClause(yyvsp[-2].execStatementNode->password, "PASSWORD", yyvsp[0].valueExprNode); }
break;
case 682:
  if (!yytrial)
{ setClause(yyvsp[-2].execStatementNode->role, "ROLE", yyvsp[0].valueExprNode); }
break;
case 683:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->traScope, "TRANSACTION", EDS::traAutonomous); }
break;
case 684:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->traScope, "TRANSACTION", EDS::traCommon); }
break;
case 685:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->useCallerPrivs, "CALLER PRIVILEGES"); }
break;
case 686:
  if (!yytrial)
{
			IfNode* node = newNode<IfNode>();
			node->condition = yyvsp[-5].boolExprNode;
			node->trueAction = yyvsp[-2].stmtNode;
			node->falseAction = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 687:
  if (!yytrial)
{
			IfNode* node = newNode<IfNode>();
			node->condition = yyvsp[-3].boolExprNode;
			node->trueAction = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 688:
  if (!yytrial)
{
			PostEventNode* node = newNode<PostEventNode>();
			node->event = yyvsp[-1].valueExprNode;
			node->argument = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 689:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 690:
  if (!yytrial)
{
			ForNode* node = newNode<ForNode>();
			node->dsqlSelect = yyvsp[-2].selectNode;
			node->dsqlInto = yyvsp[0].valueListNode;
			yyval.stmtNode = node;
		}
break;
case 691:
  if (!yytrial)
{
			VariableNode* node = newNode<VariableNode>();
			node->dsqlName = *yyvsp[0].metaNamePtr;
			yyval.valueExprNode = node;
		}
break;
case 692:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 693:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].fieldNode); }
break;
case 694:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].fieldNode); }
break;
case 695:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 696:
  if (!yytrial)
{
			LoopNode* node = newNode<LoopNode>();
			node->dsqlLabelName = yyvsp[-6].metaNamePtr;
			node->dsqlExpr = yyvsp[-3].boolExprNode;
			node->statement = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 697:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 698:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[-1].metaNamePtr; }
break;
case 699:
  if (!yytrial)
{ yyval.stmtNode = newNode<ContinueLeaveNode>(blr_leave); }
break;
case 700:
  if (!yytrial)
{
			ContinueLeaveNode* node = newNode<ContinueLeaveNode>(blr_leave);
			node->dsqlLabelName = yyvsp[0].metaNamePtr;
			yyval.stmtNode = node;
		}
break;
case 701:
  if (!yytrial)
{
			ContinueLeaveNode* node = newNode<ContinueLeaveNode>(blr_continue_loop);
			node->dsqlLabelName = yyvsp[0].metaNamePtr;
			yyval.stmtNode = node;
		}
break;
case 702:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 704:
  if (!yytrial)
{ yyval.declCursorNode = NULL; }
break;
case 706:
  if (!yytrial)
{ yyval.declCursorNode = newNode<DeclareCursorNode>(*yyvsp[0].metaNamePtr, DeclareCursorNode::CUR_TYPE_FOR); }
break;
case 707:
  if (!yytrial)
{
			yyval.compoundStmtNode = newNode<CompoundStmtNode>();
			yyval.compoundStmtNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 708:
  if (!yytrial)
{
			yyvsp[-1].compoundStmtNode->statements.add(yyvsp[0].stmtNode);
			yyval.compoundStmtNode = yyvsp[-1].compoundStmtNode;
		}
break;
case 709:
  if (!yytrial)
{ yyval.errorHandlerNode = newNode<ErrorHandlerNode>(); }
break;
case 710:
yyval.exceptionArray = NOTRIAL(&yyvsp[0].errorHandlerNode->conditions);
break;
case 711:
  if (!yytrial)
{
				ErrorHandlerNode* node = yyvsp[-4].errorHandlerNode;
				node->action = yyvsp[0].stmtNode;
				yyval.stmtNode = node;
			}
break;
case 712:
yyval.exceptionArray = yyvsp[0].exceptionArray;
break;
case 714:
yyval.exceptionArray = yyvsp[-2].exceptionArray;
break;
case 716:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::SQL_CODE;
			item.code = yyvsp[0].int32Val;
		}
break;
case 717:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::SQL_STATE;
			item.name = yyvsp[0].intlStringPtr->getString();
		}
break;
case 718:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::GDS_CODE;
			item.name = yyvsp[0].metaNamePtr->c_str();
		}
break;
case 719:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::XCP_CODE;
			item.name = yyvsp[0].metaNamePtr->c_str();
		}
break;
case 720:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-1].exceptionArray->add();
			item.type = ExceptionItem::XCP_DEFAULT;
		}
break;
case 724:
  if (!yytrial)
{ yyval.stmtNode = newNode<CursorStmtNode>(blr_cursor_open, *yyvsp[0].metaNamePtr); }
break;
case 725:
  if (!yytrial)
{ yyval.stmtNode = newNode<CursorStmtNode>(blr_cursor_close, *yyvsp[0].metaNamePtr); }
break;
case 726:
  if (!yytrial)
{ yyval.cursorStmtNode = newNode<CursorStmtNode>(blr_cursor_fetch_scroll); }
break;
case 727:
yyval.cursorStmtNode = yyvsp[0].cursorStmtNode;
break;
case 728:
  if (!yytrial)
{
			CursorStmtNode* cursorStmt = yyvsp[-5].cursorStmtNode;
			cursorStmt->dsqlName = *yyvsp[-1].metaNamePtr;
			cursorStmt->dsqlIntoStmt = yyvsp[0].valueListNode;
			yyval.stmtNode = cursorStmt;
		}
break;
case 729:
  if (!yytrial)
{ yyval.stmtNode = newNode<CursorStmtNode>(blr_cursor_fetch, *yyvsp[-1].metaNamePtr, yyvsp[0].valueListNode); }
break;
case 730:
  if (!yytrial)
{ yyvsp[-1].cursorStmtNode->scrollOp = blr_scroll_bof; }
break;
case 731:
  if (!yytrial)
{ yyvsp[-1].cursorStmtNode->scrollOp = blr_scroll_eof; }
break;
case 732:
  if (!yytrial)
{ yyvsp[-1].cursorStmtNode->scrollOp = blr_scroll_backward; }
break;
case 733:
  if (!yytrial)
{ yyvsp[-1].cursorStmtNode->scrollOp = blr_scroll_forward; }
break;
case 734:
  if (!yytrial)
{
			yyvsp[-2].cursorStmtNode->scrollOp = blr_scroll_absolute;
			yyvsp[-2].cursorStmtNode->scrollExpr = yyvsp[0].valueExprNode;
		}
break;
case 735:
  if (!yytrial)
{
			yyvsp[-2].cursorStmtNode->scrollOp = blr_scroll_relative;
			yyvsp[-2].cursorStmtNode->scrollExpr = yyvsp[0].valueExprNode;
		}
break;
case 736:
  if (!yytrial)
{
			yyval.stmtNode = newNode<ExecProcedureNode>(
				QualifiedName(*yyvsp[-2].metaNamePtr),
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->second : nullptr),
				yyvsp[0].valueListNode,
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->first : nullptr));
		}
break;
case 737:
  if (!yytrial)
{
			yyval.stmtNode = newNode<ExecProcedureNode>(
				QualifiedName(*yyvsp[-2].metaNamePtr, *yyvsp[-4].metaNamePtr),
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->second : nullptr),
				yyvsp[0].valueListNode,
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->first : nullptr));
		}
break;
case 738:
  if (!yytrial)
{ yyval.namedArguments = nullptr; }
break;
case 739:
  if (!yytrial)
{ yyval.namedArguments = yyvsp[0].namedArguments; }
break;
case 740:
  if (!yytrial)
{ yyval.namedArguments = yyvsp[-1].namedArguments; }
break;
case 741:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 742:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 743:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-1].valueListNode; }
break;
case 744:
  if (!yytrial)
{
			auto node = newNode<ExecProcedureNode>(QualifiedName(*yyvsp[-3].metaNamePtr),
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->second : nullptr),
				nullptr,
				(yyvsp[-1].namedArguments ? yyvsp[-1].namedArguments->first : nullptr));
			node->dsqlCallSyntax = true;
			yyval.stmtNode = node;
		}
break;
case 745:
  if (!yytrial)
{
			auto node = newNode<ExecProcedureNode>(QualifiedName(*yyvsp[-4].metaNamePtr, *yyvsp[-6].metaNamePtr),
				(yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->second : nullptr),
				nullptr,
				(yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->first : nullptr));
			node->dsqlCallSyntax = true;
			yyval.stmtNode = node;
		}
break;
case 746:
  if (!yytrial)
{ yyval.execBlockNode = newNode<ExecBlockNode>(); }
break;
case 747:
yyval.parametersClause = NOTRIAL(&yyvsp[0].execBlockNode->parameters);
break;
case 748:
yyval.parametersClause = NOTRIAL(&yyvsp[-2].execBlockNode->returns);
break;
case 749:
  if (!yytrial)
{
			ExecBlockNode* node = yyvsp[-7].execBlockNode;
			node->localDeclList = yyvsp[-1].localDeclarationsNode;
			node->body = yyvsp[0].stmtNode;
			yyval.execBlockNode = node;
		}
break;
case 754:
  if (!yytrial)
{
			setCollate(yyvsp[-3].legacyField, yyvsp[-2].metaNamePtr);
			yyvsp[-4].parametersClause->add(newNode<ParameterClause>(yyvsp[-3].legacyField, (ValueSourceClause*) NULL, yyvsp[0].valueExprNode));
		}
break;
case 755:
  if (!yytrial)
{
			CreateAlterViewNode* node = newNode<CreateAlterViewNode>(yyvsp[-4].relSourceNode, yyvsp[-3].valueListNode, yyvsp[-1].selectExprNode);
			node->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(5));
			node->withCheckOption = yyvsp[0].boolVal;
			yyval.createAlterViewNode = node;
		}
break;
case 756:
  if (!yytrial)
{
			yyvsp[0].createAlterViewNode->alter = true;
			yyval.ddlNode = yyvsp[0].createAlterViewNode;
		}
break;
case 757:
  if (!yytrial)
{
			yyvsp[0].createAlterViewNode->alter = true;
			yyvsp[0].createAlterViewNode->create = false;
			yyval.ddlNode = yyvsp[0].createAlterViewNode;
		}
break;
case 758:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 759:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 760:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = yyvsp[-4].createAlterTriggerNode;
			yyval.createAlterTriggerNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterTriggerNode->source = makeParseStr(YYPOSNARG(3), YYPOSNARG(5));
			yyval.createAlterTriggerNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterTriggerNode->body = yyvsp[0].stmtNode;
		}
break;
case 761:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = yyvsp[-2].createAlterTriggerNode;
			yyval.createAlterTriggerNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterTriggerNode->source = *yyvsp[0].stringPtr;
		}
break;
case 762:
  if (!yytrial)
{ yyval.createAlterTriggerNode = newNode<CreateAlterTriggerNode>(*yyvsp[0].metaNamePtr); }
break;
case 763:
yyval.createAlterTriggerNode = NOTRIAL(yyvsp[0].createAlterTriggerNode);
break;
case 764:
  if (!yytrial)
{ yyval.createAlterTriggerNode = yyvsp[-2].createAlterTriggerNode; }
break;
case 765:
yyval.createAlterTriggerNode = NOTRIAL(yyvsp[-1].createAlterTriggerNode);
break;
case 766:
  if (!yytrial)
{
			yyvsp[-4].createAlterTriggerNode->active = yyvsp[-3].triState;
			yyvsp[-4].createAlterTriggerNode->type = yyvsp[-1].uint64Val;
			setClause(yyvsp[-4].createAlterTriggerNode->position, "POSITION", yyvsp[0].nullableIntVal);
		}
break;
case 767:
  if (!yytrial)
{
			yyvsp[-5].createAlterTriggerNode->relationName = *yyvsp[-3].metaNamePtr;
			yyvsp[-5].createAlterTriggerNode->active = yyvsp[-2].triState;
			yyvsp[-5].createAlterTriggerNode->type = yyvsp[-1].uint64Val;
			setClause(yyvsp[-5].createAlterTriggerNode->position, "POSITION", yyvsp[0].nullableIntVal);
		}
break;
case 768:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = yyvsp[0].createAlterTriggerNode;
			yyval.createAlterTriggerNode->alter = true;
		}
break;
case 769:
  if (!yytrial)
{ yyval.triState = TriState(true); }
break;
case 770:
  if (!yytrial)
{ yyval.triState = TriState(false); }
break;
case 771:
  if (!yytrial)
{ yyval.triState = TriState(); }
break;
case 772:
  if (!yytrial)
{
			yyval.uint64Val = yyvsp[-3].uint64Val;
			setClause(yyvsp[-4].createAlterTriggerNode->position, "POSITION", yyvsp[-2].nullableIntVal);
			yyvsp[-4].createAlterTriggerNode->relationName = *yyvsp[0].metaNamePtr;
		}
break;
case 773:
  if (!yytrial)
{ yyval.uint64Val = yyvsp[0].uint64Val; }
break;
case 774:
  if (!yytrial)
{ yyval.uint64Val = yyvsp[-1].uint64Val + yyvsp[0].uint64Val; }
break;
case 775:
  if (!yytrial)
{ yyval.uint64Val = yyvsp[-1].uint64Val + yyvsp[0].uint64Val - 1; }
break;
case 776:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DB | DB_TRIGGER_CONNECT; }
break;
case 777:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DB | DB_TRIGGER_DISCONNECT; }
break;
case 778:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DB | DB_TRIGGER_TRANS_START; }
break;
case 779:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DB | DB_TRIGGER_TRANS_COMMIT; }
break;
case 780:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DB | DB_TRIGGER_TRANS_ROLLBACK; }
break;
case 782:
  if (!yytrial)
{
			yyval.uint64Val = TRIGGER_TYPE_DDL | DDL_TRIGGER_ANY;
		}
break;
case 783:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_TABLE); }
break;
case 784:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_TABLE); }
break;
case 785:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_TABLE); }
break;
case 786:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_PROCEDURE); }
break;
case 787:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_PROCEDURE); }
break;
case 788:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_PROCEDURE); }
break;
case 789:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_FUNCTION); }
break;
case 790:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_FUNCTION); }
break;
case 791:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_FUNCTION); }
break;
case 792:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_TRIGGER); }
break;
case 793:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_TRIGGER); }
break;
case 794:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_TRIGGER); }
break;
case 795:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_EXCEPTION); }
break;
case 796:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_EXCEPTION); }
break;
case 797:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_EXCEPTION); }
break;
case 798:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_VIEW); }
break;
case 799:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_VIEW); }
break;
case 800:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_VIEW); }
break;
case 801:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_DOMAIN); }
break;
case 802:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_DOMAIN); }
break;
case 803:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_DOMAIN); }
break;
case 804:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_ROLE); }
break;
case 805:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_ROLE); }
break;
case 806:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_ROLE); }
break;
case 807:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_SEQUENCE); }
break;
case 808:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_SEQUENCE); }
break;
case 809:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_SEQUENCE); }
break;
case 810:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_USER); }
break;
case 811:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_USER); }
break;
case 812:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_USER); }
break;
case 813:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_INDEX); }
break;
case 814:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_INDEX); }
break;
case 815:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_INDEX); }
break;
case 816:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_COLLATION); }
break;
case 817:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_COLLATION); }
break;
case 818:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_CHARACTER_SET); }
break;
case 819:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_PACKAGE); }
break;
case 820:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_PACKAGE); }
break;
case 821:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_PACKAGE); }
break;
case 822:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_PACKAGE_BODY); }
break;
case 823:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_PACKAGE_BODY); }
break;
case 824:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_CREATE_MAPPING); }
break;
case 825:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_ALTER_MAPPING); }
break;
case 826:
  if (!yytrial)
{ yyval.uint64Val = TRIGGER_TYPE_DDL | (1LL << DDL_TRIGGER_DROP_MAPPING); }
break;
case 827:
  if (!yytrial)
{ yyval.uint64Val = yyvsp[-2].uint64Val | yyvsp[0].uint64Val; }
break;
case 828:
  if (!yytrial)
{ yyval.uint64Val = 0; }
break;
case 829:
  if (!yytrial)
{ yyval.uint64Val = 1; }
break;
case 830:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(1, 0, 0); }
break;
case 831:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(2, 0, 0); }
break;
case 832:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(3, 0, 0); }
break;
case 833:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(1, 2, 0); }
break;
case 834:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(1, 3, 0); }
break;
case 835:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(2, 1, 0); }
break;
case 836:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(2, 3, 0); }
break;
case 837:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(3, 1, 0); }
break;
case 838:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(3, 2, 0); }
break;
case 839:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(1, 2, 3); }
break;
case 840:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(1, 3, 2); }
break;
case 841:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(2, 1, 3); }
break;
case 842:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(2, 3, 1); }
break;
case 843:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(3, 1, 2); }
break;
case 844:
  if (!yytrial)
{ yyval.uint64Val = trigger_type_suffix(3, 2, 1); }
break;
case 845:
  if (!yytrial)
{ yyval.nullableIntVal = std::nullopt; }
break;
case 846:
  if (!yytrial)
{ yyval.nullableIntVal = yyvsp[0].int32Val; }
break;
case 847:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 848:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 849:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterExceptionNode; }
break;
case 850:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterRelationNode>(yyvsp[0].relSourceNode); }
break;
case 851:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[-2].relationNode; }
break;
case 852:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 853:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterTriggerNode; }
break;
case 854:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterProcedureNode; }
break;
case 855:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterPackageNode; }
break;
case 856:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 857:
  if (!yytrial)
{ yyval.alterDatabaseNode = newNode<AlterDatabaseNode>(); }
break;
case 858:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[-2].alterDatabaseNode; }
break;
case 859:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].alterDomainNode; }
break;
case 860:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 861:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 862:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterFunctionNode; }
break;
case 863:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 864:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterUserNode; }
break;
case 865:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterUserNode; }
break;
case 866:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 867:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 868:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 869:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 870:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 871:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 872:
  if (!yytrial)
{ yyval.alterDomainNode = newNode<AlterDomainNode>(*yyvsp[0].metaNamePtr); }
break;
case 873:
yyval.alterDomainNode = yyvsp[0].alterDomainNode;
break;
case 874:
  if (!yytrial)
{ yyval.alterDomainNode = yyvsp[-2].alterDomainNode; }
break;
case 876:
yyval.alterDomainNode = yyvsp[-1].alterDomainNode;
break;
case 878:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->setDefault, "DOMAIN DEFAULT", yyvsp[0].valueSourceClause); }
break;
case 879:
  if (!yytrial)
{ setClause(yyvsp[-3].alterDomainNode->setConstraint, "DOMAIN CONSTRAINT", yyvsp[0].boolSourceClause); }
break;
case 880:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->setConstraint, "DOMAIN CONSTRAINT", yyvsp[0].boolSourceClause); }
break;
case 881:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->dropDefault, "DOMAIN DROP DEFAULT"); }
break;
case 882:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->dropConstraint, "DOMAIN DROP CONSTRAINT"); }
break;
case 883:
  if (!yytrial)
{ setClause(yyvsp[-3].alterDomainNode->notNullFlag, "{SET | DROP} NOT NULL", false); }
break;
case 884:
  if (!yytrial)
{ setClause(yyvsp[-3].alterDomainNode->notNullFlag, "{SET | DROP} NOT NULL", true); }
break;
case 885:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->renameTo, "DOMAIN NAME", *yyvsp[0].metaNamePtr); }
break;
case 886:
  if (!yytrial)
{ setClause(yyvsp[-2].alterDomainNode->type, "DOMAIN TYPE", yyvsp[0].legacyField);}
break;
case 889:
  if (!yytrial)
{
			RelationNode::DropColumnClause* clause = newNode<RelationNode::DropColumnClause>();
			clause->silent = yyvsp[-2].boolVal;
			clause->name = *yyvsp[-1].metaNamePtr;
			clause->cascade = yyvsp[0].boolVal;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 890:
  if (!yytrial)
{
			RelationNode::DropConstraintClause* clause = newNode<RelationNode::DropConstraintClause>();
			clause->silent = yyvsp[-1].boolVal;
			clause->name = *yyvsp[0].metaNamePtr;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 891:
  if (!yytrial)
{
			const auto node = yyvsp[0].addColumnClause;
			node->createIfNotExistsOnly = yyvsp[-2].boolVal;
		}
break;
case 893:
yyval.relationNode = yyvsp[-4].relationNode;
break;
case 894:
  if (!yytrial)
{
			const auto node = yyvsp[0].addConstraintClause;
			node->name = *yyvsp[-2].metaNamePtr;
			node->createIfNotExistsOnly = yyvsp[-3].boolVal;
		}
break;
case 895:
  if (!yytrial)
{
			RelationNode::AlterColPosClause* clause = newNode<RelationNode::AlterColPosClause>();
			clause->name = *yyvsp[-2].metaNamePtr;
			clause->newPos = yyvsp[0].int32Val;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 896:
  if (!yytrial)
{
			RelationNode::AlterColNameClause* clause = newNode<RelationNode::AlterColNameClause>();
			clause->fromName = *yyvsp[-2].metaNamePtr;
			clause->toName = *yyvsp[0].metaNamePtr;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 897:
  if (!yytrial)
{
			RelationNode::AlterColNullClause* clause = newNode<RelationNode::AlterColNullClause>();
			clause->name = *yyvsp[-3].metaNamePtr;
			clause->notNullFlag = false;
			yyvsp[-5].relationNode->clauses.add(clause);
		}
break;
case 898:
  if (!yytrial)
{
			RelationNode::AlterColNullClause* clause = newNode<RelationNode::AlterColNullClause>();
			clause->name = *yyvsp[-3].metaNamePtr;
			clause->notNullFlag = true;
			yyvsp[-5].relationNode->clauses.add(clause);
		}
break;
case 899:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = yyvsp[0].legacyField;
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 900:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = yyvsp[-1].legacyField;
			clause->field->fld_name = *yyvsp[-3].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-5].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
		}
break;
case 901:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-1].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-3].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
		}
break;
case 902:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			clause->defaultValue = yyvsp[0].valueSourceClause;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 903:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			clause->dropDefault = true;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 904:
  if (!yytrial)
{ yyval.identityOptions = newNode<RelationNode::IdentityOptions>(); }
break;
case 905:
  if (!yytrial)
{
				RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
				clause->field = newNode<dsql_fld>();
				clause->field->fld_name = *yyvsp[-3].metaNamePtr;
				clause->identityOptions = yyvsp[-2].identityOptions;
				yyvsp[-5].relationNode->clauses.add(clause);
			}
break;
case 906:
  if (!yytrial)
{
			RelationNode::AlterColTypeClause* clause = newNode<RelationNode::AlterColTypeClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			clause->dropIdentity = true;
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 907:
  if (!yytrial)
{
			setClause(yyvsp[-4].relationNode->ssDefiner, "SQL SECURITY", true);
			RelationNode::Clause* clause =
				newNode<RelationNode::Clause>(RelationNode::Clause::TYPE_ALTER_SQL_SECURITY);
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 908:
  if (!yytrial)
{
			setClause(yyvsp[-4].relationNode->ssDefiner, "SQL SECURITY", false);
			RelationNode::Clause* clause =
				newNode<RelationNode::Clause>(RelationNode::Clause::TYPE_ALTER_SQL_SECURITY);
			yyvsp[-4].relationNode->clauses.add(clause);
		}
break;
case 909:
  if (!yytrial)
{
			setClause(yyvsp[-3].relationNode->ssDefiner, "SQL SECURITY", TriState());
			RelationNode::Clause* clause =
				newNode<RelationNode::Clause>(RelationNode::Clause::TYPE_ALTER_SQL_SECURITY);
			yyvsp[-3].relationNode->clauses.add(clause);
		}
break;
case 910:
  if (!yytrial)
{
			setClause(yyvsp[-2].relationNode->replicationState, "PUBLICATION", true);
			RelationNode::Clause* clause =
				newNode<RelationNode::Clause>(RelationNode::Clause::TYPE_ALTER_PUBLICATION);
			yyvsp[-2].relationNode->clauses.add(clause);
		}
break;
case 911:
  if (!yytrial)
{
			setClause(yyvsp[-2].relationNode->replicationState, "PUBLICATION", false);
			RelationNode::Clause* clause =
				newNode<RelationNode::Clause>(RelationNode::Clause::TYPE_ALTER_PUBLICATION);
			yyvsp[-2].relationNode->clauses.add(clause);
		}
break;
case 1014:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 1015:
yyval.identityOptions = yyvsp[-2].identityOptions;
break;
case 1018:
  if (!yytrial)
{ yyvsp[-3].identityOptions->type = IDENT_TYPE_ALWAYS; }
break;
case 1019:
  if (!yytrial)
{ yyvsp[-4].identityOptions->type = IDENT_TYPE_BY_DEFAULT; }
break;
case 1024:
  if (!yytrial)
{
			setClause(yyvsp[-2].identityOptions->restart, "RESTART");
			yyvsp[-2].identityOptions->startValue = yyvsp[0].nullableInt64Val;
		}
break;
case 1025:
  if (!yytrial)
{ setClause(yyvsp[-4].identityOptions->increment, "SET INCREMENT BY", yyvsp[0].int32Val); }
break;
case 1026:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1027:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1028:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1029:
  if (!yytrial)
{
			yyval.ddlNode = newNode<AlterIndexNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].boolVal);
		}
break;
case 1030:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1031:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1032:
  if (!yytrial)
{
			AlterExternalFunctionNode* node = newNode<AlterExternalFunctionNode>(*yyvsp[-2].metaNamePtr);
			if (yyvsp[-1].stringPtr)
				node->clauses.name = *yyvsp[-1].stringPtr;
			if (yyvsp[0].stringPtr)
				node->clauses.udfModule = *yyvsp[0].stringPtr;
			yyval.ddlNode = node;
		}
break;
case 1033:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 1034:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 1035:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 1036:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 1037:
  if (!yytrial)
{
			MappingNode* mn = newNode<MappingNode>(MappingNode::MAP_RPL, "AutoAdminImplementationMapping");
			mn->op = yyvsp[-3].boolVal ? MappingNode::MAP_RPL : MappingNode::MAP_DROP;
			mn->from = newNode<IntlString>(FB_DOMAIN_ANY_RID_ADMINS);
			mn->fromType = newNode<MetaName>(FB_PREDEFINED_GROUP);
			mn->mode = 'P';
			mn->plugin = newNode<MetaName>("Win_Sspi");
			mn->role = true;
			mn->to = yyvsp[-4].metaNamePtr;
			mn->validateAdmin();
			yyval.ddlNode = mn;
		}
break;
case 1038:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterRoleNode; }
break;
case 1039:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 1040:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1041:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1044:
  if (!yytrial)
{ yyvsp[-4].alterDatabaseNode->differenceFile = *yyvsp[0].stringPtr; }
break;
case 1045:
  if (!yytrial)
{ yyvsp[-3].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_DROP_DIFFERENCE; }
break;
case 1046:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_BEGIN_BACKUP; }
break;
case 1047:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_END_BACKUP; }
break;
case 1048:
  if (!yytrial)
{ yyvsp[-5].alterDatabaseNode->setDefaultCharSet = *yyvsp[0].metaNamePtr; }
break;
case 1049:
yyval.alterDatabaseNode = yyvsp[-3].alterDatabaseNode;
break;
case 1050:
  if (!yytrial)
{
			setClauseFlag(yyvsp[-5].alterDatabaseNode->clauses, AlterDatabaseNode::CLAUSE_CRYPT, "CRYPT");
			yyvsp[-5].alterDatabaseNode->cryptPlugin = *yyvsp[-2].metaNamePtr;
		}
break;
case 1051:
  if (!yytrial)
{ setClauseFlag(yyvsp[-1].alterDatabaseNode->clauses, AlterDatabaseNode::CLAUSE_CRYPT, "CRYPT"); }
break;
case 1052:
  if (!yytrial)
{ yyvsp[-4].alterDatabaseNode->linger = yyvsp[0].int32Val; }
break;
case 1053:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->linger = 0; }
break;
case 1054:
  if (!yytrial)
{ yyvsp[-3].alterDatabaseNode->ssDefiner = yyvsp[0].boolVal; }
break;
case 1055:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_ENABLE_PUB; }
break;
case 1056:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_DISABLE_PUB; }
break;
case 1057:
  if (!yytrial)
{ yyvsp[-5].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_PUB_INCL_TABLE; }
break;
case 1058:
  if (!yytrial)
{ yyvsp[-5].alterDatabaseNode->clauses |= AlterDatabaseNode::CLAUSE_PUB_EXCL_TABLE; }
break;
case 1060:
  if (!yytrial)
{ yyvsp[-2].alterDatabaseNode->keyName = *yyvsp[0].metaNamePtr; }
break;
case 1065:
  if (!yytrial)
{ yyvsp[-1].alterDatabaseNode->pubTables.add(*yyvsp[0].metaNamePtr); }
break;
case 1066:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = newNode<CreateAlterTriggerNode>(*yyvsp[-7].metaNamePtr);
			yyval.createAlterTriggerNode->alter = true;
			yyval.createAlterTriggerNode->create = false;
			yyval.createAlterTriggerNode->active = yyvsp[-6].triState;
			yyval.createAlterTriggerNode->type = yyvsp[-5].nullableUint64Val;
			yyval.createAlterTriggerNode->position = yyvsp[-4].nullableIntVal;
			yyval.createAlterTriggerNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterTriggerNode->source = makeParseStr(YYPOSNARG(6), YYPOSNARG(8));
			yyval.createAlterTriggerNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterTriggerNode->body = yyvsp[0].stmtNode;
		}
break;
case 1067:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = newNode<CreateAlterTriggerNode>(*yyvsp[-5].metaNamePtr);
			yyval.createAlterTriggerNode->alter = true;
			yyval.createAlterTriggerNode->create = false;
			yyval.createAlterTriggerNode->active = yyvsp[-4].triState;
			yyval.createAlterTriggerNode->type = yyvsp[-3].nullableUint64Val;
			yyval.createAlterTriggerNode->position = yyvsp[-2].nullableIntVal;
			yyval.createAlterTriggerNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterTriggerNode->source = *yyvsp[0].stringPtr;
		}
break;
case 1068:
  if (!yytrial)
{
			yyval.createAlterTriggerNode = newNode<CreateAlterTriggerNode>(*yyvsp[-4].metaNamePtr);
			yyval.createAlterTriggerNode->alter = true;
			yyval.createAlterTriggerNode->create = false;
			yyval.createAlterTriggerNode->active = yyvsp[-3].triState;
			yyval.createAlterTriggerNode->type = yyvsp[-2].nullableUint64Val;
			yyval.createAlterTriggerNode->position = yyvsp[-1].nullableIntVal;
			yyval.createAlterTriggerNode->ssDefiner = yyvsp[0].nullableSqlSecurityVal;
		}
break;
case 1069:
  if (!yytrial)
{ yyval.nullableUint64Val = yyvsp[-1].uint64Val + yyvsp[0].uint64Val - 1; }
break;
case 1070:
  if (!yytrial)
{ yyval.nullableUint64Val = std::nullopt; }
break;
case 1071:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = SS_DEFINER; }
break;
case 1072:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = SS_INVOKER; }
break;
case 1073:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = yyvsp[0].nullableSqlSecurityVal; }
break;
case 1074:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = std::nullopt; }
break;
case 1075:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = yyvsp[0].nullableSqlSecurityVal; }
break;
case 1076:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = SS_DROP; }
break;
case 1077:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = std::nullopt; }
break;
case 1078:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = yyvsp[0].nullableSqlSecurityVal; }
break;
case 1079:
  if (!yytrial)
{ yyval.nullableSqlSecurityVal = SS_DROP; }
break;
case 1080:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 1081:
  if (!yytrial)
{
			const auto node = newNode<DropExceptionNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1082:
  if (!yytrial)
{
			const auto node = newNode<DropIndexNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1083:
  if (!yytrial)
{
			const auto node = newNode<DropProcedureNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1084:
  if (!yytrial)
{
			const auto node = newNode<DropRelationNode>(*yyvsp[0].metaNamePtr, false);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1085:
  if (!yytrial)
{
			const auto node = newNode<DropTriggerNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1086:
  if (!yytrial)
{
			const auto node = newNode<DropRelationNode>(*yyvsp[0].metaNamePtr, true);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1087:
  if (!yytrial)
{
			const auto node = newNode<DropFilterNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1088:
  if (!yytrial)
{
			const auto node = newNode<DropDomainNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1089:
  if (!yytrial)
{
			const auto node = newNode<DropFunctionNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1090:
  if (!yytrial)
{
			const auto node = newNode<DropFunctionNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1091:
  if (!yytrial)
{
			const auto node = newNode<DropShadowNode>(yyvsp[-1].int32Val, yyvsp[0].boolVal);
			/* DROP SHADOW implicitly has IF EXISTS behavior*/
			yyval.ddlNode = node;
		}
break;
case 1092:
  if (!yytrial)
{
			const auto node = newNode<DropRoleNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1093:
  if (!yytrial)
{
			const auto node = newNode<DropSequenceNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1094:
  if (!yytrial)
{
			const auto node = newNode<DropSequenceNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1095:
  if (!yytrial)
{
			const auto node = newNode<DropCollationNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1096:
  if (!yytrial)
{
			const auto node = newNode<DropUserNode>(*yyvsp[-3].metaNamePtr, yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-4].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1097:
  if (!yytrial)
{
			const auto node = newNode<DropUserNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1098:
  if (!yytrial)
{
			const auto node = newNode<DropPackageNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1099:
  if (!yytrial)
{
			const auto node = newNode<DropPackageBodyNode>(*yyvsp[0].metaNamePtr);
			node->silent = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1100:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->silentDrop = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1101:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->silentDrop = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 1102:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1103:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1104:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1105:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1106:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1107:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1108:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1112:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[-2].legacyField;
			yyval.legacyField->notNull = true;
		}
break;
case 1115:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 1116:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
			yyval.legacyField->typeOfTable = *yyvsp[-2].metaNamePtr;
		}
break;
case 1117:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
			yyval.legacyField->fullDomain = true;
		}
break;
case 1120:
  if (!yytrial)
{
			yyvsp[-3].legacyField->ranges = yyvsp[-1].valueListNode;
			yyvsp[-3].legacyField->dimensions = yyvsp[-3].legacyField->ranges->items.getCount() / 2;
			yyvsp[-3].legacyField->elementDtype = yyvsp[-3].legacyField->dtype;
			yyval.legacyField = yyvsp[-3].legacyField;
		}
break;
case 1121:
  if (!yytrial)
{
			yyvsp[-4].legacyField->ranges = yyvsp[-2].valueListNode;
			yyvsp[-4].legacyField->dimensions = yyvsp[-4].legacyField->ranges->items.getCount() / 2;
			yyvsp[-4].legacyField->elementDtype = yyvsp[-4].legacyField->dtype;
			if (yyvsp[0].metaNamePtr)
				yyvsp[-4].legacyField->charSet = *yyvsp[0].metaNamePtr;
			yyval.legacyField = yyvsp[-4].legacyField;
		}
break;
case 1123:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueListNode->items[0])->add(yyvsp[0].valueListNode->items[1]); }
break;
case 1124:
  if (!yytrial)
{
			if (yyvsp[0].int32Val < 1)
		 		yyval.valueListNode = newNode<ValueListNode>(MAKE_const_slong(yyvsp[0].int32Val))->add(MAKE_const_slong(1));
			else
		 		yyval.valueListNode = newNode<ValueListNode>(MAKE_const_slong(1))->add(MAKE_const_slong(yyvsp[0].int32Val));
		}
break;
case 1125:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(MAKE_const_slong(yyvsp[-2].int32Val))->add(MAKE_const_slong(yyvsp[0].int32Val)); }
break;
case 1127:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[-2].legacyField;
			if (yyvsp[-1].metaNamePtr)
			{
				yyval.legacyField->charSet = *yyvsp[-1].metaNamePtr;
				yyval.legacyField->flags |= FLD_has_chset;
			}
			if (yyvsp[0].metaNamePtr)
				yyval.legacyField->collate = *yyvsp[0].metaNamePtr;
		}
break;
case 1128:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[-1].legacyField;
			if (yyvsp[0].metaNamePtr)
				yyval.legacyField->collate = *yyvsp[0].metaNamePtr;
		}
break;
case 1134:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();

			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post (Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
					Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
																	Arg::Str("BIGINT"));
			}

			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post (Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
					Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
																Arg::Str("BIGINT"));
			}

			yyval.legacyField->dtype = dtype_int64;
			yyval.legacyField->length = sizeof(SINT64);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1135:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_int128;
			yyval.legacyField->length = sizeof(Int128);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1136:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_long;
			yyval.legacyField->length = sizeof(SLONG);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1137:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_short;
			yyval.legacyField->length = sizeof(SSHORT);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1138:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_boolean;
			yyval.legacyField->length = sizeof(UCHAR);
		}
break;
case 1143:
  if (!yytrial)
{ yyval.legacyField = newNode<dsql_fld>(); }
break;
case 1144:
yyval.legacyField = NOTRIAL(yyvsp[0].legacyField);
break;
case 1145:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[-4].legacyField;
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(ISC_QUAD);
			yyval.legacyField->segLength = yyvsp[-1].uintVal;
			if (yyvsp[0].metaNamePtr)
			{
				yyval.legacyField->charSet = *yyvsp[0].metaNamePtr;
				yyval.legacyField->flags |= FLD_has_chset;
			}
		}
break;
case 1146:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(ISC_QUAD);
			yyval.legacyField->segLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->subType = 0;
		}
break;
case 1147:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(ISC_QUAD);
			yyval.legacyField->segLength = (USHORT) yyvsp[-3].int32Val;
			yyval.legacyField->subType = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= FLD_has_sub;
		}
break;
case 1148:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(ISC_QUAD);
			yyval.legacyField->segLength = 80;
			yyval.legacyField->subType = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= FLD_has_sub;
		}
break;
case 1149:
  if (!yytrial)
{ yyval.uintVal = (USHORT) 80; }
break;
case 1150:
  if (!yytrial)
{ yyval.uintVal = (USHORT) yyvsp[0].int32Val; }
break;
case 1151:
  if (!yytrial)
{ yyvsp[0].legacyField->subType = (USHORT) 0; }
break;
case 1152:
  if (!yytrial)
{ yyvsp[-2].legacyField->subType = (USHORT) yyvsp[0].int32Val; yyvsp[-2].legacyField->flags |= FLD_has_sub; }
break;
case 1153:
  if (!yytrial)
{ yyvsp[-2].legacyField->subTypeName = *yyvsp[0].metaNamePtr; yyvsp[-2].legacyField->flags |= FLD_has_sub; }
break;
case 1154:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 1155:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1156:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= (FLD_national | FLD_has_len);
		}
break;
case 1157:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = 1;
			yyval.legacyField->flags |= FLD_national;
		}
break;
case 1158:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_varying;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= (FLD_national | FLD_has_len);
		}
break;
case 1159:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->length = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->textType = ttype_binary;
			yyval.legacyField->charSetId = CS_BINARY;
			yyval.legacyField->subType = fb_text_subtype_binary;
			yyval.legacyField->flags |= (FLD_has_len | FLD_has_chset);
		}
break;
case 1160:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = 1;
			yyval.legacyField->length = 1;
			yyval.legacyField->textType = ttype_binary;
			yyval.legacyField->charSetId = CS_BINARY;
			yyval.legacyField->subType = fb_text_subtype_binary;
			yyval.legacyField->flags |= FLD_has_chset;
		}
break;
case 1161:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_varying;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->length = (USHORT) yyvsp[-1].int32Val + sizeof(USHORT);
			yyval.legacyField->textType = ttype_binary;
			yyval.legacyField->charSetId = CS_BINARY;
			yyval.legacyField->subType = fb_text_subtype_binary;
			yyval.legacyField->flags |= (FLD_has_len | FLD_has_chset);
		}
break;
case 1162:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= FLD_has_len;
		}
break;
case 1163:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_text;
			yyval.legacyField->charLength = 1;
		}
break;
case 1164:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_varying;
			yyval.legacyField->charLength = (USHORT) yyvsp[-1].int32Val;
			yyval.legacyField->flags |= FLD_has_len;
		}
break;
case 1176:
  if (!yytrial)
{
			SLONG precision = yyvsp[0].int32Val;

			if (precision != 0 && precision != 16 && precision != 34)
				yyabandon(YYPOSNARG(2), -842, isc_decprecision_err);	/* DecFloat precision must be 16 or 34.*/

			yyval.legacyField = newNode<dsql_fld>();
			if (precision)
				yyval.legacyField->flags |= FLD_has_prec;
			yyval.legacyField->precision = precision == 0 ? 34 : (USHORT) precision;
			yyval.legacyField->dtype = precision == 16 ? dtype_dec64 : dtype_dec128;
			yyval.legacyField->length = precision == 16 ? sizeof(Decimal64) : sizeof(Decimal128);
		}
break;
case 1177:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[0].legacyField;
			yyval.legacyField->subType = dsc_num_type_numeric;
			yyval.legacyField->flags |= FLD_has_sub;
		}
break;
case 1178:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[0].legacyField;
			yyval.legacyField->subType = dsc_num_type_decimal;
			yyval.legacyField->flags |= FLD_has_sub;

			if (yyval.legacyField->dtype == dtype_short)
			{
				yyval.legacyField->dtype = dtype_long;
				yyval.legacyField->length = sizeof(SLONG);
			}
		}
break;
case 1179:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_long;
			yyval.legacyField->length = sizeof(SLONG);
			yyval.legacyField->precision = 9;
		}
break;
case 1180:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->flags |= FLD_has_prec;

			if (yyvsp[-1].int32Val < 1 || yyvsp[-1].int32Val > 38)
				yyabandon(YYPOSNARG(2), -842, Arg::Gds(isc_precision_err2) << Arg::Num(1) << Arg::Num(38));
																/* Precision must be between 1 and 38*/

			if (yyvsp[-1].int32Val > 18)
			{
				yyval.legacyField->dtype = dtype_int128;
				yyval.legacyField->length = sizeof(Int128);
			}
			else if (yyvsp[-1].int32Val > 9)
			{
				if ( ( (client_dialect <= SQL_DIALECT_V5) && (db_dialect > SQL_DIALECT_V5) ) ||
					( (client_dialect > SQL_DIALECT_V5) && (db_dialect <= SQL_DIALECT_V5) ) )
				{
					ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-817) <<
							  Arg::Gds(isc_ddl_not_allowed_by_db_sql_dial) << Arg::Num(db_dialect));
				}

				if (client_dialect <= SQL_DIALECT_V5)
				{
					yyval.legacyField->dtype = dtype_double;
					yyval.legacyField->length = sizeof(double);
				}
				else
				{
					if (client_dialect == SQL_DIALECT_V6_TRANSITION)
					{
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous));
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous1));
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous2));
					}

					yyval.legacyField->dtype = dtype_int64;
					yyval.legacyField->length = sizeof(SINT64);
				}
			}
			else
			{
				if (yyvsp[-1].int32Val < 5)
				{
					yyval.legacyField->dtype = dtype_short;
					yyval.legacyField->length = sizeof(SSHORT);
				}
				else
				{
					yyval.legacyField->dtype = dtype_long;
					yyval.legacyField->length = sizeof(SLONG);
				}
			}

			yyval.legacyField->precision = (USHORT) yyvsp[-1].int32Val;
		}
break;
case 1181:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->flags |= (FLD_has_prec | FLD_has_scale);

			if (yyvsp[-3].int32Val < 1 || yyvsp[-3].int32Val > 38)
				yyabandon(YYPOSNARG(2), -842, Arg::Gds(isc_precision_err2) << Arg::Num(1) << Arg::Num(38));
																/* Precision must be between 1 and 38*/

			if (yyvsp[-1].int32Val > yyvsp[-3].int32Val || yyvsp[-1].int32Val < 0)
				yyabandon(YYPOSNARG(4), -842, isc_scale_nogt);	/* Scale must be between 0 and precision*/

			if (yyvsp[-3].int32Val > 18)
			{
				yyval.legacyField->dtype = dtype_int128;
				yyval.legacyField->length = sizeof(Int128);
			}
			else if (yyvsp[-3].int32Val > 9)
			{
				if ( ( (client_dialect <= SQL_DIALECT_V5) && (db_dialect > SQL_DIALECT_V5) ) ||
					( (client_dialect > SQL_DIALECT_V5) && (db_dialect <= SQL_DIALECT_V5) ) )
				{
					ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-817) <<
							  Arg::Gds(isc_ddl_not_allowed_by_db_sql_dial) << Arg::Num(db_dialect));
				}

				if (client_dialect <= SQL_DIALECT_V5)
				{
					yyval.legacyField->dtype = dtype_double;
					yyval.legacyField->length = sizeof(double);
				}
				else
				{
					if (client_dialect == SQL_DIALECT_V6_TRANSITION)
					{
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous));
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous1));
						ERRD_post_warning(Arg::Warning(isc_dsql_warn_precision_ambiguous2));
					}
					/* client_dialect >= SQL_DIALECT_V6*/
					yyval.legacyField->dtype = dtype_int64;
					yyval.legacyField->length = sizeof(SINT64);
				}
			}
			else
			{
				if (yyvsp[-3].int32Val < 5)
				{
					yyval.legacyField->dtype = dtype_short;
					yyval.legacyField->length = sizeof(SSHORT);
				}
				else
				{
					yyval.legacyField->dtype = dtype_long;
					yyval.legacyField->length = sizeof(SLONG);
				}
			}

			yyval.legacyField->precision = (USHORT) yyvsp[-3].int32Val;
			yyval.legacyField->scale = - (SSHORT) yyvsp[-1].int32Val;
		}
break;
case 1184:
  if (!yytrial)
{
		    /* Precision is binary digits of the significand: 1-24 for 32 bit single precision, 25-53 for 64 bit double precision*/
			/* Precision 0 is the 'no precision specified' case, which defaults to 32 bit single precision*/
			SLONG precision = yyvsp[0].int32Val;

			if (precision != 0 && (precision < 1 || precision > 53))
				yyabandon(YYPOSNARG(2), -842, Arg::Gds(isc_precision_err2) << Arg::Num(1) << Arg::Num(53));
																/* Precision must be between 1 and 53*/

			yyval.legacyField = newNode<dsql_fld>();

			if (precision > 24)
			{
				yyval.legacyField->dtype = dtype_double;
				yyval.legacyField->length = sizeof(double);
			}
			else
			{
				yyval.legacyField->dtype = dtype_real;
				yyval.legacyField->length = sizeof(float);
			}
		}
break;
case 1185:
  if (!yytrial)
{
			/* Precision is binary digits of the significand: 1-53 for 64 bit double precision*/
			/* Precision 0 is the 'no precision specified case', which defaults to 64 bit double precision*/
			SLONG precision = yyvsp[0].int32Val;

			if (precision != 0 && (precision < 1 || precision > 53))
				yyabandon(YYPOSNARG(3), -842, Arg::Gds(isc_precision_err2) << Arg::Num(1) << Arg::Num(53));
																/* Precision must be between 1 and 53*/

			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_double;
			yyval.legacyField->length = sizeof(double);
		}
break;
case 1186:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_real;
			yyval.legacyField->length = sizeof(float);
		}
break;
case 1187:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_double;
			yyval.legacyField->length = sizeof(double);
		}
break;
case 1188:
  if (!yytrial)
{ yyval.int32Val = 0; }
break;
case 1189:
  if (!yytrial)
{ yyval.int32Val = yyvsp[-1].int32Val; }
break;
case 1193:
  if (!yytrial)
{ yyval.traNode = newNode<UserSavepointNode>(UserSavepointNode::CMD_SET, *yyvsp[0].metaNamePtr); }
break;
case 1194:
  if (!yytrial)
{ yyval.traNode = newNode<UserSavepointNode>(UserSavepointNode::CMD_RELEASE, *yyvsp[0].metaNamePtr); }
break;
case 1195:
  if (!yytrial)
{ yyval.traNode = newNode<UserSavepointNode>(UserSavepointNode::CMD_RELEASE_ONLY, *yyvsp[-1].metaNamePtr); }
break;
case 1196:
  if (!yytrial)
{ yyval.traNode = newNode<UserSavepointNode>(UserSavepointNode::CMD_ROLLBACK, *yyvsp[0].metaNamePtr); }
break;
case 1199:
  if (!yytrial)
{ yyval.traNode = newNode<CommitRollbackNode>(CommitRollbackNode::CMD_COMMIT, yyvsp[0].boolVal); }
break;
case 1200:
  if (!yytrial)
{ yyval.traNode = newNode<CommitRollbackNode>(CommitRollbackNode::CMD_ROLLBACK, yyvsp[0].boolVal); }
break;
case 1203:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1204:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1207:
  if (!yytrial)
{ yyval.setTransactionNode = newNode<SetTransactionNode>(); }
break;
case 1208:
yyval.setTransactionNode = yyvsp[0].setTransactionNode;
break;
case 1209:
  if (!yytrial)
{ yyval.setTransactionNode = yyvsp[-2].setTransactionNode; }
break;
case 1210:
  if (!yytrial)
{ yyval.sessionResetNode = newNode<SessionResetNode>(); }
break;
case 1211:
  if (!yytrial)
{ yyval.setRoleNode = newNode<SetRoleNode>(yyvsp[0].metaNamePtr); }
break;
case 1212:
  if (!yytrial)
{ yyval.setRoleNode = newNode<SetRoleNode>(); }
break;
case 1213:
  if (!yytrial)
{ yyval.mngNode = newNode<SetDebugOptionNode>(yyvsp[-2].metaNamePtr, yyvsp[0].valueExprNode); }
break;
case 1214:
  if (!yytrial)
{ yyval.setDecFloatRoundNode = newNode<SetDecFloatRoundNode>(yyvsp[0].metaNamePtr); }
break;
case 1215:
  if (!yytrial)
{ yyval.setDecFloatTrapsNode = newNode<SetDecFloatTrapsNode>(); }
break;
case 1216:
yyval.setDecFloatTrapsNode = yyvsp[0].setDecFloatTrapsNode;
break;
case 1217:
  if (!yytrial)
{ yyval.setDecFloatTrapsNode = yyvsp[-2].setDecFloatTrapsNode; }
break;
case 1218:
  if (!yytrial)
{ yyval.setBindNode = newNode<SetBindNode>(); yyval.setBindNode->from = yyvsp[-2].legacyField; yyval.setBindNode->to = yyvsp[0].legacyField; }
break;
case 1220:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_timestamp_tz;
			yyval.legacyField->length = 0;
		}
break;
case 1222:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_varying;
			yyval.legacyField->charLength = 0;
		}
break;
case 1223:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[0].legacyField;
		}
break;
case 1224:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->flags = FLD_legacy;
		}
break;
case 1225:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->flags = FLD_native;
		}
break;
case 1226:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->flags = FLD_extended;
		}
break;
case 1227:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			checkTimeDialect();
			yyval.legacyField->dtype = dtype_ex_time_tz;
			yyval.legacyField->length = sizeof(ISC_TIME_TZ_EX);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1228:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_ex_timestamp_tz;
			yyval.legacyField->length = sizeof(ISC_TIMESTAMP_TZ_EX);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 1232:
yyval.setDecFloatTrapsNode = yyvsp[-2].setDecFloatTrapsNode;
break;
case 1234:
  if (!yytrial)
{ yyvsp[-1].setDecFloatTrapsNode->trap(yyvsp[0].metaNamePtr); }
break;
case 1235:
  if (!yytrial)
{ yyval.mngNode = newNode<SetOptimizeNode>(yyvsp[0].boolVal); }
break;
case 1236:
  if (!yytrial)
{ yyval.mngNode = newNode<SetOptimizeNode>(); }
break;
case 1237:
  if (!yytrial)
{ yyval.setSessionNode = newNode<SetSessionNode>(SetSessionNode::TYPE_IDLE_TIMEOUT, yyvsp[-1].int32Val, yyvsp[0].blrOp); }
break;
case 1238:
  if (!yytrial)
{ yyval.setSessionNode = newNode<SetSessionNode>(SetSessionNode::TYPE_STMT_TIMEOUT, yyvsp[-1].int32Val, yyvsp[0].blrOp); }
break;
case 1239:
  if (!yytrial)
{ yyval.blrOp = blr_extract_minute; }
break;
case 1240:
  if (!yytrial)
{ yyval.blrOp = blr_extract_hour; }
break;
case 1241:
  if (!yytrial)
{ yyval.blrOp = blr_extract_minute; }
break;
case 1242:
  if (!yytrial)
{ yyval.blrOp = blr_extract_second; }
break;
case 1243:
  if (!yytrial)
{ yyval.blrOp = blr_extract_second; }
break;
case 1244:
  if (!yytrial)
{ yyval.blrOp = blr_extract_hour; }
break;
case 1245:
  if (!yytrial)
{ yyval.blrOp = blr_extract_minute; }
break;
case 1246:
  if (!yytrial)
{ yyval.blrOp = blr_extract_second; }
break;
case 1247:
  if (!yytrial)
{ yyval.blrOp = blr_extract_millisecond; }
break;
case 1248:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 1249:
  if (!yytrial)
{ yyval.mngNode = newNode<SetTimeZoneNode>(yyvsp[0].intlStringPtr->getString()); }
break;
case 1250:
  if (!yytrial)
{ yyval.mngNode = newNode<SetTimeZoneNode>(); }
break;
case 1254:
yyval.setTransactionNode = yyvsp[-1].setTransactionNode;
break;
case 1256:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->readOnly, "READ {ONLY | WRITE}", true); }
break;
case 1257:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->readOnly, "READ {ONLY | WRITE}", false); }
break;
case 1258:
  if (!yytrial)
{ setClause(yyvsp[-1].setTransactionNode->wait, "[NO] WAIT", true); }
break;
case 1259:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->wait, "[NO] WAIT", false); }
break;
case 1260:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->isoLevel, "ISOLATION LEVEL", yyvsp[0].uintVal); }
break;
case 1261:
  if (!yytrial)
{ setClause(yyvsp[-3].setTransactionNode->noAutoUndo, "NO AUTO UNDO", true); }
break;
case 1262:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->ignoreLimbo, "IGNORE LIMBO", true); }
break;
case 1263:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->restartRequests, "RESTART REQUESTS", true); }
break;
case 1264:
  if (!yytrial)
{ setClause(yyvsp[-2].setTransactionNode->autoCommit, "AUTO COMMIT", true); }
break;
case 1265:
  if (!yytrial)
{ setClause(yyvsp[-4].setTransactionNode->autoReleaseTempBlobID, "AUTO RELEASE TEMP BLOBID", true); }
break;
case 1266:
  if (!yytrial)
{ setClause(yyvsp[-3].setTransactionNode->lockTimeout, "LOCK TIMEOUT", (USHORT) yyvsp[0].int32Val); }
break;
case 1267:
  if (!yytrial)
{ checkDuplicateClause(yyvsp[-1].setTransactionNode->reserveList, "RESERVING"); }
break;
case 1268:
yyval.setTransactionNode = yyvsp[-2].setTransactionNode;
break;
case 1270:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal;}
break;
case 1272:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal; }
break;
case 1273:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal; }
break;
case 1274:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal; }
break;
case 1275:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_CONCURRENCY; }
break;
case 1276:
  if (!yytrial)
{
			setClause(yyvsp[-4].setTransactionNode->atSnapshotNumber, "SNAPSHOT AT NUMBER", (CommitNumber) yyvsp[0].int64Val);
			yyval.uintVal = SetTransactionNode::ISO_LEVEL_CONCURRENCY;
		}
break;
case 1277:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_CONSISTENCY; }
break;
case 1278:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_CONSISTENCY; }
break;
case 1279:
  if (!yytrial)
{ yyval.int64Val = yyvsp[0].int32Val; }
break;
case 1280:
  if (!yytrial)
{ yyval.int64Val = yyvsp[0].scaledNumber.number; }
break;
case 1281:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_READ_COMMITTED_NO_REC_VERSION; }
break;
case 1282:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_READ_COMMITTED_REC_VERSION; }
break;
case 1283:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_READ_COMMITTED_NO_REC_VERSION; }
break;
case 1284:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::ISO_LEVEL_READ_COMMITTED_READ_CONSISTENCY; }
break;
case 1285:
  if (!yytrial)
{ yyval.uintVal = 0; }
break;
case 1286:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::LOCK_MODE_SHARED; }
break;
case 1287:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::LOCK_MODE_PROTECTED; }
break;
case 1288:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::LOCK_MODE_READ; }
break;
case 1289:
  if (!yytrial)
{ yyval.uintVal = SetTransactionNode::LOCK_MODE_WRITE; }
break;
case 1290:
  if (!yytrial)
{ yyvsp[-1].setTransactionNode->reserveList.add(yyvsp[0].setTransactionRestrictionClause); }
break;
case 1291:
  if (!yytrial)
{ yyvsp[-3].setTransactionNode->reserveList.add(yyvsp[0].setTransactionRestrictionClause); }
break;
case 1292:
  if (!yytrial)
{ yyval.setTransactionRestrictionClause = newNode<SetTransactionNode::RestrictionOption>(yyvsp[-1].metaNameArray, yyvsp[0].uintVal); }
break;
case 1293:
  if (!yytrial)
{ yyval.uintVal = 0; }
break;
case 1294:
  if (!yytrial)
{ yyval.uintVal = yyvsp[-1].uintVal | yyvsp[0].uintVal; }
break;
case 1295:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = newNode<ObjectsArray<MetaName> >();
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1296:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = yyvsp[-2].metaNameArray;
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1297:
  if (!yytrial)
{ yyval.ddlNode = newNode<SetStatisticsNode>(*yyvsp[0].metaNamePtr); }
break;
case 1298:
  if (!yytrial)
{ yyval.ddlNode = newNode<CommentOnNode>(yyvsp[-2].intVal, QualifiedName(""), "", *yyvsp[0].stringPtr); }
break;
case 1299:
  if (!yytrial)
{ yyval.ddlNode = newNode<CommentOnNode>(yyvsp[-3].intVal, QualifiedName(*yyvsp[-2].metaNamePtr), "", *yyvsp[0].stringPtr); }
break;
case 1300:
  if (!yytrial)
{ yyval.ddlNode = newNode<CommentOnNode>(yyvsp[-4].intVal, QualifiedName(*yyvsp[-3].metaNamePtr), *yyvsp[-2].metaNamePtr, *yyvsp[0].stringPtr); }
break;
case 1301:
  if (!yytrial)
{ yyval.ddlNode = newNode<CommentOnNode>(yyvsp[-4].intVal, *yyvsp[-3].qualifiedNamePtr, *yyvsp[-2].metaNamePtr, *yyvsp[0].stringPtr); }
break;
case 1302:
  if (!yytrial)
{ yyval.ddlNode = newNode<CommentOnNode>(yyvsp[-3].intVal, *yyvsp[-2].qualifiedNamePtr, "", *yyvsp[0].stringPtr); }
break;
case 1303:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterUserNode; }
break;
case 1304:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 1305:
  if (!yytrial)
{
				yyval.createAlterUserNode = newNode<CreateAlterUserNode>(CreateAlterUserNode::USER_MOD, *yyvsp[0].metaNamePtr);
			}
break;
case 1306:
yyval.createAlterUserNode = yyvsp[0].createAlterUserNode;
break;
case 1307:
  if (!yytrial)
{
				CreateAlterUserNode* node = yyval.createAlterUserNode = yyvsp[-4].createAlterUserNode;
				node->comment = yyvsp[0].stringPtr;
			}
break;
case 1310:
  if (!yytrial)
{ yyval.intVal = obj_database; }
break;
case 1311:
  if (!yytrial)
{ yyval.intVal = obj_field; }
break;
case 1312:
  if (!yytrial)
{ yyval.intVal = obj_relation; }
break;
case 1313:
  if (!yytrial)
{ yyval.intVal = obj_view; }
break;
case 1314:
  if (!yytrial)
{ yyval.intVal = obj_trigger; }
break;
case 1315:
  if (!yytrial)
{ yyval.intVal = obj_blob_filter; }
break;
case 1316:
  if (!yytrial)
{ yyval.intVal = obj_exception; }
break;
case 1317:
  if (!yytrial)
{ yyval.intVal = obj_generator; }
break;
case 1318:
  if (!yytrial)
{ yyval.intVal = obj_generator; }
break;
case 1319:
  if (!yytrial)
{ yyval.intVal = obj_index; }
break;
case 1320:
  if (!yytrial)
{ yyval.intVal = obj_sql_role; }
break;
case 1321:
  if (!yytrial)
{ yyval.intVal = obj_charset; }
break;
case 1322:
  if (!yytrial)
{ yyval.intVal = obj_collation; }
break;
case 1323:
  if (!yytrial)
{ yyval.intVal = obj_package_header; }
break;
case 1324:
  if (!yytrial)
{ yyval.intVal = obj_relation; }
break;
case 1325:
  if (!yytrial)
{ yyval.intVal = obj_parameter; }
break;
case 1326:
  if (!yytrial)
{ yyval.intVal = obj_procedure; }
break;
case 1327:
  if (!yytrial)
{ yyval.intVal = obj_udf; }
break;
case 1328:
  if (!yytrial)
{ yyval.intVal = obj_procedure; }
break;
case 1329:
  if (!yytrial)
{ yyval.intVal = obj_udf; }
break;
case 1330:
  if (!yytrial)
{ yyval.intVal = obj_udf; }
break;
case 1331:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1332:
  if (!yytrial)
{ yyval.qualifiedNamePtr = newNode<QualifiedName>(*yyvsp[0].metaNamePtr); }
break;
case 1333:
  if (!yytrial)
{ yyval.qualifiedNamePtr = newNode<QualifiedName>(*yyvsp[0].metaNamePtr, *yyvsp[-2].metaNamePtr); }
break;
case 1334:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 1335:
  if (!yytrial)
{ yyval.stringPtr = newString(""); }
break;
case 1336:
  if (!yytrial)
{
			SelectNode* node = newNode<SelectNode>();
			node->selectExpr = yyvsp[-3].selectExprNode;
			node->forUpdate = yyvsp[-2].boolVal;
			node->withLock = yyvsp[-1].boolPair.first;
			node->skipLocked = yyvsp[-1].boolPair.second;
			node->optimizeForFirstRows = yyvsp[0].triState;
			yyval.selectNode = node;
		}
break;
case 1337:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1338:
  if (!yytrial)
{ yyval.boolVal = true; /* for_update_list is ignored */ }
break;
case 1339:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1340:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1341:
  if (!yytrial)
{ yyval.boolPair = {false, false}; }
break;
case 1342:
  if (!yytrial)
{ yyval.boolPair = {true, yyvsp[0].boolVal}; }
break;
case 1343:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1344:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1345:
  if (!yytrial)
{ yyval.triState = TriState(yyvsp[0].boolVal); }
break;
case 1346:
  if (!yytrial)
{ yyval.triState = TriState(); }
break;
case 1347:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1348:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1349:
  if (!yytrial)
{
			SelectExprNode* node = yyval.selectExprNode = newNode<SelectExprNode>();
			node->querySpec = yyvsp[-2].recSourceNode;
			node->orderClause = yyvsp[-1].valueListNode;
			node->rowsClause = yyvsp[0].rowsClause;
			node->withClause = yyvsp[-3].withClause;
		}
break;
case 1350:
  if (!yytrial)
{
			SelectExprNode* node = yyval.selectExprNode = newNode<SelectExprNode>();
			node->querySpec = yyvsp[-3].recSourceNode;
			node->orderClause = yyvsp[-2].valueListNode;

			if (yyvsp[-1].valueExprNode || yyvsp[0].valueExprNode)
			{
				RowsClause* rowsNode = newNode<RowsClause>();
				rowsNode->skip = yyvsp[-1].valueExprNode;
				rowsNode->length = yyvsp[0].valueExprNode;
				node->rowsClause = rowsNode;
			}

			node->withClause = yyvsp[-4].withClause;
		}
break;
case 1351:
  if (!yytrial)
{ yyval.withClause = NULL; }
break;
case 1352:
  if (!yytrial)
{
			yyval.withClause = yyvsp[0].withClause;
			yyval.withClause->recursive = true;
		}
break;
case 1353:
  if (!yytrial)
{ yyval.withClause = yyvsp[0].withClause; }
break;
case 1354:
  if (!yytrial)
{
			yyval.withClause = newNode<WithClause>();
			yyval.withClause->add(yyvsp[0].selectExprNode);
		}
break;
case 1355:
  if (!yytrial)
{
			yyval.withClause = yyvsp[-2].withClause;
			yyval.withClause->add(yyvsp[0].selectExprNode);
		}
break;
case 1356:
  if (!yytrial)
{
			yyval.selectExprNode = yyvsp[-1].selectExprNode;
			yyval.selectExprNode->dsqlFlags |= RecordSourceNode::DFLAG_DERIVED;
			yyval.selectExprNode->alias = yyvsp[-5].metaNamePtr->c_str();
			yyval.selectExprNode->columns = yyvsp[-4].metaNameArray;
		}
break;
case 1357:
  if (!yytrial)
{
			yyval.selectExprNode = yyvsp[0].selectExprNode;
			yyval.selectExprNode->dsqlFlags |= RecordSourceNode::DFLAG_VALUE;
		}
break;
case 1358:
  if (!yytrial)
{
			yyvsp[0].selectExprNode->dsqlFlags |= RecordSourceNode::DFLAG_SINGLETON;
			yyval.valueExprNode = newNode<SubQueryNode>(blr_via, yyvsp[0].selectExprNode);
		}
break;
case 1359:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].recSourceNode; }
break;
case 1360:
  if (!yytrial)
{
			UnionSourceNode* node = nodeAs<UnionSourceNode>(yyvsp[-3].recSourceNode);
			if (node && !node->dsqlAll)
				node->dsqlClauses->add(yyvsp[0].recSourceNode);
			else
			{
				node = newNode<UnionSourceNode>();
				node->dsqlClauses = newNode<RecSourceListNode>(yyvsp[-3].recSourceNode)->add(yyvsp[0].recSourceNode);
			}
			yyval.recSourceNode = node;
		}
break;
case 1361:
  if (!yytrial)
{
			UnionSourceNode* node = nodeAs<UnionSourceNode>(yyvsp[-3].recSourceNode);
			if (node && node->dsqlAll)
				node->dsqlClauses->add(yyvsp[0].recSourceNode);
			else
			{
				node = newNode<UnionSourceNode>();
				node->dsqlAll = true;
				node->dsqlClauses = newNode<RecSourceListNode>(yyvsp[-3].recSourceNode)->add(yyvsp[0].recSourceNode);
			}
			yyval.recSourceNode = node;
		}
break;
case 1363:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].rseNode; }
break;
case 1364:
  if (!yytrial)
{
			if (yyvsp[-3].valueListNode || yyvsp[-2].valueExprNode || yyvsp[-1].valueExprNode)
			{
				const auto selectExpr = newNode<SelectExprNode>();
				selectExpr->dsqlFlags |= RecordSourceNode::DFLAG_DERIVED;
				selectExpr->querySpec = yyvsp[-4].recSourceNode;
				selectExpr->orderClause = yyvsp[-3].valueListNode;

				if (yyvsp[-2].valueExprNode || yyvsp[-1].valueExprNode)
				{
					const auto rowsNode = newNode<RowsClause>();
					rowsNode->skip = yyvsp[-2].valueExprNode;
					rowsNode->length = yyvsp[-1].valueExprNode;
					selectExpr->rowsClause = rowsNode;
				}

				const auto rse = newNode<RseNode>();
				rse->dsqlFlags |= RecordSourceNode::DFLAG_BODY_WRAPPER;
				rse->dsqlFrom = newNode<RecSourceListNode>(selectExpr);
				yyval.recSourceNode = rse;
			}
			else
				yyval.recSourceNode = yyvsp[-4].recSourceNode;
		}
break;
case 1365:
  if (!yytrial)
{
			RseNode* rse = newNode<RseNode>();
			rse->dsqlFirst = yyvsp[-8].valueListNode ? yyvsp[-8].valueListNode->items[1] : NULL;
			rse->dsqlSkip = yyvsp[-8].valueListNode ? yyvsp[-8].valueListNode->items[0] : NULL;
			rse->dsqlDistinct = yyvsp[-7].valueListNode;
			rse->dsqlSelectList = yyvsp[-6].valueListNode->items.hasData() ? yyvsp[-6].valueListNode : nullptr;
			rse->dsqlFrom = yyvsp[-5].recSourceListNode;
			rse->dsqlWhere = yyvsp[-4].boolExprNode;
			rse->dsqlGroup = yyvsp[-3].valueListNode;
			rse->dsqlHaving = yyvsp[-2].boolExprNode;
			rse->dsqlNamedWindows = yyvsp[-1].namedWindowsClause;
			rse->rse_plan = yyvsp[0].planNode;
			yyval.rseNode = rse;
		}
break;
case 1366:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1367:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode)->add(yyvsp[-1].valueExprNode); }
break;
case 1368:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(1u)->add(yyvsp[0].valueExprNode); }
break;
case 1369:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode)->add(NULL); }
break;
case 1370:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(yyvsp[0].int32Val); }
break;
case 1371:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueExprNode; }
break;
case 1372:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1373:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(yyvsp[0].int32Val); }
break;
case 1374:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueExprNode; }
break;
case 1375:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1376:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(0u); }
break;
case 1377:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1378:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1379:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(0u); }
break;
case 1380:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 1381:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 1383:
  if (!yytrial)
{
			FieldNode* fieldNode = newNode<FieldNode>();
			fieldNode->dsqlQualifier = *yyvsp[-2].metaNamePtr;
			yyval.valueExprNode = fieldNode;
		}
break;
case 1385:
  if (!yytrial)
{ yyval.valueExprNode = newNode<DsqlAliasNode>(*yyvsp[0].metaNamePtr, yyvsp[-2].valueExprNode); }
break;
case 1388:
  if (!yytrial)
{ yyval.recSourceListNode = yyvsp[0].recSourceListNode; }
break;
case 1389:
  if (!yytrial)
{ yyval.recSourceListNode = newNode<RecSourceListNode>(yyvsp[0].recSourceNode); }
break;
case 1390:
  if (!yytrial)
{ yyval.recSourceListNode = yyvsp[-2].recSourceListNode->add(yyvsp[0].recSourceNode); }
break;
case 1394:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].selectExprNode; }
break;
case 1395:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].selectExprNode; }
break;
case 1396:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].recSourceNode; }
break;
case 1397:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].recSourceNode; }
break;
case 1398:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[-1].recSourceNode; }
break;
case 1399:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[-1].recSourceNode; }
break;
case 1400:
  if (!yytrial)
{
			yyval.selectExprNode = yyvsp[-3].selectExprNode;
			yyval.selectExprNode->dsqlFlags |= RecordSourceNode::DFLAG_DERIVED;
			if (yyvsp[-1].metaNamePtr)
				yyval.selectExprNode->alias = yyvsp[-1].metaNamePtr->c_str();
			yyval.selectExprNode->columns = yyvsp[0].metaNameArray;
		}
break;
case 1401:
  if (!yytrial)
{
			yyval.selectExprNode = yyvsp[0].selectExprNode;
			yyval.selectExprNode->dsqlFlags |= RecordSourceNode::DFLAG_LATERAL;
		}
break;
case 1402:
  if (!yytrial)
{ yyval.metaNamePtr = nullptr; }
break;
case 1404:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1405:
  if (!yytrial)
{ yyval.metaNameArray = NULL; }
break;
case 1406:
  if (!yytrial)
{ yyval.metaNameArray = yyvsp[-1].metaNameArray; }
break;
case 1407:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = newNode<ObjectsArray<MetaName> >();
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1408:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = yyvsp[-2].metaNameArray;
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1412:
  if (!yytrial)
{
			RseNode* rse = newNode<RseNode>();
			rse->dsqlExplicitJoin = true;
			rse->rse_jointype = blr_inner;
			rse->dsqlFrom = newNode<RecSourceListNode>(yyvsp[-3].recSourceNode)->add(yyvsp[0].recSourceNode);
			yyval.recSourceNode = rse;
		}
break;
case 1413:
  if (!yytrial)
{
			RseNode* rse = newNode<RseNode>();
			rse->dsqlExplicitJoin = true;
			rse->rse_jointype = yyvsp[-2].blrOp;
			rse->dsqlFrom = newNode<RecSourceListNode>(yyvsp[-4].recSourceNode)->add(yyvsp[0].recSourceNode);
			rse->dsqlJoinUsing = newNode<ValueListNode>(0u);	/* using list with size 0 -> natural*/
			yyval.recSourceNode = rse;
		}
break;
case 1414:
  if (!yytrial)
{
			RseNode* rse = newNode<RseNode>();
			rse->dsqlExplicitJoin = true;
			rse->rse_jointype = yyvsp[-3].blrOp;
			rse->dsqlFrom = newNode<RecSourceListNode>(yyvsp[-4].recSourceNode);
			rse->dsqlFrom->add(yyvsp[-1].recSourceNode);
			rse->dsqlWhere = yyvsp[0].boolExprNode;
			yyval.recSourceNode = rse;
		}
break;
case 1415:
  if (!yytrial)
{
			RseNode* rse = newNode<RseNode>();
			rse->dsqlExplicitJoin = true;
			rse->rse_jointype = yyvsp[-3].blrOp;
			rse->dsqlFrom = newNode<RecSourceListNode>(yyvsp[-4].recSourceNode);
			rse->dsqlFrom->add(yyvsp[-1].recSourceNode);
			rse->dsqlJoinUsing = yyvsp[0].valueListNode;
			yyval.recSourceNode = rse;
		}
break;
case 1416:
  if (!yytrial)
{ yyval.boolExprNode = yyvsp[0].boolExprNode; }
break;
case 1417:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-1].valueListNode; }
break;
case 1418:
  if (!yytrial)
{
			const auto node = newNode<ProcedureSourceNode>(QualifiedName(*yyvsp[-3].metaNamePtr));
			node->inputSources = yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->second : nullptr;
			node->dsqlInputArgNames = yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->first : nullptr;
			node->alias = yyvsp[0].metaNamePtr->c_str();
			yyval.recSourceNode = node;
		}
break;
case 1419:
  if (!yytrial)
{
			const auto node = newNode<ProcedureSourceNode>(QualifiedName(*yyvsp[-1].metaNamePtr));
			node->inputSources = yyvsp[0].namedArguments ? yyvsp[0].namedArguments->second : nullptr;
			node->dsqlInputArgNames = yyvsp[0].namedArguments ? yyvsp[0].namedArguments->first : nullptr;
			yyval.recSourceNode = node;
		}
break;
case 1420:
  if (!yytrial)
{
			const auto node = newNode<ProcedureSourceNode>(
				QualifiedName(*yyvsp[-3].metaNamePtr, *yyvsp[-5].metaNamePtr));
			node->inputSources = yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->second : nullptr;
			node->dsqlInputArgNames = yyvsp[-2].namedArguments ? yyvsp[-2].namedArguments->first : nullptr;
			node->alias = yyvsp[0].metaNamePtr->c_str();
			yyval.recSourceNode = node;
		}
break;
case 1421:
  if (!yytrial)
{
			const auto node = newNode<ProcedureSourceNode>(
				QualifiedName(*yyvsp[-1].metaNamePtr, *yyvsp[-3].metaNamePtr));
			node->inputSources = yyvsp[0].namedArguments ? yyvsp[0].namedArguments->second : nullptr;
			node->dsqlInputArgNames = yyvsp[0].namedArguments ? yyvsp[0].namedArguments->first : nullptr;
			yyval.recSourceNode = node;
		}
break;
case 1422:
  if (!yytrial)
{ yyval.namedArguments = nullptr; }
break;
case 1423:
  if (!yytrial)
{ yyval.namedArguments = yyvsp[-1].namedArguments; }
break;
case 1425:
  if (!yytrial)
{
			RelationSourceNode* node = newNode<RelationSourceNode>(*yyvsp[-2].metaNamePtr);
			node->alias = yyvsp[0].metaNamePtr->c_str();
			yyval.relSourceNode = node;
		}
break;
case 1426:
  if (!yytrial)
{ yyval.relSourceNode = newNode<RelationSourceNode>(*yyvsp[0].metaNamePtr); }
break;
case 1427:
  if (!yytrial)
{ yyval.blrOp = blr_inner; }
break;
case 1428:
  if (!yytrial)
{ yyval.blrOp = blr_inner; }
break;
case 1429:
  if (!yytrial)
{ yyval.blrOp = blr_left; }
break;
case 1430:
  if (!yytrial)
{ yyval.blrOp = blr_right; }
break;
case 1431:
  if (!yytrial)
{ yyval.blrOp = blr_full; }
break;
case 1434:
  if (!yytrial)
{
			auto node = nodeAs<TableValueFunctionSourceNode>(yyvsp[-2].recSourceNode);
			node->alias = *yyvsp[-1].metaNamePtr;
			if (yyvsp[0].metaNameArray)
				node->dsqlNameColumns = *yyvsp[0].metaNameArray;
			yyval.recSourceNode = node;
		}
break;
case 1435:
  if (!yytrial)
{ yyval.recSourceNode = yyvsp[0].recSourceNode; }
break;
case 1436:
  if (!yytrial)
{
			auto node = newNode<UnlistFunctionSourceNode>();
			node->dsqlFlags |= RecordSourceNode::DFLAG_VALUE;
			node->dsqlName = *yyvsp[-4].metaNamePtr;
			node->inputList = yyvsp[-2].valueListNode;
			node->dsqlField = yyvsp[-1].legacyField;
			yyval.recSourceNode = node;
		}
break;
case 1437:
  if (!yytrial)
{
			yyval.valueListNode = newNode<ValueListNode>(yyvsp[-1].valueExprNode);
			yyval.valueListNode->add(yyvsp[0].valueExprNode);
		}
break;
case 1438:
  if (!yytrial)
{ yyval.legacyField = NULL; }
break;
case 1439:
  if (!yytrial)
{ yyval.legacyField = yyvsp[0].legacyField; }
break;
case 1440:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1441:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = newNode<ObjectsArray<MetaName>>();
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1442:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = yyvsp[-2].metaNameArray;
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1443:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1444:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1445:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1446:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 1447:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 1449:
  if (!yytrial)
{ yyval.boolExprNode = NULL; }
break;
case 1450:
  if (!yytrial)
{ yyval.boolExprNode = yyvsp[0].boolExprNode; }
break;
case 1451:
  if (!yytrial)
{ yyval.boolExprNode = NULL; }
break;
case 1452:
  if (!yytrial)
{ yyval.boolExprNode = yyvsp[0].boolExprNode; }
break;
case 1453:
  if (!yytrial)
{ yyval.namedWindowsClause = NULL; }
break;
case 1454:
  if (!yytrial)
{ yyval.namedWindowsClause = yyvsp[0].namedWindowsClause; }
break;
case 1455:
  if (!yytrial)
{
			NamedWindowsClause* node = newNode<NamedWindowsClause>();
			node->add(*yyvsp[0].namedWindowClause);
			yyval.namedWindowsClause = node;
		}
break;
case 1456:
  if (!yytrial)
{
			NamedWindowsClause* node = yyvsp[-2].namedWindowsClause;
			node->add(*yyvsp[0].namedWindowClause);
			yyval.namedWindowsClause = node;
		}
break;
case 1457:
  if (!yytrial)
{
			yyval.namedWindowClause = newNode<NamedWindowClause>(*yyvsp[-4].metaNamePtr, yyvsp[-1].windowClause);
		}
break;
case 1458:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 1460:
  if (!yytrial)
{ yyval.planNode = NULL; }
break;
case 1461:
  if (!yytrial)
{ yyval.planNode = yyvsp[0].planNode; }
break;
case 1462:
  if (!yytrial)
{ yyval.planNode = newNode<PlanNode>(PlanNode::TYPE_RETRIEVE); }
break;
case 1463:
yyval.planNode = yyvsp[-1].planNode;
break;
case 1464:
  if (!yytrial)
{ yyval.planNode = yyvsp[-4].planNode; }
break;
case 1471:
  if (!yytrial)
{ yyvsp[-1].planNode->subNodes.add(yyvsp[0].planNode); }
break;
case 1472:
  if (!yytrial)
{ yyvsp[-3].planNode->subNodes.add(yyvsp[0].planNode); }
break;
case 1473:
  if (!yytrial)
{
			yyval.planNode = newNode<PlanNode>(PlanNode::TYPE_RETRIEVE);
			yyval.planNode->dsqlNames = yyvsp[-1].metaNameArray;
			yyval.planNode->accessType = yyvsp[0].accessType;
		}
break;
case 1475:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = newNode<ObjectsArray<MetaName> >();
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1476:
  if (!yytrial)
{
			ObjectsArray<MetaName>* node = yyvsp[-1].metaNameArray;
			node->add(*yyvsp[0].metaNamePtr);
			yyval.metaNameArray = node;
		}
break;
case 1477:
  if (!yytrial)
{ yyval.accessType = newNode<PlanNode::AccessType>(PlanNode::AccessType::TYPE_SEQUENTIAL); }
break;
case 1478:
  if (!yytrial)
{ yyval.accessType = newNode<PlanNode::AccessType>(PlanNode::AccessType::TYPE_INDICES); }
break;
case 1479:
yyval.accessType = yyvsp[-1].accessType;
break;
case 1480:
  if (!yytrial)
{ yyval.accessType = yyvsp[-4].accessType; }
break;
case 1481:
  if (!yytrial)
{ yyval.accessType = newNode<PlanNode::AccessType>(PlanNode::AccessType::TYPE_NAVIGATIONAL); }
break;
case 1482:
  if (!yytrial)
{
			yyval.accessType = yyvsp[-3].accessType;
			yyval.accessType->items.insert(0).indexName = *yyvsp[-2].metaNamePtr;
		}
break;
case 1483:
  if (!yytrial)
{
			PlanNode::AccessItem& item = yyvsp[-1].accessType->items.add();
			item.indexName = *yyvsp[0].metaNamePtr;
		}
break;
case 1484:
  if (!yytrial)
{
			PlanNode::AccessItem& item = yyvsp[-3].accessType->items.add();
			item.indexName = *yyvsp[0].metaNamePtr;
		}
break;
case 1486:
yyval.accessType = yyvsp[-2].accessType;
break;
case 1488:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1490:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1491:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 1492:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 1493:
  if (!yytrial)
{
			OrderNode* node = newNode<OrderNode>(yyvsp[-2].valueExprNode);
			node->descending = yyvsp[-1].boolVal;
			node->nullsPlacement = yyvsp[0].nullsPlacement;
			yyval.valueExprNode = node;
		}
break;
case 1494:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1495:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1496:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1497:
  if (!yytrial)
{ yyval.nullsPlacement = OrderNode::NULLS_DEFAULT; }
break;
case 1498:
  if (!yytrial)
{ yyval.nullsPlacement = yyvsp[0].nullsPlacement; }
break;
case 1499:
  if (!yytrial)
{ yyval.nullsPlacement = OrderNode::NULLS_FIRST; }
break;
case 1500:
  if (!yytrial)
{ yyval.nullsPlacement = OrderNode::NULLS_LAST; }
break;
case 1501:
  if (!yytrial)
{
			yyval.rowsClause = newNode<RowsClause>();
			yyval.rowsClause->length = yyvsp[0].valueExprNode;
		}
break;
case 1502:
  if (!yytrial)
{
			yyval.rowsClause = newNode<RowsClause>();
			yyval.rowsClause->skip = newNode<ArithmeticNode>(blr_subtract, true, yyvsp[-2].valueExprNode, MAKE_const_slong(1));
			yyval.rowsClause->length = newNode<ArithmeticNode>(blr_add, true,
				newNode<ArithmeticNode>(blr_subtract, true, yyvsp[0].valueExprNode, yyvsp[-2].valueExprNode), MAKE_const_slong(1));
		}
break;
case 1503:
  if (!yytrial)
{ yyval.rowsClause = NULL; }
break;
case 1507:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 1508:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueExprNode; }
break;
case 1511:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 1512:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-2].valueExprNode; }
break;
case 1513:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(1); }
break;
case 1514:
yyval.nestFieldArray = NOTRIAL(&yyvsp[0].storeNode->dsqlFields);
break;
case 1515:
  if (!yytrial)
{
			StoreNode* node = yyval.storeNode = yyvsp[-8].storeNode;
			node->overrideClause = yyvsp[-5].nullableOverrideClause;
			node->dsqlValues = yyvsp[-2].valueListNode;
			node->dsqlReturning = yyvsp[0].returningClause;
		}
break;
case 1516:
  if (!yytrial)
{
			StoreNode* node = yyval.storeNode = yyvsp[-5].storeNode;
			node->overrideClause = yyvsp[-2].nullableOverrideClause;
			node->dsqlRse = yyvsp[-1].selectExprNode;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.storeNode = node;
		}
break;
case 1517:
  if (!yytrial)
{
			StoreNode* node = yyval.storeNode = yyvsp[-3].storeNode;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.storeNode = node;
		}
break;
case 1518:
  if (!yytrial)
{
			StoreNode* node = newNode<StoreNode>();
			node->target = yyvsp[0].relSourceNode;
			yyval.storeNode = node;
		}
break;
case 1519:
  if (!yytrial)
{ yyval.nullableOverrideClause = std::nullopt; }
break;
case 1520:
  if (!yytrial)
{ yyval.nullableOverrideClause = OverrideClause::USER_VALUE; }
break;
case 1521:
  if (!yytrial)
{ yyval.nullableOverrideClause = OverrideClause::SYSTEM_VALUE; }
break;
case 1522:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 1523:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 1525:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 1526:
  if (!yytrial)
{
				MergeNode* node = yyval.mergeNode = newNode<MergeNode>();
				node->relation = yyvsp[-4].relSourceNode;
				node->usingClause = yyvsp[-2].recSourceNode;
				node->condition = yyvsp[0].boolExprNode;
			}
break;
case 1527:
yyval.mergeNode = yyvsp[0].mergeNode;
break;
case 1528:
  if (!yytrial)
{
				MergeNode* node = yyval.mergeNode = yyvsp[-5].mergeNode;
				node->plan = yyvsp[-2].planNode;
				node->order = yyvsp[-1].valueListNode;
				node->returning = yyvsp[0].returningClause;
			}
break;
case 1531:
yyval.mergeNode = yyvsp[-1].mergeNode;
break;
case 1534:
  if (!yytrial)
{ yyval.mergeMatchedClause = &yyvsp[-2].mergeNode->whenMatched.add(); }
break;
case 1535:
yyval.mergeMatchedClause = NOTRIAL(yyvsp[0].mergeMatchedClause);
break;
case 1536:
yyval.metaNamePtr =  NOTRIAL(&yyvsp[-4].mergeNode->relation->dsqlName);
break;
case 1538:
  if (!yytrial)
{ yyval.mergeNotMatchedClause = &yyvsp[-4].mergeNode->whenNotMatchedByTarget.add(); }
break;
case 1539:
yyval.mergeNotMatchedClause = NOTRIAL(yyvsp[0].mergeNotMatchedClause);
break;
case 1541:
  if (!yytrial)
{ yyval.mergeMatchedClause = &yyvsp[-5].mergeNode->whenNotMatchedBySource.add(); }
break;
case 1542:
yyval.metaNamePtr =  NOTRIAL(&yyvsp[-7].mergeNode->relation->dsqlName);
break;
case 1546:
yyval.metaNamePtr = NOTRIAL(yyvsp[-3].metaNamePtr);
break;
case 1547:
  if (!yytrial)
{ yyvsp[-6].mergeMatchedClause->assignments = yyvsp[0].compoundStmtNode; }
break;
case 1548:
yyval.metaNamePtr = NOTRIAL(yyvsp[-5].metaNamePtr);
break;
case 1549:
  if (!yytrial)
{
			yyvsp[-8].mergeMatchedClause->condition = yyvsp[-5].boolExprNode;
			yyvsp[-8].mergeMatchedClause->assignments = yyvsp[0].compoundStmtNode;
		}
break;
case 1551:
  if (!yytrial)
{ yyvsp[-5].mergeMatchedClause->condition = yyvsp[-2].boolExprNode; }
break;
case 1552:
yyval.nestFieldArray = NOTRIAL(&yyvsp[-2].mergeNotMatchedClause->fields);
break;
case 1553:
  if (!yytrial)
{
			yyvsp[-9].mergeNotMatchedClause->overrideClause = yyvsp[-4].nullableOverrideClause;
			yyvsp[-9].mergeNotMatchedClause->values = yyvsp[-1].valueListNode;
		}
break;
case 1554:
yyval.nestFieldArray = NOTRIAL(&yyvsp[-4].mergeNotMatchedClause->fields);
break;
case 1555:
  if (!yytrial)
{
			yyvsp[-11].mergeNotMatchedClause->overrideClause = yyvsp[-4].nullableOverrideClause;
			yyvsp[-11].mergeNotMatchedClause->values = yyvsp[-1].valueListNode;
			yyvsp[-11].mergeNotMatchedClause->condition = yyvsp[-9].boolExprNode;
		}
break;
case 1558:
  if (!yytrial)
{
			const auto node = newNode<EraseNode>();
			node->dsqlRelation = yyvsp[-6].relSourceNode;
			node->dsqlBoolean = yyvsp[-5].boolExprNode;
			node->dsqlPlan = yyvsp[-4].planNode;
			node->dsqlOrder = yyvsp[-3].valueListNode;
			node->dsqlRows = yyvsp[-2].rowsClause;
			node->dsqlSkipLocked = yyvsp[-1].boolVal;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.stmtNode = node;
		}
break;
case 1559:
  if (!yytrial)
{
			EraseNode* node = newNode<EraseNode>();
			node->dsqlRelation = yyvsp[-2].relSourceNode;
			node->dsqlCursorName = *yyvsp[-1].metaNamePtr;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.stmtNode = node;
		}
break;
case 1562:
yyval.metaNamePtr = NOTRIAL(&yyvsp[-1].relSourceNode->dsqlName);
break;
case 1563:
  if (!yytrial)
{
			ModifyNode* node = newNode<ModifyNode>();
			node->dsqlRelation = yyvsp[-9].relSourceNode;
			node->statement = yyvsp[-6].compoundStmtNode;
			node->dsqlBoolean = yyvsp[-5].boolExprNode;
			node->dsqlPlan = yyvsp[-4].planNode;
			node->dsqlOrder = yyvsp[-3].valueListNode;
			node->dsqlRows = yyvsp[-2].rowsClause;
			node->dsqlSkipLocked = yyvsp[-1].boolVal;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.stmtNode = node;
		}
break;
case 1564:
  if (!yytrial)
{
			ModifyNode* node = newNode<ModifyNode>();
			node->dsqlRelation = yyvsp[-5].relSourceNode;
			node->statement = yyvsp[-2].compoundStmtNode;
			node->dsqlCursorName = *yyvsp[-1].metaNamePtr;
			node->dsqlReturning = yyvsp[0].returningClause;
			yyval.stmtNode = node;
		}
break;
case 1565:
  if (!yytrial)
{
				UpdateOrInsertNode* node = yyval.updInsNode = newNode<UpdateOrInsertNode>();
				node->relation = yyvsp[0].relSourceNode;
			}
break;
case 1566:
yyval.nestFieldArray = NOTRIAL(&yyvsp[0].updInsNode->fields);
break;
case 1567:
yyval.nestFieldArray = NOTRIAL(&yyvsp[-7].updInsNode->matching);
break;
case 1568:
  if (!yytrial)
{
				UpdateOrInsertNode* node = yyval.updInsNode = yyvsp[-13].updInsNode;
				node->overrideClause = yyvsp[-10].nullableOverrideClause;
				node->values = yyvsp[-7].valueListNode;
				node->plan = yyvsp[-3].planNode;
				node->order = yyvsp[-2].valueListNode;
				node->rows = yyvsp[-1].rowsClause;
				node->returning = yyvsp[0].returningClause;
			}
break;
case 1570:
yyval.nestFieldArray = yyvsp[-1].nestFieldArray;
break;
case 1572:
  if (!yytrial)
{ yyval.returningClause = NULL; }
break;
case 1573:
  if (!yytrial)
{
			yyval.returningClause = FB_NEW_POOL(getPool()) ReturningClause(getPool());
			yyval.returningClause->first = yyvsp[0].valueListNode;
		}
break;
case 1574:
  if (!yytrial)
{
			yyval.returningClause = FB_NEW_POOL(getPool()) ReturningClause(getPool());
			yyval.returningClause->first = yyvsp[-2].valueListNode;
			yyval.returningClause->second = yyvsp[0].valueListNode;
		}
break;
case 1575:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>(*yyvsp[0].metaNamePtr); }
break;
case 1576:
  if (!yytrial)
{
			AssignmentNode* node = newNode<AssignmentNode>();
			node->asgnTo = yyvsp[-2].fieldNode;
			node->asgnFrom = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 1577:
yyval.metaNamePtr = yyvsp[0].metaNamePtr;
break;
case 1578:
  if (!yytrial)
{
			yyval.compoundStmtNode = newNode<CompoundStmtNode>();
			yyval.compoundStmtNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 1579:
yyval.metaNamePtr = yyvsp[-2].metaNamePtr;
break;
case 1580:
  if (!yytrial)
{
			yyvsp[-3].compoundStmtNode->statements.add(yyvsp[0].stmtNode);
			yyval.compoundStmtNode = yyvsp[-3].compoundStmtNode;
		}
break;
case 1581:
  if (!yytrial)
{
			AssignmentNode* node = newNode<AssignmentNode>();
			node->asgnTo = yyvsp[-2].fieldNode;
			node->asgnFrom = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 1582:
  if (!yytrial)
{
			AssignmentNode* node = newNode<AssignmentNode>();
			node->asgnTo = yyvsp[-2].fieldNode;
			node->asgnFrom = newNode<DefaultNode>(*yyvsp[-3].metaNamePtr, yyvsp[-2].fieldNode->dsqlName);
			yyval.stmtNode = node;
		}
break;
case 1583:
  if (!yytrial)
{
			AssignmentNode* node = newNode<AssignmentNode>();
			node->asgnTo = NullNode::instance();
			node->asgnFrom = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 1584:
  if (!yytrial)
{
			AssignmentNode* node = newNode<AssignmentNode>();
			node->asgnTo = NullNode::instance();
			node->asgnFrom = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 1585:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1587:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-1].valueListNode; }
break;
case 1588:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].fieldNode); }
break;
case 1589:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].fieldNode); }
break;
case 1591:
yyval.nestFieldArray = yyvsp[0].nestFieldArray;
break;
case 1594:
  if (!yytrial)
{ yyvsp[-1].nestFieldArray->add(yyvsp[0].fieldNode); }
break;
case 1595:
  if (!yytrial)
{ yyvsp[-3].nestFieldArray->add(yyvsp[0].fieldNode); }
break;
case 1597:
  if (!yytrial)
{
			FieldNode* fieldNode = newNode<FieldNode>();
			fieldNode->dsqlQualifier = *yyvsp[-2].metaNamePtr;
			fieldNode->dsqlName = *yyvsp[0].metaNamePtr;
			yyval.fieldNode = fieldNode;
		}
break;
case 1598:
  if (!yytrial)
{
			FieldNode* fieldNode = newNode<FieldNode>();
			fieldNode->dsqlQualifier = *yyvsp[-2].metaNamePtr;
			fieldNode->dsqlName = *yyvsp[0].metaNamePtr;
			fieldNode->dsqlCursorField = true;
			yyval.fieldNode = fieldNode;
		}
break;
case 1599:
  if (!yytrial)
{
			FieldNode* fieldNode = newNode<FieldNode>();
			fieldNode->dsqlName = *yyvsp[0].metaNamePtr;
			yyval.fieldNode = fieldNode;
		}
break;
case 1601:
  if (!yytrial)
{
			FieldNode* fieldNode = newNode<FieldNode>();
			fieldNode->dsqlQualifier = *yyvsp[-2].metaNamePtr;
			fieldNode->dsqlName = *yyvsp[0].metaNamePtr;
			yyval.fieldNode = fieldNode;
		}
break;
case 1602:
  if (!yytrial)
{ yyval.boolExprNode = valueToBool(yyvsp[0].valueExprNode); }
break;
case 1604:
  if (!yytrial)
{ yyval.boolExprNode = newNode<BinaryBoolNode>(blr_or, valueToBool(yyvsp[-2].valueExprNode), valueToBool(yyvsp[0].valueExprNode)); }
break;
case 1605:
  if (!yytrial)
{ yyval.boolExprNode = newNode<BinaryBoolNode>(blr_and, valueToBool(yyvsp[-2].valueExprNode), valueToBool(yyvsp[0].valueExprNode)); }
break;
case 1606:
  if (!yytrial)
{ yyval.boolExprNode = newNode<NotBoolNode>(valueToBool(yyvsp[0].valueExprNode)); }
break;
case 1607:
  if (!yytrial)
{ yyval.boolExprNode = yyvsp[-1].boolExprNode; }
break;
case 1608:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_equiv, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode);
			node->dsqlCheckBoolean = true;
			yyval.boolExprNode = node;
		}
break;
case 1609:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_equiv, yyvsp[-3].valueExprNode, yyvsp[0].valueExprNode);
			node->dsqlCheckBoolean = true;
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1622:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(yyvsp[-1].blrOp, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1623:
  if (!yytrial)
{ yyval.blrOp = blr_eql; }
break;
case 1624:
  if (!yytrial)
{ yyval.blrOp = blr_lss; }
break;
case 1625:
  if (!yytrial)
{ yyval.blrOp = blr_gtr; }
break;
case 1626:
  if (!yytrial)
{ yyval.blrOp = blr_geq; }
break;
case 1627:
  if (!yytrial)
{ yyval.blrOp = blr_leq; }
break;
case 1628:
  if (!yytrial)
{ yyval.blrOp = blr_leq; }
break;
case 1629:
  if (!yytrial)
{ yyval.blrOp = blr_geq; }
break;
case 1630:
  if (!yytrial)
{ yyval.blrOp = blr_neq; }
break;
case 1631:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(yyvsp[-4].blrOp, yyvsp[-5].valueExprNode, yyvsp[-3].cmpBoolFlag, yyvsp[-1].selectExprNode); }
break;
case 1632:
  if (!yytrial)
{ yyval.cmpBoolFlag = ComparativeBoolNode::DFLAG_ANSI_ALL; }
break;
case 1633:
  if (!yytrial)
{ yyval.cmpBoolFlag = ComparativeBoolNode::DFLAG_ANSI_ANY; }
break;
case 1634:
  if (!yytrial)
{ yyval.cmpBoolFlag = ComparativeBoolNode::DFLAG_ANSI_ANY; }
break;
case 1635:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_equiv, yyvsp[-4].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1636:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_equiv, yyvsp[-5].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1637:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_between, yyvsp[-4].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode);
		}
break;
case 1638:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_between, yyvsp[-5].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1639:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(yyvsp[-1].blrOp, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1640:
  if (!yytrial)
{
			ComparativeBoolNode* cmpNode = newNode<ComparativeBoolNode>(yyvsp[-1].blrOp, yyvsp[-3].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(cmpNode);
		}
break;
case 1641:
  if (!yytrial)
{ yyval.blrOp = blr_containing; }
break;
case 1642:
  if (!yytrial)
{ yyval.blrOp = blr_starting; }
break;
case 1643:
  if (!yytrial)
{ yyval.blrOp = blr_starting; }
break;
case 1644:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_like, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1645:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_like, yyvsp[-4].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1646:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_like, yyvsp[-3].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1647:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_like, yyvsp[-5].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1648:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_similar, yyvsp[-3].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1649:
  if (!yytrial)
{ yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_similar, yyvsp[-5].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1650:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_similar, yyvsp[-4].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1651:
  if (!yytrial)
{
			ComparativeBoolNode* node = newNode<ComparativeBoolNode>(blr_similar, yyvsp[-6].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1652:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_eql, yyvsp[-2].valueExprNode,
				ComparativeBoolNode::DFLAG_ANSI_ANY, yyvsp[0].exprNode);
		}
break;
case 1653:
  if (!yytrial)
{
			const auto node = newNode<ComparativeBoolNode>(blr_eql, yyvsp[-3].valueExprNode,
				ComparativeBoolNode::DFLAG_ANSI_ANY, yyvsp[0].exprNode);
			yyval.boolExprNode = newNode<NotBoolNode>(node);
		}
break;
case 1654:
  if (!yytrial)
{ yyval.boolExprNode = newNode<RseBoolNode>(blr_any, yyvsp[-1].selectExprNode); }
break;
case 1655:
  if (!yytrial)
{ yyval.boolExprNode = newNode<RseBoolNode>(blr_unique, yyvsp[-1].selectExprNode); }
break;
case 1656:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_eql,
					newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_TRIGGER_ACTION)),
					MAKE_const_slong(1));
		}
break;
case 1657:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_eql,
					newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_TRIGGER_ACTION)),
					MAKE_const_slong(2));
		}
break;
case 1658:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_eql,
					newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_TRIGGER_ACTION)),
					MAKE_const_slong(3));
		}
break;
case 1659:
  if (!yytrial)
{
			yyval.boolExprNode = newNode<ComparativeBoolNode>(blr_eql,
					newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_SESSION_RESETTING)),
					MAKE_const_slong(1));
		}
break;
case 1660:
  if (!yytrial)
{ yyval.boolExprNode = newNode<MissingBoolNode>(yyvsp[-2].valueExprNode); }
break;
case 1661:
  if (!yytrial)
{ yyval.boolExprNode = newNode<MissingBoolNode>(yyvsp[-2].valueExprNode, true); }
break;
case 1662:
  if (!yytrial)
{ yyval.boolExprNode = newNode<NotBoolNode>(newNode<MissingBoolNode>(yyvsp[-3].valueExprNode)); }
break;
case 1663:
  if (!yytrial)
{ yyval.boolExprNode = newNode<NotBoolNode>(newNode<MissingBoolNode>(yyvsp[-3].valueExprNode, true)); }
break;
case 1664:
  if (!yytrial)
{ yyval.exprNode = yyvsp[0].selectExprNode; }
break;
case 1665:
  if (!yytrial)
{ yyval.exprNode = yyvsp[-1].valueListNode; }
break;
case 1666:
  if (!yytrial)
{ yyval.selectExprNode = yyvsp[-1].selectExprNode; }
break;
case 1667:
  if (!yytrial)
{
			yyval.createAlterUserNode = newNode<CreateAlterUserNode>(CreateAlterUserNode::USER_ADD, *yyvsp[0].metaNamePtr);
		}
break;
case 1668:
  if (!yytrial)
{
			yyval.createAlterUserNode = yyvsp[-2].createAlterUserNode;
		}
break;
case 1669:
  if (!yytrial)
{
			yyval.createAlterUserNode = newNode<CreateAlterUserNode>(CreateAlterUserNode::USER_MOD, *yyvsp[-1].metaNamePtr);
		}
break;
case 1670:
  if (!yytrial)
{
			yyval.createAlterUserNode = yyvsp[-2].createAlterUserNode;
		}
break;
case 1671:
  if (!yytrial)
{
			yyval.createAlterUserNode = newNode<CreateAlterUserNode>(CreateAlterUserNode::USER_MOD, "");
		}
break;
case 1672:
  if (!yytrial)
{
			yyval.createAlterUserNode = yyvsp[-2].createAlterUserNode;
		}
break;
case 1673:
  if (!yytrial)
{
			yyval.createAlterUserNode = newNode<CreateAlterUserNode>(CreateAlterUserNode::USER_RPL, *yyvsp[-1].metaNamePtr);
		}
break;
case 1674:
  if (!yytrial)
{
			yyval.createAlterUserNode = yyvsp[-2].createAlterUserNode;
		}
break;
case 1680:
yyval.createAlterUserNode = yyvsp[-1].createAlterUserNode;
break;
case 1682:
  if (!yytrial)
{ setClause(yyvsp[-2].createAlterUserNode->firstName, "FIRSTNAME", yyvsp[0].stringPtr); }
break;
case 1683:
  if (!yytrial)
{ setClause(yyvsp[-2].createAlterUserNode->middleName, "MIDDLENAME", yyvsp[0].stringPtr); }
break;
case 1684:
  if (!yytrial)
{ setClause(yyvsp[-2].createAlterUserNode->lastName, "LASTNAME", yyvsp[0].stringPtr); }
break;
case 1685:
  if (!yytrial)
{ setClause(yyvsp[-2].createAlterUserNode->password, "PASSWORD", yyvsp[0].stringPtr); }
break;
case 1686:
  if (!yytrial)
{ setClause(yyvsp[-3].createAlterUserNode->adminRole, "ADMIN ROLE", true); }
break;
case 1687:
  if (!yytrial)
{ setClause(yyvsp[-3].createAlterUserNode->adminRole, "ADMIN ROLE", false); }
break;
case 1688:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterUserNode->active, "ACTIVE/INACTIVE", true); }
break;
case 1689:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterUserNode->active, "ACTIVE/INACTIVE", false); }
break;
case 1691:
yyval.createAlterUserNode = yyvsp[-2].createAlterUserNode;
break;
case 1693:
  if (!yytrial)
{ setClause(yyvsp[-3].createAlterUserNode->plugin, "USING PLUGIN", yyvsp[0].metaNamePtr); }
break;
case 1696:
  if (!yytrial)
{
			yyvsp[-3].createAlterUserNode->addProperty(yyvsp[-2].metaNamePtr, yyvsp[0].stringPtr);
		}
break;
case 1697:
  if (!yytrial)
{
			yyvsp[-2].createAlterUserNode->addProperty(yyvsp[0].metaNamePtr);
		}
break;
case 1698:
yyval.mappingOp = MappingNode::MAP_ADD;
break;
case 1699:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[0].mappingNode;
				yyval.mappingNode->global = yyvsp[-2].boolVal;
			}
break;
case 1700:
yyval.mappingNode = yyvsp[0].mappingNode;
break;
case 1701:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[-2].mappingNode;
			}
break;
case 1702:
yyval.mappingOp = MappingNode::MAP_MOD;
break;
case 1703:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[0].mappingNode;
				yyval.mappingNode->global = yyvsp[-2].boolVal;
			}
break;
case 1704:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[-2].mappingNode;
			}
break;
case 1705:
yyval.mappingOp = MappingNode::MAP_RPL;
break;
case 1706:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[0].mappingNode;
				yyval.mappingNode->global = yyvsp[-2].boolVal;
			}
break;
case 1707:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[-2].mappingNode;
			}
break;
case 1708:
  if (!yytrial)
{
 			MappingNode* node = newNode<MappingNode>(MappingNode::MAP_DROP, *yyvsp[0].metaNamePtr);
			node->global = yyvsp[-1].boolVal;
			yyval.mappingNode = node;
		}
break;
case 1709:
  if (!yytrial)
{
			yyval.mappingNode = yyvsp[0].mappingNode;
		}
break;
case 1710:
  if (!yytrial)
{
			yyval.mappingNode = yyvsp[0].mappingNode;
		}
break;
case 1711:
  if (!yytrial)
{
 			yyval.mappingNode = newNode<MappingNode>(MappingNode::MAP_COMMENT, *yyvsp[-2].metaNamePtr);
			yyval.mappingNode->global = yyvsp[-3].boolVal;
			yyval.mappingNode->comment = yyvsp[0].stringPtr;
		}
break;
case 1712:
  if (!yytrial)
{
				yyval.mappingNode = newNode<MappingNode>(yyvsp[-1].mappingOp, *yyvsp[0].metaNamePtr);
			}
break;
case 1713:
yyval.mappingNode = yyvsp[-1].mappingNode;
break;
case 1714:
yyval.mappingNode = yyvsp[-4].mappingNode;
break;
case 1715:
  if (!yytrial)
{
				yyval.mappingNode = yyvsp[-6].mappingNode;
			}
break;
case 1716:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1717:
  if (!yytrial)
{
			yyvsp[-2].mappingNode->fromType = yyvsp[-1].metaNamePtr;
			yyvsp[-2].mappingNode->from = yyvsp[0].intlStringPtr;
		}
break;
case 1718:
  if (!yytrial)
{
			yyvsp[-2].mappingNode->fromType = yyvsp[0].metaNamePtr;
			yyvsp[-2].mappingNode->from = newNode<IntlString>("*");
		}
break;
case 1720:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>("USER"); }
break;
case 1721:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>("GROUP"); }
break;
case 1723:
  if (!yytrial)
{ yyval.intlStringPtr = newIntlString(yyvsp[0].metaNamePtr->c_str(), metadataCharSet->getName()); }
break;
case 1724:
  if (!yytrial)
{
			yyvsp[-3].mappingNode->mode = 'P';
			yyvsp[-3].mappingNode->plugin = yyvsp[-1].metaNamePtr;
			yyvsp[-3].mappingNode->db = yyvsp[0].metaNamePtr;
		}
break;
case 1725:
  if (!yytrial)
{
			yyvsp[-3].mappingNode->mode = 'P';
			yyvsp[-3].mappingNode->db = yyvsp[0].metaNamePtr;
		}
break;
case 1726:
  if (!yytrial)
{
			yyvsp[-3].mappingNode->mode = 'S';
		}
break;
case 1727:
  if (!yytrial)
{
			yyvsp[-2].mappingNode->mode = 'M';
			yyvsp[-2].mappingNode->db = yyvsp[0].metaNamePtr;
		}
break;
case 1728:
  if (!yytrial)
{
			yyvsp[-2].mappingNode->mode = '*';
			yyvsp[-2].mappingNode->db = yyvsp[0].metaNamePtr;
		}
break;
case 1729:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 1730:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 1731:
  if (!yytrial)
{
			yyvsp[-3].mappingNode->role = yyvsp[-1].boolVal;
			yyvsp[-3].mappingNode->to = yyvsp[0].metaNamePtr;
		}
break;
case 1732:
  if (!yytrial)
{
			yyvsp[-2].mappingNode->role = yyvsp[0].boolVal;
		}
break;
case 1733:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 1734:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 1736:
  if (!yytrial)
{ yyval.valueExprNode = newNode<BoolAsValueNode>(yyvsp[0].boolExprNode); }
break;
case 1738:
  if (!yytrial)
{ yyval.valueExprNode = newNode<BoolAsValueNode>(yyvsp[-1].boolExprNode); }
break;
case 1740:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueExprNode; }
break;
case 1744:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].fieldNode; }
break;
case 1746:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1753:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1754:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1755:
  if (!yytrial)
{ yyval.valueExprNode = newNode<NegateNode>(yyvsp[0].valueExprNode); }
break;
case 1756:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1757:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ArithmeticNode>(blr_add, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1758:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ConcatenateNode>(yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1759:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CollateNode>(yyvsp[-2].valueExprNode, *yyvsp[0].metaNamePtr); }
break;
case 1760:
  if (!yytrial)
{ yyval.valueExprNode = newNode<AtNode>(yyvsp[-2].valueExprNode, nullptr); }
break;
case 1761:
  if (!yytrial)
{ yyval.valueExprNode = newNode<AtNode>(yyvsp[-4].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1762:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ArithmeticNode>(blr_subtract, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1763:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ArithmeticNode>(blr_multiply, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1764:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ArithmeticNode>(blr_divide, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1765:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueExprNode; }
break;
case 1766:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1767:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1768:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1769:
  if (!yytrial)
{ yyval.valueExprNode = newNode<RecordKeyNode>(yyvsp[0].blrOp); }
break;
case 1770:
  if (!yytrial)
{ yyval.valueExprNode = newNode<RecordKeyNode>(yyvsp[0].blrOp, *yyvsp[-2].metaNamePtr); }
break;
case 1771:
  if (!yytrial)
{ yyval.valueExprNode = newNode<DomainValidationNode>(); }
break;
case 1772:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1773:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1774:
  if (!yytrial)
{ yyval.blrOp = blr_dbkey; }
break;
case 1775:
  if (!yytrial)
{ yyval.blrOp = blr_record_version2; }
break;
case 1776:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
						  												  Arg::Str("DATE"));
			}

			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
						  												  Arg::Str("DATE"));
			}

			yyval.valueExprNode = newNode<CurrentDateNode>();
		}
break;
case 1777:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
						  												  Arg::Str("TIME"));
			}

			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
						  												  Arg::Str("TIME"));
			}

			yyval.valueExprNode = newNode<LocalTimeNode>(yyvsp[0].uintVal);
		}
break;
case 1778:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
						  												  Arg::Str("TIME"));
			}

			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
						  												  Arg::Str("TIME"));
			}

			yyval.valueExprNode = newNode<CurrentTimeNode>(yyvsp[0].uintVal);
		}
break;
case 1779:
  if (!yytrial)
{ yyval.valueExprNode = newNode<LocalTimeStampNode>(yyvsp[0].uintVal); }
break;
case 1780:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CurrentTimeStampNode>(yyvsp[0].uintVal); }
break;
case 1781:
  if (!yytrial)
{ yyval.uintVal = DEFAULT_TIME_PRECISION; }
break;
case 1782:
  if (!yytrial)
{ yyval.uintVal = yyvsp[-1].int32Val; }
break;
case 1783:
  if (!yytrial)
{ yyval.uintVal = DEFAULT_TIMESTAMP_PRECISION; }
break;
case 1784:
  if (!yytrial)
{ yyval.uintVal = yyvsp[-1].int32Val; }
break;
case 1785:
  if (!yytrial)
{
			ArrayNode* node = newNode<ArrayNode>(yyvsp[-3].fieldNode);
			node->field->dsqlIndices = yyvsp[-1].valueListNode;
			yyval.valueExprNode = node;
		}
break;
case 1786:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(0); }
break;
case 1787:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1788:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 1789:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 1791:
  if (!yytrial)
{ yyval.valueExprNode = newNode<NegateNode>(yyvsp[0].valueExprNode); }
break;
case 1792:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_sint64(MIN_SINT64, 0); }
break;
case 1793:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_sint64(MIN_SINT64, yyvsp[0].lim64ptr->getScale()); }
break;
case 1794:
  if (!yytrial)
{ yyval.valueExprNode = newNode<NegateNode>(yyvsp[0].valueExprNode); }
break;
case 1796:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1797:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].lim64ptr->c_str(), CONSTANT_NUM128, yyvsp[0].lim64ptr->getScale()); }
break;
case 1798:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].lim64ptr->c_str(), CONSTANT_NUM128); }
break;
case 1800:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].lim64ptr->c_str(), CONSTANT_NUM128, yyvsp[0].lim64ptr->getScale()); }
break;
case 1801:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(yyvsp[0].int32Val); }
break;
case 1802:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].stringPtr->c_str(), CONSTANT_DOUBLE); }
break;
case 1803:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].stringPtr->c_str(), CONSTANT_DECIMAL); }
break;
case 1804:
  if (!yytrial)
{
			SINT64 signedNumber = (SINT64) yyvsp[0].scaledNumber.number;

			if (yyvsp[0].scaledNumber.hex && signedNumber < 0)
				yyval.valueExprNode = newNode<NegateNode>(MAKE_const_sint64(-signedNumber, yyvsp[0].scaledNumber.scale));
			else
				yyval.valueExprNode = MAKE_const_sint64(signedNumber, yyvsp[0].scaledNumber.scale);
		}
break;
case 1805:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_sint64((SINT64) yyvsp[0].scaledNumber.number, yyvsp[0].scaledNumber.scale); }
break;
case 1807:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(yyvsp[0].intlStringPtr, lex.charSetId); }
break;
case 1808:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
						  												  Arg::Str("DATE"));
			}
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
						  												  Arg::Str("DATE"));
			}
			yyval.valueExprNode = MAKE_constant(yyvsp[0].intlStringPtr->getString().c_str(), CONSTANT_DATE);
		}
break;
case 1809:
  if (!yytrial)
{
			if (client_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_dialect_datatype_unsupport) << Arg::Num(client_dialect) <<
						  												  Arg::Str("TIME"));
			}
			if (db_dialect < SQL_DIALECT_V6_TRANSITION)
			{
				ERRD_post(Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
						  Arg::Gds(isc_sql_db_dialect_dtype_unsupport) << Arg::Num(db_dialect) <<
						  												  Arg::Str("TIME"));
			}
			yyval.valueExprNode = MAKE_constant(yyvsp[0].intlStringPtr->getString().c_str(), CONSTANT_TIME);
		}
break;
case 1810:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant(yyvsp[0].intlStringPtr->getString().c_str(), CONSTANT_TIMESTAMP); }
break;
case 1811:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant("", CONSTANT_BOOLEAN); }
break;
case 1812:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_constant("1", CONSTANT_BOOLEAN); }
break;
case 1813:
  if (!yytrial)
{ yyval.valueExprNode = make_parameter(); }
break;
case 1814:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CurrentUserNode>(); }
break;
case 1815:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CurrentUserNode>(); }
break;
case 1816:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CurrentRoleNode>(); }
break;
case 1817:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_CONNECTION_ID)); }
break;
case 1818:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_TRANSACTION_ID)); }
break;
case 1819:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_GDSCODE)); }
break;
case 1820:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_SQLCODE)); }
break;
case 1821:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_SQLSTATE)); }
break;
case 1822:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(INFO_TYPE_ROWS_AFFECTED)); }
break;
case 1823:
  if (!yytrial)
{ yyval.valueExprNode = newNode<InternalInfoNode>(MAKE_const_slong(yyvsp[-1].int32Val)); }
break;
case 1824:
  if (!yytrial)
{ yyval.int32Val = INFO_TYPE_GDSCODE; }
break;
case 1825:
  if (!yytrial)
{ yyval.int32Val = INFO_TYPE_SQLCODE; }
break;
case 1826:
  if (!yytrial)
{ yyval.int32Val = INFO_TYPE_SQLSTATE; }
break;
case 1827:
  if (!yytrial)
{ yyval.int32Val = INFO_TYPE_EXCEPTION; }
break;
case 1828:
  if (!yytrial)
{ yyval.int32Val = INFO_TYPE_ERROR_MSG; }
break;
case 1830:
{
				/* feedback for lexer*/
				introducerCharSetName = yyvsp[0].metaNamePtr;
			}
break;
case 1831:
{ introducerCharSetName = nullptr; }
  if (!yytrial)
{
			yyval.intlStringPtr = yyvsp[0].intlStringPtr;
			yyval.intlStringPtr->setCharSet(*yyvsp[-2].metaNamePtr);

			StrMark* mark = strMarks.get(yyvsp[0].intlStringPtr);

			if (mark)	/* hex string is not in strMarks*/
				mark->introduced = true;
		}
break;
case 1832:
  if (!yytrial)
{ yyval.stringPtr = newString(yyvsp[0].intlStringPtr->toUtf8(scratch->getTransaction())); }
break;
case 1834:
  if (!yytrial)
{ yyval.int32Val = -yyvsp[0].int32Val; }
break;
case 1835:
  if (!yytrial)
{
			if (yyvsp[0].int32Val > SHRT_POS_MAX)
				yyabandon(YYPOSNARG(1), -842, isc_expec_short);	/* Short integer expected*/

			yyval.int32Val = yyvsp[0].int32Val;
		}
break;
case 1836:
  if (!yytrial)
{
			if (yyvsp[0].int32Val > SHRT_NEG_MAX)
				yyabandon(YYPOSNARG(1), -842, isc_expec_short);	/* Short integer expected*/

			yyval.int32Val = yyvsp[0].int32Val;
		}
break;
case 1837:
  if (!yytrial)
{
			if (yyvsp[0].int32Val == 0)
				yyabandon(YYPOSNARG(1), -842, isc_expec_positive);	/* Positive number expected*/

			yyval.int32Val = yyvsp[0].int32Val;
		}
break;
case 1838:
  if (!yytrial)
{
			if (yyvsp[0].int32Val > SHRT_UNSIGNED_MAX)
				yyabandon(YYPOSNARG(1), -842, isc_expec_ushort);	/* Unsigned short integer expected*/

			yyval.int32Val = yyvsp[0].int32Val;
		}
break;
case 1840:
  if (!yytrial)
{ yyval.int32Val = -yyvsp[0].int32Val; }
break;
case 1841:
  if (!yytrial)
{ yyval.int32Val = yyvsp[0].int32Val;}
break;
case 1842:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].aggNode; }
break;
case 1849:
  if (!yytrial)
{
			yyval.aggNode = yyvsp[-5].aggNode;

			if (yyval.aggNode->aggInfo.blr == blr_agg_count2 && !yyval.aggNode->arg)	/* count(*)*/
				yyval.aggNode->arg = newNode<ValueIfNode>(yyvsp[-1].boolExprNode, MAKE_const_slong(1), NullNode::instance());
			else
			{
				fb_assert(yyval.aggNode->arg);
				yyval.aggNode->arg = newNode<ValueIfNode>(yyvsp[-1].boolExprNode, yyval.aggNode->arg, NullNode::instance());
			}
		}
break;
case 1850:
  if (!yytrial)
{ yyval.aggNode = newNode<CountAggNode>(false, (client_dialect < SQL_DIALECT_V6_TRANSITION)); }
break;
case 1851:
  if (!yytrial)
{ yyval.aggNode = newNode<CountAggNode>(false, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode); }
break;
case 1852:
  if (!yytrial)
{ yyval.aggNode = newNode<CountAggNode>(true, (client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode); }
break;
case 1853:
  if (!yytrial)
{
			yyval.aggNode = newNode<SumAggNode>(false,
				(client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode);
		}
break;
case 1854:
  if (!yytrial)
{
			yyval.aggNode = newNode<SumAggNode>(true,
				(client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode);
		}
break;
case 1855:
  if (!yytrial)
{
			yyval.aggNode = newNode<AvgAggNode>(false,
				(client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode);
		}
break;
case 1856:
  if (!yytrial)
{
			yyval.aggNode = newNode<AvgAggNode>(true,
				(client_dialect < SQL_DIALECT_V6_TRANSITION), yyvsp[-1].valueExprNode);
		}
break;
case 1857:
  if (!yytrial)
{ yyval.aggNode = newNode<MaxMinAggNode>(MaxMinAggNode::TYPE_MIN, yyvsp[-1].valueExprNode); }
break;
case 1858:
  if (!yytrial)
{ yyval.aggNode = newNode<MaxMinAggNode>(MaxMinAggNode::TYPE_MIN, yyvsp[-1].valueExprNode); }
break;
case 1859:
  if (!yytrial)
{ yyval.aggNode = newNode<MaxMinAggNode>(MaxMinAggNode::TYPE_MAX, yyvsp[-1].valueExprNode); }
break;
case 1860:
  if (!yytrial)
{ yyval.aggNode = newNode<MaxMinAggNode>(MaxMinAggNode::TYPE_MAX, yyvsp[-1].valueExprNode); }
break;
case 1861:
  if (!yytrial)
{ yyval.aggNode = newNode<ListAggNode>(false, yyvsp[-2].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1862:
  if (!yytrial)
{ yyval.aggNode = newNode<ListAggNode>(true, yyvsp[-2].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1863:
  if (!yytrial)
{ yyval.aggNode = newNode<StdDevAggNode>(StdDevAggNode::TYPE_STDDEV_SAMP, yyvsp[-1].valueExprNode); }
break;
case 1864:
  if (!yytrial)
{ yyval.aggNode = newNode<StdDevAggNode>(StdDevAggNode::TYPE_STDDEV_POP, yyvsp[-1].valueExprNode); }
break;
case 1865:
  if (!yytrial)
{ yyval.aggNode = newNode<StdDevAggNode>(StdDevAggNode::TYPE_VAR_SAMP, yyvsp[-1].valueExprNode); }
break;
case 1866:
  if (!yytrial)
{ yyval.aggNode = newNode<StdDevAggNode>(StdDevAggNode::TYPE_VAR_POP, yyvsp[-1].valueExprNode); }
break;
case 1867:
  if (!yytrial)
{ yyval.aggNode = newNode<CorrAggNode>(CorrAggNode::TYPE_COVAR_SAMP, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1868:
  if (!yytrial)
{ yyval.aggNode = newNode<CorrAggNode>(CorrAggNode::TYPE_COVAR_POP, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1869:
  if (!yytrial)
{ yyval.aggNode = newNode<CorrAggNode>(CorrAggNode::TYPE_CORR, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1870:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_AVGX, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1871:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_AVGY, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1872:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrCountAggNode>(yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1873:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_INTERCEPT, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1874:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_R2, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1875:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_SLOPE, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1876:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_SXX, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1877:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_SXY, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1878:
  if (!yytrial)
{ yyval.aggNode = newNode<RegrAggNode>(RegrAggNode::TYPE_REGR_SYY, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1879:
  if (!yytrial)
{ yyval.aggNode = newNode<AnyValueAggNode>(yyvsp[-1].valueExprNode); }
break;
case 1880:
  if (!yytrial)
{ yyval.aggNode = newNode<DenseRankWinNode>(); }
break;
case 1881:
  if (!yytrial)
{ yyval.aggNode = newNode<RankWinNode>(); }
break;
case 1882:
  if (!yytrial)
{ yyval.aggNode = newNode<PercentRankWinNode>(); }
break;
case 1883:
  if (!yytrial)
{ yyval.aggNode = newNode<CumeDistWinNode>(); }
break;
case 1884:
  if (!yytrial)
{ yyval.aggNode = newNode<RowNumberWinNode>(); }
break;
case 1885:
  if (!yytrial)
{ yyval.aggNode = newNode<FirstValueWinNode>(yyvsp[-1].valueExprNode); }
break;
case 1886:
  if (!yytrial)
{ yyval.aggNode = newNode<LastValueWinNode>(yyvsp[-1].valueExprNode); }
break;
case 1887:
  if (!yytrial)
{ yyval.aggNode = newNode<NthValueWinNode>(yyvsp[-4].valueExprNode, yyvsp[-2].valueExprNode, yyvsp[0].valueExprNode); }
break;
case 1888:
  if (!yytrial)
{ yyval.aggNode = newNode<LagWinNode>(yyvsp[-5].valueExprNode, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1889:
  if (!yytrial)
{ yyval.aggNode = newNode<LagWinNode>(yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode, NullNode::instance()); }
break;
case 1890:
  if (!yytrial)
{ yyval.aggNode = newNode<LagWinNode>(yyvsp[-1].valueExprNode, MAKE_const_slong(1), NullNode::instance()); }
break;
case 1891:
  if (!yytrial)
{ yyval.aggNode = newNode<LeadWinNode>(yyvsp[-5].valueExprNode, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 1892:
  if (!yytrial)
{ yyval.aggNode = newNode<LeadWinNode>(yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode, NullNode::instance()); }
break;
case 1893:
  if (!yytrial)
{ yyval.aggNode = newNode<LeadWinNode>(yyvsp[-1].valueExprNode, MAKE_const_slong(1), NullNode::instance()); }
break;
case 1894:
  if (!yytrial)
{ yyval.aggNode = newNode<NTileWinNode>(yyvsp[-1].valueExprNode); }
break;
case 1895:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(NthValueWinNode::FROM_FIRST); }
break;
case 1896:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(NthValueWinNode::FROM_FIRST); }
break;
case 1897:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(NthValueWinNode::FROM_LAST); }
break;
case 1903:
  if (!yytrial)
{ yyval.valueExprNode = newNode<OverNode>(yyvsp[-2].aggNode, yyvsp[0].metaNamePtr); }
break;
case 1904:
  if (!yytrial)
{ yyval.valueExprNode = newNode<OverNode>(yyvsp[-4].aggNode, yyvsp[-1].windowClause); }
break;
case 1905:
  if (!yytrial)
{
			yyval.windowClause = newNode<WindowClause>(yyvsp[-4].metaNamePtr, yyvsp[-3].valueListNode, yyvsp[-2].valueListNode, yyvsp[-1].windowClauseFrameExtent, yyvsp[0].windowClauseExclusion);
		}
break;
case 1906:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 1907:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 1908:
  if (!yytrial)
{ yyval.windowClauseFrameExtent = NULL; }
break;
case 1909:
  if (!yytrial)
{ yyval.windowClauseFrameExtent = newNode<WindowClause::FrameExtent>(WindowClause::FrameExtent::Unit::RANGE); }
break;
case 1910:
yyval.windowClauseFrameExtent = yyvsp[0].windowClauseFrameExtent;
break;
case 1911:
  if (!yytrial)
{ yyval.windowClauseFrameExtent = yyvsp[-2].windowClauseFrameExtent; }
break;
case 1912:
  if (!yytrial)
{ yyval.windowClauseFrameExtent = newNode<WindowClause::FrameExtent>(WindowClause::FrameExtent::Unit::ROWS); }
break;
case 1913:
  if (!yytrial)
{ yyval.windowClauseFrameExtent = yyvsp[-2].windowClauseFrameExtent; }
break;
case 1914:
  if (!yytrial)
{
			yyvsp[-1].windowClauseFrameExtent->frame1 = yyvsp[0].windowClauseFrame;
			yyvsp[-1].windowClauseFrameExtent->frame2 =
				newNode<WindowClause::Frame>(WindowClause::Frame::Bound::CURRENT_ROW);
		}
break;
case 1915:
  if (!yytrial)
{
			yyvsp[-4].windowClauseFrameExtent->frame1 = yyvsp[-2].windowClauseFrame;
			yyvsp[-4].windowClauseFrameExtent->frame2 = yyvsp[0].windowClauseFrame;
		}
break;
case 1916:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::PRECEDING); }
break;
case 1917:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::CURRENT_ROW); }
break;
case 1918:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::PRECEDING, yyvsp[-1].valueExprNode); }
break;
case 1919:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::PRECEDING); }
break;
case 1920:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::CURRENT_ROW); }
break;
case 1921:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::PRECEDING, yyvsp[-1].valueExprNode); }
break;
case 1922:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::FOLLOWING, yyvsp[-1].valueExprNode); }
break;
case 1923:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::FOLLOWING); }
break;
case 1924:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::CURRENT_ROW); }
break;
case 1925:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::PRECEDING, yyvsp[-1].valueExprNode); }
break;
case 1926:
  if (!yytrial)
{ yyval.windowClauseFrame = newNode<WindowClause::Frame>(WindowClause::Frame::Bound::FOLLOWING, yyvsp[-1].valueExprNode); }
break;
case 1927:
  if (!yytrial)
{ yyval.windowClauseExclusion = WindowClause::Exclusion::NO_OTHERS; }
break;
case 1928:
  if (!yytrial)
{ yyval.windowClauseExclusion = WindowClause::Exclusion::NO_OTHERS; }
break;
case 1929:
  if (!yytrial)
{ yyval.windowClauseExclusion = WindowClause::Exclusion::CURRENT_ROW; }
break;
case 1930:
  if (!yytrial)
{ yyval.windowClauseExclusion = WindowClause::Exclusion::GROUP; }
break;
case 1931:
  if (!yytrial)
{ yyval.windowClauseExclusion = WindowClause::Exclusion::TIES; }
break;
case 1932:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(newIntlString(","), lex.charSetId); }
break;
case 1933:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 1936:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ExtractNode>(yyvsp[-3].blrOp, yyvsp[-1].valueExprNode); }
break;
case 1940:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrLenNode>(blr_strlen_bit, yyvsp[-1].valueExprNode); }
break;
case 1941:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrLenNode>(blr_strlen_char, yyvsp[-1].valueExprNode); }
break;
case 1942:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrLenNode>(blr_strlen_char, yyvsp[-1].valueExprNode); }
break;
case 1943:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrLenNode>(blr_strlen_octet, yyvsp[-1].valueExprNode); }
break;
case 1944:
  if (!yytrial)
{ yyval.valueExprNode = newNode<SysFuncCallNode>(*yyvsp[-3].metaNamePtr, yyvsp[-1].valueListNode); }
break;
case 1945:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].sysFuncCallNode; }
break;
case 2012:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-6].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-4].valueExprNode)->add(MAKE_const_slong(yyvsp[-3].blrOp))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2013:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-7].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-3].valueExprNode)->add(MAKE_const_slong(yyvsp[-5].blrOp))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2014:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-7].metaNamePtr,
				newNode<ValueListNode>(MAKE_const_slong(yyvsp[-5].blrOp))->add(yyvsp[-3].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2015:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-7].metaNamePtr,
				newNode<ValueListNode>(MAKE_const_slong(yyvsp[-5].blrOp))->add(yyvsp[-3].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2016:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-11].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-9].valueExprNode)->add(MAKE_str_constant(newIntlString(yyvsp[-7].metaNamePtr->c_str()), CS_ASCII))->
					add(MAKE_str_constant(newIntlString(yyvsp[-6].metaNamePtr->c_str()), CS_ASCII))->add(yyvsp[-4].valueExprNode)->add(yyvsp[-3].valueExprNode)->
					add(MAKE_str_constant(newIntlString(yyvsp[-2].metaNamePtr->c_str()), CS_ASCII))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2017:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-5].metaNamePtr,
				newNode<ValueListNode>(MAKE_const_slong(yyvsp[-3].blrOp))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2018:
  if (!yytrial)
{ yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-3].metaNamePtr, newNode<ValueListNode>(yyvsp[-1].valueExprNode)); }
break;
case 2019:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-5].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-3].valueExprNode)->add(MAKE_str_constant(newIntlString(yyvsp[-1].metaNamePtr->c_str()), CS_ASCII)));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2020:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-5].metaNamePtr,
				newNode<ValueListNode>(MAKE_const_slong(yyvsp[-3].blrOp))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2021:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-9].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-7].valueExprNode)->add(yyvsp[-5].valueExprNode)->add(yyvsp[-3].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2022:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-7].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-5].valueExprNode)->add(yyvsp[-3].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2023:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-5].metaNamePtr, newNode<ValueListNode>(yyvsp[-3].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2024:
  if (!yytrial)
{ yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-3].metaNamePtr, yyvsp[-1].valueListNode); }
break;
case 2025:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-8].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-6].valueExprNode)->add(yyvsp[-4].valueExprNode)->add(yyvsp[-3].valueExprNode)->
					add(MAKE_str_constant(newIntlString(yyvsp[-2].metaNamePtr->c_str()), CS_ASCII))->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2026:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-8].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-6].valueExprNode)->add(yyvsp[-4].valueExprNode)->
					add(MAKE_str_constant(newIntlString(yyvsp[-3].metaNamePtr->c_str()), CS_ASCII))->add(yyvsp[-2].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2027:
  if (!yytrial)
{
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-10].metaNamePtr,
				newNode<ValueListNode>(yyvsp[-8].valueExprNode)->add(yyvsp[-6].valueExprNode)->add(yyvsp[-4].valueExprNode)->
					add(MAKE_str_constant(newIntlString(yyvsp[-3].metaNamePtr->c_str()), CS_ASCII))->add(yyvsp[-2].valueExprNode)->add(yyvsp[-1].valueExprNode));
			yyval.sysFuncCallNode->dsqlSpecialSyntax = true;
		}
break;
case 2028:
  if (!yytrial)
{
			ValueExprNode* v = MAKE_system_privilege(yyvsp[-1].metaNamePtr->c_str());
			yyval.sysFuncCallNode = newNode<SysFuncCallNode>(*yyvsp[-3].metaNamePtr, newNode<ValueListNode>(v));
		}
break;
case 2033:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(newIntlString(""), CS_ASCII); }
break;
case 2034:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2035:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(0); }
break;
case 2036:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_const_slong(1); }
break;
case 2037:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>(""); }
break;
case 2038:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 2039:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(newIntlString(""), CS_ASCII); }
break;
case 2040:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2041:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>(""); }
break;
case 2042:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 2043:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(newIntlString(""), CS_ASCII); }
break;
case 2044:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2045:
  if (!yytrial)
{ yyval.metaNamePtr = newNode<MetaName>(""); }
break;
case 2046:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 2049:
  if (!yytrial)
{ yyval.valueExprNode = MAKE_str_constant(newIntlString(""), CS_ASCII); }
break;
case 2050:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2055:
  if (!yytrial)
{ yyval.blrOp = blr_extract_year; }
break;
case 2056:
  if (!yytrial)
{ yyval.blrOp = blr_extract_quarter; }
break;
case 2057:
  if (!yytrial)
{ yyval.blrOp = blr_extract_month; }
break;
case 2058:
  if (!yytrial)
{ yyval.blrOp = blr_extract_week; }
break;
case 2064:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrCaseNode>(blr_upcase, yyvsp[-1].valueExprNode); }
break;
case 2065:
  if (!yytrial)
{ yyval.valueExprNode = newNode<StrCaseNode>(blr_lowcase, yyvsp[-1].valueExprNode); }
break;
case 2066:
  if (!yytrial)
{
			/* SQL spec requires numbering to start with 1,*/
			/* hence we decrement the first parameter to make it*/
			/* compatible with the engine's implementation*/
			ArithmeticNode* subtractNode = newNode<ArithmeticNode>(
				blr_subtract, true, yyvsp[-2].valueExprNode, MAKE_const_slong(1));

			yyval.valueExprNode = newNode<SubstringNode>(yyvsp[-4].valueExprNode, subtractNode, yyvsp[-1].valueExprNode);
		}
break;
case 2067:
  if (!yytrial)
{ yyval.valueExprNode = newNode<SubstringSimilarNode>(yyvsp[-5].valueExprNode, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 2068:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 2069:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2070:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(yyvsp[-4].blrOp, blr_trim_characters, yyvsp[-1].valueExprNode, yyvsp[-3].valueExprNode); }
break;
case 2071:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_both, blr_trim_characters, yyvsp[-1].valueExprNode, yyvsp[-3].valueExprNode); }
break;
case 2072:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(yyvsp[-3].blrOp, blr_trim_spaces, yyvsp[-1].valueExprNode); }
break;
case 2073:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_both, blr_trim_spaces, yyvsp[-1].valueExprNode); }
break;
case 2074:
  if (!yytrial)
{ yyval.blrOp = blr_trim_both; }
break;
case 2075:
  if (!yytrial)
{ yyval.blrOp = blr_trim_trailing; }
break;
case 2076:
  if (!yytrial)
{ yyval.blrOp = blr_trim_leading; }
break;
case 2077:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_both, blr_trim_multi_characters, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 2078:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_both, blr_trim_spaces, yyvsp[-1].valueExprNode); }
break;
case 2079:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_leading, blr_trim_multi_characters, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 2080:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_leading, blr_trim_spaces, yyvsp[-1].valueExprNode); }
break;
case 2081:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_trailing, blr_trim_multi_characters, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 2082:
  if (!yytrial)
{ yyval.valueExprNode = newNode<TrimNode>(blr_trim_trailing, blr_trim_spaces, yyvsp[-1].valueExprNode); }
break;
case 2083:
  if (!yytrial)
{ yyval.valueExprNode = newNode<UdfCallNode>(QualifiedName(*yyvsp[-3].metaNamePtr, ""), yyvsp[-1].namedArguments->second, yyvsp[-1].namedArguments->first); }
break;
case 2084:
  if (!yytrial)
{ yyval.valueExprNode = newNode<UdfCallNode>(QualifiedName(*yyvsp[-3].metaNamePtr, *yyvsp[-5].metaNamePtr), yyvsp[-1].namedArguments->second, yyvsp[-1].namedArguments->first); }
break;
case 2085:
  if (!yytrial)
{
			yyval.namedArguments = newNode<NonPooledPair<ObjectsArray<MetaName>*, ValueListNode*>>();
			yyval.namedArguments->second = newNode<ValueListNode>();
		}
break;
case 2088:
  if (!yytrial)
{
			yyval.namedArguments = newNode<NonPooledPair<ObjectsArray<MetaName>*, ValueListNode*>>();
			yyval.namedArguments->second = yyvsp[0].valueListNode;
		}
break;
case 2089:
  if (!yytrial)
{
			yyval.namedArguments = yyvsp[0].namedArguments;

			for (auto item : yyval.namedArguments->second->items)
				yyvsp[-2].valueListNode->add(item);

			delete yyval.namedArguments->second;
			yyval.namedArguments->second = yyvsp[-2].valueListNode;
		}
break;
case 2090:
  if (!yytrial)
{
			yyval.namedArguments = newNode<NonPooledPair<ObjectsArray<MetaName>*, ValueListNode*>>();
			yyval.namedArguments->first = newNode<ObjectsArray<MetaName>>();
			yyval.namedArguments->first->add(*yyvsp[0].namedArgument->first);
			yyval.namedArguments->second = newNode<ValueListNode>();
			yyval.namedArguments->second->add(yyvsp[0].namedArgument->second);
		}
break;
case 2091:
  if (!yytrial)
{
			yyval.namedArguments = yyvsp[-2].namedArguments;
			yyval.namedArguments->first->add(*yyvsp[0].namedArgument->first);
			yyval.namedArguments->second->add(yyvsp[0].namedArgument->second);
		}
break;
case 2092:
  if (!yytrial)
{ yyval.namedArgument = newNode<NonPooledPair<MetaName*, ValueExprNode*>>(yyvsp[-2].metaNamePtr, yyvsp[0].valueExprNode); }
break;
case 2093:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CastNode>(yyvsp[-3].valueExprNode, yyvsp[-1].legacyField); }
break;
case 2094:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CastNode>(yyvsp[-5].valueExprNode, yyvsp[-3].legacyField, *yyvsp[-1].stringPtr); }
break;
case 2096:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			stmt_ambiguous = true;

			if (client_dialect <= SQL_DIALECT_V5)
			{
				/* Post warning saying that DATE is equivalent to TIMESTAMP*/
				ERRD_post_warning(Arg::Warning(isc_sqlwarn) << Arg::Num(301) <<
								  Arg::Warning(isc_dtype_renamed));
				yyval.legacyField->dtype = dtype_timestamp;
				yyval.legacyField->length = sizeof(GDS_TIMESTAMP);
			}
			else if (client_dialect == SQL_DIALECT_V6_TRANSITION)
				yyabandon(YYPOSNARG(1), -104, isc_transitional_date);
			else
			{
				yyval.legacyField->dtype = dtype_sql_date;
				yyval.legacyField->length = sizeof(ULONG);
			}
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 2097:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();

			checkTimeDialect();
			yyval.legacyField->dtype = dtype_sql_time;
			yyval.legacyField->length = sizeof(SLONG);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 2098:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();

			checkTimeDialect();
			yyval.legacyField->dtype = dtype_sql_time_tz;
			yyval.legacyField->length = sizeof(ISC_TIME_TZ);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 2099:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_timestamp;
			yyval.legacyField->length = sizeof(GDS_TIMESTAMP);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 2100:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_timestamp_tz;
			yyval.legacyField->length = sizeof(ISC_TIMESTAMP_TZ);
			yyval.legacyField->flags |= FLD_has_prec;
		}
break;
case 2105:
  if (!yytrial)
{
			ComparativeBoolNode* condition = newNode<ComparativeBoolNode>(blr_eql, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode);
			yyval.valueExprNode = newNode<ValueIfNode>(condition, NullNode::instance(), yyvsp[-3].valueExprNode);
		}
break;
case 2106:
  if (!yytrial)
{ yyval.valueExprNode = newNode<ValueIfNode>(yyvsp[-5].boolExprNode, yyvsp[-3].valueExprNode, yyvsp[-1].valueExprNode); }
break;
case 2107:
  if (!yytrial)
{ yyval.valueExprNode = newNode<CoalesceNode>(yyvsp[-1].valueListNode->addFront(yyvsp[-3].valueExprNode)); }
break;
case 2108:
  if (!yytrial)
{
			ValueListNode* list = yyvsp[-1].valueListNode;
			ValueListNode* conditions = newNode<ValueListNode>(list->items.getCount() / 2);
			ValueListNode* values = newNode<ValueListNode>(list->items.getCount() / 2);

			for (FB_SIZE_T i = 0; i < list->items.getCount(); i += 2)
			{
				conditions->items[i / 2] = list->items[i];
				values->items[i / 2] = list->items[i + 1];
			}

			yyval.valueExprNode = newNode<DecodeNode>(yyvsp[-3].valueExprNode, conditions, values);
		}
break;
case 2109:
  if (!yytrial)
{
			ValueListNode* list = yyvsp[-3].valueListNode;
			ValueListNode* conditions = newNode<ValueListNode>(list->items.getCount() / 2);
			ValueListNode* values = newNode<ValueListNode>(list->items.getCount() / 2 + 1);

			for (FB_SIZE_T i = 0; i < list->items.getCount(); i += 2)
			{
				conditions->items[i / 2] = list->items[i];
				values->items[i / 2] = list->items[i + 1];
			}

			values->items[list->items.getCount() / 2] = yyvsp[-1].valueExprNode;

			yyval.valueExprNode = newNode<DecodeNode>(yyvsp[-5].valueExprNode, conditions, values);
		}
break;
case 2110:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].decodeNode; }
break;
case 2111:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2112:
  if (!yytrial)
{ yyval.decodeNode = newNode<DecodeNode>(yyvsp[0].valueExprNode, newNode<ValueListNode>(0u), newNode<ValueListNode>(0u)); }
break;
case 2113:
yyval.valueListNode = NOTRIAL(yyvsp[0].decodeNode->conditions);
break;
case 2114:
yyval.valueListNode =  NOTRIAL(yyvsp[-1].decodeNode->values);
break;
case 2115:
  if (!yytrial)
{
				DecodeNode* node = yyval.decodeNode = yyvsp[-5].decodeNode;
				node->label = "CASE";
				if (yyvsp[-1].valueExprNode)
					node->values->add(yyvsp[-1].valueExprNode);
			}
break;
case 2116:
  if (!yytrial)
{
			yyvsp[-5].valueListNode->add(yyvsp[-2].valueExprNode);
			yyvsp[-4].valueListNode->add(yyvsp[0].valueExprNode);
		}
break;
case 2117:
  if (!yytrial)
{
			yyvsp[-6].valueListNode->add(yyvsp[-2].valueExprNode);
			yyvsp[-5].valueListNode->add(yyvsp[0].valueExprNode);
		}
break;
case 2118:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 2119:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 2120:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[-1].valueIfNode; }
break;
case 2121:
  if (!yytrial)
{
			ValueIfNode* last = yyvsp[-3].valueIfNode;
			ValueIfNode* next;

			while ((next = nodeAs<ValueIfNode>(last->falseValue)))
				last = next;

			fb_assert(nodeIs<NullNode>(last->falseValue));

			last->falseValue = yyvsp[-1].valueExprNode;
			yyval.valueExprNode = yyvsp[-3].valueIfNode;
		}
break;
case 2122:
  if (!yytrial)
{ yyval.valueIfNode = newNode<ValueIf