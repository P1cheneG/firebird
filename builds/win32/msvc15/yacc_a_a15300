case 1:
  if (!yytrial)
{
			if (requireSemicolon)
				yyerrorIncompleteCmd(YYPOSNARG(1));

			parsedStatement = yyvsp[0].dsqlStatement;
		}
break;
case 2:
  if (!yytrial)
{ parsedStatement = yyvsp[-1].dsqlStatement; }
break;
case 3:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlDmlStatement(*statementPool, scratch->getAttachment(), yyvsp[0].stmtNode); }
break;
case 4:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlDdlStatement(*statementPool, scratch->getAttachment(), yyvsp[0].ddlNode); }
break;
case 5:
  if (!yytrial)
{ yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlTransactionStatement(*statementPool, scratch->getAttachment(), yyvsp[0].traNode); }
break;
case 6:
  if (!yytrial)
{
			yyval.dsqlStatement = FB_NEW_POOL(*statementPool) DsqlSessionManagementStatement(
				*statementPool, scratch->getAttachment(), yyvsp[0].mngNode);
		}
break;
case 7:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 8:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].storeNode; }
break;
case 9:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].mergeNode; }
break;
case 10:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 11:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 12:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execBlockNode; }
break;
case 13:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].selectNode; }
break;
case 14:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 15:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].updInsNode; }
break;
case 16:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 17:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 18:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 19:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 20:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 21:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 22:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].grantRevokeNode; }
break;
case 23:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 24:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].grantRevokeNode; }
break;
case 25:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 26:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].setTransactionNode; }
break;
case 27:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 28:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 29:
  if (!yytrial)
{ yyval.traNode = yyvsp[0].traNode; }
break;
case 30:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 31:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setDecFloatRoundNode; }
break;
case 32:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setDecFloatTrapsNode; }
break;
case 33:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setSessionNode; }
break;
case 34:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setRoleNode; }
break;
case 35:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].sessionResetNode; }
break;
case 36:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 37:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].setBindNode; }
break;
case 38:
  if (!yytrial)
{ yyval.mngNode = yyvsp[0].mngNode; }
break;
case 39:
  if (!yytrial)
{ yyval.grantRevokeNode = newNode<GrantRevokeNode>(true); }
break;
case 40:
yyval.grantRevokeNode = yyvsp[0].grantRevokeNode;
break;
case 41:
  if (!yytrial)
{ yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode; }
break;
case 42:
yyval.privilegeArray = NOTRIAL(&yyvsp[0].grantRevokeNode->privileges);
break;
case 43:
yyval.granteeArray = NOTRIAL(&yyvsp[-6].grantRevokeNode->users);
break;
case 44:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_relation, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 45:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_procedure, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 46:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_udf, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 47:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_package_header, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 48:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_exception, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 49:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 50:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-5].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 51:
yyval.granteeArray = NOTRIAL(&yyvsp[-4].grantRevokeNode->users);
break;
case 52:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = yyvsp[-5].granteeClause;
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 53:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = newNode<GranteeClause>(obj_database, getSecurityClassName(obj_database));
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 54:
yyval.grantRevokeNode = NOTRIAL(yyvsp[0].grantRevokeNode);
break;
case 55:
yyval.granteeArray = NOTRIAL(&yyvsp[-3].grantRevokeNode->users);
break;
case 56:
  if (!yytrial)
{
			yyvsp[-7].grantRevokeNode->grantAdminOption = yyvsp[-1].boolVal;
			yyvsp[-7].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 57:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_relations, getSecurityClassName(obj_relations)); }
break;
case 58:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_views, getSecurityClassName(obj_views)); }
break;
case 59:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_procedures, getSecurityClassName(obj_procedures)); }
break;
case 60:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_functions, getSecurityClassName(obj_functions)); }
break;
case 61:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_packages, getSecurityClassName(obj_packages)); }
break;
case 62:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_generators, getSecurityClassName(obj_generators)); }
break;
case 63:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_generators, getSecurityClassName(obj_generators)); }
break;
case 64:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_domains, getSecurityClassName(obj_domains)); }
break;
case 65:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_exceptions, getSecurityClassName(obj_exceptions)); }
break;
case 66:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_roles, getSecurityClassName(obj_roles)); }
break;
case 67:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_charsets, getSecurityClassName(obj_charsets)); }
break;
case 68:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_collations, getSecurityClassName(obj_collations)); }
break;
case 69:
  if (!yytrial)
{ yyval.granteeClause = newNode<GranteeClause>(obj_filters, getSecurityClassName(obj_filters)); }
break;
case 72:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('A', NULL)); }
break;
case 73:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('A', NULL)); }
break;
case 74:
yyval.privilegeArray = yyvsp[0].privilegeArray;
break;
case 77:
yyval.privilegeArray = yyvsp[-2].privilegeArray;
break;
case 79:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('X', NULL)); }
break;
case 80:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('G', NULL)); }
break;
case 81:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('S', NULL)); }
break;
case 82:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('I', NULL)); }
break;
case 83:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('D', NULL)); }
break;
case 84:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('U', yyvsp[0].valueListNode)); }
break;
case 85:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('R', yyvsp[0].valueListNode)); }
break;
case 86:
  if (!yytrial)
{
			yyvsp[-2].privilegeArray->add(PrivilegeClause('C', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL));
		}
break;
case 92:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('C', NULL)); }
break;
case 93:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL)); }
break;
case 94:
  if (!yytrial)
{ yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL)); }
break;
case 95:
  if (!yytrial)
{
			yyvsp[-2].privilegeArray->add(PrivilegeClause('L', NULL));
			yyvsp[-2].privilegeArray->add(PrivilegeClause('O', NULL));
		}
break;
case 99:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('C', NULL)); }
break;
case 100:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('L', NULL)); }
break;
case 101:
  if (!yytrial)
{ yyvsp[-1].privilegeArray->add(PrivilegeClause('O', NULL)); }
break;
case 102:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 103:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 104:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 105:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 106:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 107:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 111:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 112:
  if (!yytrial)
{ yyval.grantRevokeNode = newNode<GrantRevokeNode>(false); }
break;
case 113:
  if (!yytrial)
{ yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode; }
break;
case 114:
yyval.privilegeArray = NOTRIAL(&yyvsp[-1].grantRevokeNode->privileges);
break;
case 115:
yyval.granteeArray = NOTRIAL(&yyvsp[-7].grantRevokeNode->users);
break;
case 116:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_relation, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 117:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_procedure, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 118:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_udf, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 119:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_package_header, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 120:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_exception, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 121:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 122:
  if (!yytrial)
{
			yyvsp[-10].grantRevokeNode->object = newNode<GranteeClause>(obj_generator, *yyvsp[-4].metaNamePtr);
			yyvsp[-10].grantRevokeNode->grantAdminOption = yyvsp[-9].boolVal;
			yyvsp[-10].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 123:
yyval.granteeArray = NOTRIAL(&yyvsp[-5].grantRevokeNode->users);
break;
case 124:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = yyvsp[-4].granteeClause;
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-7].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 125:
  if (!yytrial)
{
			yyvsp[-8].grantRevokeNode->object = newNode<GranteeClause>(obj_database, getSecurityClassName(obj_database));
			yyvsp[-8].grantRevokeNode->grantAdminOption = yyvsp[-7].boolVal;
			yyvsp[-8].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
			yyvsp[-8].grantRevokeNode->isDdl = true;
		}
break;
case 126:
yyval.grantRevokeNode = NOTRIAL(yyvsp[-1].grantRevokeNode);
break;
case 127:
  if (!yytrial)
{
			yyvsp[-7].grantRevokeNode->grantAdminOption = yyvsp[-6].boolVal;
			yyvsp[-7].grantRevokeNode->grantor = yyvsp[0].metaNamePtr;
		}
break;
case 129:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 130:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 131:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 132:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 133:
yyval.granteeArray = yyvsp[0].granteeArray;
break;
case 136:
yyval.granteeArray = yyvsp[-2].granteeArray;
break;
case 139:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_procedure, *yyvsp[0].metaNamePtr)); }
break;
case 140:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_udf, *yyvsp[0].metaNamePtr)); }
break;
case 141:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_package_header, *yyvsp[0].metaNamePtr)); }
break;
case 142:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_trigger, *yyvsp[0].metaNamePtr)); }
break;
case 143:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_view, *yyvsp[0].metaNamePtr)); }
break;
case 144:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr)); }
break;
case 145:
  if (!yytrial)
{ yyvsp[-3].granteeArray->add(GranteeClause(obj_privilege, *yyvsp[0].metaNamePtr)); }
break;
case 146:
  if (!yytrial)
{ yyvsp[-1].granteeArray->add(GranteeClause(obj_user_or_role, *yyvsp[0].metaNamePtr)); }
break;
case 147:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user, *yyvsp[0].metaNamePtr)); }
break;
case 148:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user_group, *yyvsp[0].metaNamePtr)); }
break;
case 150:
yyval.grantRevokeNode = yyvsp[-2].grantRevokeNode;
break;
case 152:
  if (!yytrial)
{
			yyvsp[-1].grantRevokeNode->roles.add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr));
			yyvsp[-1].grantRevokeNode->defaultRoles.add(false);
		}
break;
case 153:
  if (!yytrial)
{
			yyvsp[-2].grantRevokeNode->roles.add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr));
			yyvsp[-2].grantRevokeNode->defaultRoles.add(true);
		}
break;
case 156:
  if (!yytrial)
{ yyvsp[-1].granteeArray->add(GranteeClause(obj_user_or_role, *yyvsp[0].metaNamePtr)); }
break;
case 157:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_user, *yyvsp[0].metaNamePtr)); }
break;
case 158:
  if (!yytrial)
{ yyvsp[-2].granteeArray->add(GranteeClause(obj_sql_role, *yyvsp[0].metaNamePtr)); }
break;
case 159:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode;}
break;
case 160:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 161:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterFunctionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 162:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 163:
yyval.parametersClause = NOTRIAL(&yyvsp[0].createAlterFunctionNode->parameters);
break;
case 164:
yyval.createAlterFunctionNode = yyvsp[-3].createAlterFunctionNode;
break;
case 165:
  if (!yytrial)
{
				yyval.createAlterFunctionNode = yyvsp[-9].createAlterFunctionNode;
				yyval.createAlterFunctionNode->external = newNode<ExternalClause>();
				yyval.createAlterFunctionNode->external->name = *yyvsp[-2].stringPtr;
				yyval.createAlterFunctionNode->external->udfModule = *yyvsp[0].stringPtr;
			}
break;
case 167:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_blob;
			yyval.legacyField->length = sizeof(bid);
		}
break;
case 168:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->dtype = dtype_cstring;
			yyval.legacyField->charLength = (USHORT) yyvsp[-2].int32Val;
			if (yyvsp[0].metaNamePtr)
				yyval.legacyField->charSet = *yyvsp[0].metaNamePtr;
		}
break;
case 170:
yyval.parametersClause = yyvsp[0].parametersClause;
break;
case 172:
yyval.parametersClause = yyvsp[-1].parametersClause;
break;
case 175:
yyval.parametersClause = yyvsp[-2].parametersClause;
break;
case 177:
  if (!yytrial)
{
			yyvsp[-2].parametersClause->add(newNode<ParameterClause>(yyvsp[-1].legacyField));
			yyvsp[-2].parametersClause->back()->udfMechanism = yyvsp[0].nullableIntVal;
		}
break;
case 178:
  if (!yytrial)
{ yyval.nullableIntVal = std::nullopt; }
break;
case 179:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_descriptor; }
break;
case 180:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_scalar_array; }
break;
case 181:
  if (!yytrial)
{ yyval.nullableIntVal = FUN_ref_with_null; }
break;
case 182:
yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
break;
case 184:
yyval.createAlterFunctionNode = yyvsp[-1].createAlterFunctionNode;
break;
case 186:
  if (!yytrial)
{
			yyvsp[-2].createAlterFunctionNode->returnType = newNode<ParameterClause>(yyvsp[-1].legacyField);
			yyvsp[-2].createAlterFunctionNode->returnType->udfMechanism = yyvsp[0].int32Val;
		}
break;
case 187:
  if (!yytrial)
{ yyvsp[-2].createAlterFunctionNode->udfReturnPos = yyvsp[0].int32Val; }
break;
case 188:
  if (!yytrial)
{ yyval.int32Val = FUN_reference; }
break;
case 189:
  if (!yytrial)
{ yyval.int32Val = FUN_value; }
break;
case 190:
  if (!yytrial)
{ yyval.int32Val = FUN_descriptor; }
break;
case 191:
  if (!yytrial)
{ yyval.int32Val = -1 * FUN_reference; }
break;
case 192:
  if (!yytrial)
{ yyval.int32Val = -1 * FUN_descriptor; }
break;
case 193:
  if (!yytrial)
{
				CreateFilterNode* node = newNode<CreateFilterNode>(*yyvsp[-8].metaNamePtr);
				node->inputFilter = yyvsp[-6].filterNameNumber;
				node->outputFilter = yyvsp[-4].filterNameNumber;
				node->entryPoint = *yyvsp[-2].stringPtr;
				node->moduleName = *yyvsp[0].stringPtr;
				yyval.ddlNode = node;
			}
break;
case 194:
  if (!yytrial)
{ yyval.filterNameNumber = newNode<CreateFilterNode::NameNumber>(*yyvsp[0].metaNamePtr); }
break;
case 195:
  if (!yytrial)
{ yyval.filterNameNumber = newNode<CreateFilterNode::NameNumber>(yyvsp[0].int32Val); }
break;
case 196:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 197:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterExceptionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 198:
  if (!yytrial)
{
				const auto node = newNode<CreateIndexNode>(*yyvsp[-3].metaNamePtr);
				node->active = yyvsp[-2].boolVal;
				node->unique = yyvsp[-7].boolVal;
				node->descending = yyvsp[-6].boolVal;
				node->createIfNotExistsOnly = yyvsp[-4].boolVal;
				node->relation = yyvsp[0].relSourceNode;
				yyval.ddlNode = node;
			}
break;
case 199:
yyval.createIndexNode = static_cast<CreateIndexNode*>(yyvsp[0].ddlNode);
break;
case 200:
  if (!yytrial)
{
				yyval.ddlNode = yyvsp[-2].ddlNode;
			}
break;
case 201:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterFunctionNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 202:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterProcedureNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 203:
  if (!yytrial)
{
			const auto node = yyvsp[0].createRelationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 204:
  if (!yytrial)
{
			const auto node = yyvsp[0].createRelationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 205:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterTriggerNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 206:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterViewNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 207:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterSequenceNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 208:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterSequenceNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 209:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].alterDatabaseNode; }
break;
case 210:
  if (!yytrial)
{
			const auto node = yyvsp[0].createDomainNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 211:
  if (!yytrial)
{
			const auto node = yyvsp[0].createShadowNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 212:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterRoleNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			node->createFlag = true;
			yyval.ddlNode = node;
		}
break;
case 213:
  if (!yytrial)
{
			const auto node = yyvsp[0].createCollationNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 214:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterUserNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 215:
  if (!yytrial)
{
			const auto node = yyvsp[0].createAlterPackageNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 216:
  if (!yytrial)
{
			const auto node = yyvsp[0].createPackageBodyNode;
			node->createIfNotExistsOnly = yyvsp[-1].boolVal;
			yyval.ddlNode = node;
		}
break;
case 217:
yyval.boolVal = false;
break;
case 218:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->createIfNotExistsOnly = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 219:
yyval.boolVal = true;
break;
case 220:
  if (!yytrial)
{
			const auto node = yyvsp[0].mappingNode;
			node->createIfNotExistsOnly = yyvsp[-2].boolVal;
			yyval.ddlNode = node;
		}
break;
case 221:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 222:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateProcedureNode>(yyvsp[0].createAlterProcedureNode); }
break;
case 223:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateFunctionNode>(yyvsp[0].createAlterFunctionNode); }
break;
case 224:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTableNode>(yyvsp[0].createRelationNode); }
break;
case 225:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTableNode>(yyvsp[0].createRelationNode); }
break;
case 226:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateViewNode>(yyvsp[0].createAlterViewNode); }
break;
case 227:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateTriggerNode>(yyvsp[0].createAlterTriggerNode); }
break;
case 228:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageNode>(yyvsp[0].createAlterPackageNode); }
break;
case 229:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageBodyNode>(yyvsp[0].createPackageBodyNode); }
break;
case 230:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateExceptionNode>(yyvsp[0].createAlterExceptionNode); }
break;
case 231:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateSequenceNode>(yyvsp[0].createAlterSequenceNode); }
break;
case 232:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateSequenceNode>(yyvsp[0].createAlterSequenceNode); }
break;
case 233:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreateUserNode>(yyvsp[0].createAlterUserNode); }
break;
case 234:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 235:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterProcedureNode; }
break;
case 236:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterFunctionNode; }
break;
case 237:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterTriggerNode; }
break;
case 238:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterPackageNode; }
break;
case 239:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 240:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].ddlNode; }
break;
case 241:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterExceptionNode; }
break;
case 242:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 243:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterSequenceNode; }
break;
case 244:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].createAlterUserNode; }
break;
case 245:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 246:
  if (!yytrial)
{ yyval.ddlNode = yyvsp[0].mappingNode; }
break;
case 247:
  if (!yytrial)
{ yyval.createAlterExceptionNode = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString()); }
break;
case 248:
  if (!yytrial)
{
			CreateAlterExceptionNode* node = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString());
			node->alter = true;
			yyval.createAlterExceptionNode = node;
		}
break;
case 249:
  if (!yytrial)
{
			CreateAlterExceptionNode* node = newNode<CreateAlterExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].intlStringPtr->getString());
			node->create = false;
			node->alter = true;
			yyval.createAlterExceptionNode = node;
		}
break;
case 250:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 251:
  if (!yytrial)
{ yyval.boolVal = yyvsp[0].boolVal; }
break;
case 252:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 253:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 254:
yyval.createIndexNode = yyvsp[0].createIndexNode;
break;
case 255:
  if (!yytrial)
{
			yyvsp[-3].createIndexNode->partial = yyvsp[0].boolSourceClause;
		}
break;
case 256:
  if (!yytrial)
{ yyvsp[-1].createIndexNode->columns = yyvsp[0].valueListNode; }
break;
case 257:
  if (!yytrial)
{ yyvsp[-1].createIndexNode->columns = yyvsp[0].valueListNode; }
break;
case 258:
  if (!yytrial)
{
 			yyvsp[-4].createIndexNode->computed = newNode<ValueSourceClause>();
			yyvsp[-4].createIndexNode->computed->value = yyvsp[-1].valueExprNode;
			yyvsp[-4].createIndexNode->computed->source = makeParseStr(YYPOSNARG(2), YYPOSNARG(4));
		}
break;
case 259:
  if (!yytrial)
{ yyval.boolSourceClause = nullptr; }
break;
case 260:
  if (!yytrial)
{
			auto clause = newNode<BoolSourceClause>();
			clause->value = yyvsp[0].boolExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.boolSourceClause = clause;
		}
break;
case 261:
  if (!yytrial)
{ yyval.createShadowNode = newNode<CreateShadowNode>(yyvsp[-3].int32Val, yyvsp[-2].boolVal, yyvsp[-1].boolVal, *yyvsp[0].stringPtr); }
break;
case 262:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 263:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 264:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 265:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 266:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 267:
  if (!yytrial)
{
				yyvsp[-1].legacyField->fld_name = *yyvsp[-3].metaNamePtr;
				yyval.createDomainNode = newNode<CreateDomainNode>(
					newNode<ParameterClause>(yyvsp[-1].legacyField, yyvsp[0].valueSourceClause));
			}
break;
case 268:
yyval.createDomainNode = yyvsp[0].createDomainNode;
break;
case 269:
  if (!yytrial)
{
				yyval.createDomainNode = yyvsp[-3].createDomainNode;
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
			}
break;
case 273:
yyval.createDomainNode = yyvsp[-1].createDomainNode;
break;
case 275:
  if (!yytrial)
{ setClause(yyvsp[-1].createDomainNode->notNull, "NOT NULL"); }
break;
case 276:
  if (!yytrial)
{ setClause(yyvsp[-1].createDomainNode->check, "DOMAIN CHECK CONSTRAINT", yyvsp[0].boolSourceClause); }
break;
case 279:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 280:
  if (!yytrial)
{ yyval.valueSourceClause = NULL; }
break;
case 283:
  if (!yytrial)
{
			BoolSourceClause* clause = newNode<BoolSourceClause>();
			clause->value = yyvsp[-1].boolExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(4));
			yyval.boolSourceClause = clause;
		}
break;
case 284:
  if (!yytrial)
{ yyval.createAlterSequenceNode = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr); }
break;
case 285:
yyval.createAlterSequenceNode = yyvsp[0].createAlterSequenceNode;
break;
case 286:
  if (!yytrial)
{ yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode; }
break;
case 288:
yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
break;
case 292:
  if (!yytrial)
{
			setClause(yyvsp[-3].createAlterSequenceNode->value, "START WITH", yyvsp[0].int64Val);
			setClause(yyvsp[-3].createAlterSequenceNode->restartSpecified, "RESTART", true);
		}
break;
case 293:
  if (!yytrial)
{ setClause(yyvsp[-3].createAlterSequenceNode->step, "INCREMENT BY", yyvsp[0].int32Val); }
break;
case 296:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr);
			node->alter = true;
			yyval.createAlterSequenceNode = node;
		}
break;
case 297:
  if (!yytrial)
{
			/* Remove this to implement CORE-5137*/
			if (!yyvsp[-2].createAlterSequenceNode->restartSpecified && !yyvsp[-2].createAlterSequenceNode->step.has_value())
				yyerrorIncompleteCmd(YYPOSNARG(3));
			yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
		}
break;
case 300:
  if (!yytrial)
{
			setClause(yyvsp[-1].createAlterSequenceNode->restartSpecified, "RESTART", true);
		}
break;
case 303:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[0].metaNamePtr);
			node->create = false;
			node->alter = true;
			yyval.createAlterSequenceNode = node;
		}
break;
case 304:
  if (!yytrial)
{
			if (!yyvsp[-2].createAlterSequenceNode->restartSpecified && !yyvsp[-2].createAlterSequenceNode->value.has_value() && !yyvsp[-2].createAlterSequenceNode->step.has_value())
				yyerrorIncompleteCmd(YYPOSNARG(3));
			yyval.createAlterSequenceNode = yyvsp[-2].createAlterSequenceNode;
		}
break;
case 309:
  if (!yytrial)
{
			setClause(yyvsp[-2].createAlterSequenceNode->restartSpecified, "RESTART", true);
			setClause(yyvsp[-2].createAlterSequenceNode->value, "RESTART WITH", yyvsp[0].nullableInt64Val);
		}
break;
case 310:
  if (!yytrial)
{ yyval.nullableInt64Val = std::nullopt; }
break;
case 311:
  if (!yytrial)
{ yyval.nullableInt64Val = yyvsp[0].int64Val; }
break;
case 312:
  if (!yytrial)
{
			CreateAlterSequenceNode* node = newNode<CreateAlterSequenceNode>(*yyvsp[-2].metaNamePtr);
			node->create = false;
			node->alter = true;
			node->legacy = true;
			node->restartSpecified = true;
			node->value = yyvsp[0].int64Val;
			yyval.createAlterSequenceNode = node;
		}
break;
case 313:
  if (!yytrial)
{ yyval.int64Val = yyvsp[0].int32Val; }
break;
case 314:
  if (!yytrial)
{
			SINT64 signedNumber = (SINT64) yyvsp[0].scaledNumber.number;

			if (!yyvsp[0].scaledNumber.hex && yyvsp[0].scaledNumber.number > MAX_SINT64)
			{
				ERRD_post(
					Arg::Gds(isc_sqlerr) << Arg::Num(-104) <<
					Arg::Gds(isc_arith_except) <<
					Arg::Gds(isc_numeric_out_of_range));
			}

			yyval.int64Val = signedNumber;
		}
break;
case 315:
  if (!yytrial)
{
			SINT64 signedNumber = (SINT64) yyvsp[0].scaledNumber.number;

			if (yyvsp[0].scaledNumber.hex && signedNumber == MIN_SINT64)
				ERRD_post(Arg::Gds(isc_exception_integer_overflow));

			yyval.int64Val = -signedNumber;
		}
break;
case 316:
  if (!yytrial)
{
			yyval.int64Val = MIN_SINT64;
		}
break;
case 317:
  if (!yytrial)
{ yyval.createAlterRoleNode = newNode<CreateAlterRoleNode>(*yyvsp[0].metaNamePtr); }
break;
case 318:
yyval.createAlterRoleNode = yyvsp[0].createAlterRoleNode;
break;
case 319:
  if (!yytrial)
{ yyval.createAlterRoleNode = yyvsp[-2].createAlterRoleNode; }
break;
case 323:
yyval.createAlterRoleNode = yyvsp[-4].createAlterRoleNode;
break;
case 325:
  if (!yytrial)
{ yyvsp[-3].createAlterRoleNode->sysPrivDrop = true; }
break;
case 327:
yyval.createAlterRoleNode = yyvsp[-2].createAlterRoleNode;
break;
case 329:
  if (!yytrial)
{ yyvsp[-1].createAlterRoleNode->addPrivilege(yyvsp[0].metaNamePtr); }
break;
case 330:
  if (!yytrial)
{ yyval.createCollationNode = newNode<CreateCollationNode>(*yyvsp[-2].metaNamePtr, *yyvsp[0].metaNamePtr); }
break;
case 331:
yyval.createCollationNode = yyvsp[0].createCollationNode;
break;
case 332:
yyval.createCollationNode = yyvsp[-2].createCollationNode;
break;
case 333:
yyval.createCollationNode = yyvsp[-4].createCollationNode;
break;
case 334:
  if (!yytrial)
{ yyval.createCollationNode = yyvsp[-6].createCollationNode; }
break;
case 336:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->fromName = *yyvsp[0].metaNamePtr; }
break;
case 337:
  if (!yytrial)
{ yyvsp[-5].createCollationNode->fromExternal = *yyvsp[-1].stringPtr; }
break;
case 341:
yyval.createCollationNode = yyvsp[-1].createCollationNode;
break;
case 346:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_PAD_SPACE); }
break;
case 347:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_PAD_SPACE); }
break;
case 348:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_CASE_INSENSITIVE); }
break;
case 349:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_CASE_INSENSITIVE); }
break;
case 350:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->unsetAttribute(TEXTTYPE_ATTR_ACCENT_INSENSITIVE); }
break;
case 351:
  if (!yytrial)
{ yyvsp[-2].createCollationNode->setAttribute(TEXTTYPE_ATTR_ACCENT_INSENSITIVE); }
break;
case 353:
  if (!yytrial)
{
			const string& s = *yyvsp[0].stringPtr;
			yyvsp[-1].createCollationNode->specificAttributes.clear();
			yyvsp[-1].createCollationNode->specificAttributes.add((const UCHAR*) s.begin(), s.length());
		}
break;
case 354:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterCharSetNode>(*yyvsp[-4].metaNamePtr, *yyvsp[0].metaNamePtr); }
break;
case 355:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolSetNode>(AlterEDSPoolSetNode::POOL_SIZE, yyvsp[0].int32Val); }
break;
case 356:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolSetNode>(AlterEDSPoolSetNode::POOL_LIFETIME, yyvsp[-1].int32Val * yyvsp[0].intVal); }
break;
case 357:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_DB, yyvsp[0].intlStringPtr->getString()); }
break;
case 358:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_ALL); }
break;
case 359:
  if (!yytrial)
{ yyval.ddlNode = newNode<AlterEDSPoolClearNode>(AlterEDSPoolClearNode::POOL_OLDEST); }
break;
case 360:
  if (!yytrial)
{ yyval.intVal = 3600; }
break;
case 361:
  if (!yytrial)
{ yyval.intVal = 60; }
break;
case 362:
  if (!yytrial)
{ yyval.intVal = 1; }
break;
case 363:
  if (!yytrial)
{
				yyval.alterDatabaseNode = newNode<AlterDatabaseNode>();
				yyval.alterDatabaseNode->create = true;
			}
break;
case 364:
yyval.alterDatabaseNode = yyvsp[0].alterDatabaseNode;
break;
case 365:
yyval.alterDatabaseNode = yyvsp[-2].alterDatabaseNode;
break;
case 366:
  if (!yytrial)
{ yyval.alterDatabaseNode = yyvsp[-4].alterDatabaseNode; }
break;
case 373:
yyval.alterDatabaseNode = yyvsp[-1].alterDatabaseNode;
break;
case 388:
  if (!yytrial)
{ yyvsp[-4].alterDatabaseNode->setDefaultCharSet = *yyvsp[0].metaNamePtr; }
break;
case 389:
  if (!yytrial)
{
			yyvsp[-6].alterDatabaseNode->setDefaultCharSet = *yyvsp[-2].metaNamePtr;
			yyvsp[-6].alterDatabaseNode->setDefaultCollation = *yyvsp[0].metaNamePtr;
		}
break;
case 390:
  if (!yytrial)
{ yyvsp[-3].alterDatabaseNode->differenceFile = *yyvsp[0].stringPtr; }
break;
case 391:
  if (!yytrial)
{
				yyval.createRelationNode = newNode<CreateRelationNode>(yyvsp[-1].relSourceNode, yyvsp[0].stringPtr);
			}
break;
case 392:
yyval.createRelationNode = yyvsp[-1].createRelationNode;
break;
case 393:
yyval.relationNode = yyvsp[-4].createRelationNode;
break;
case 394:
  if (!yytrial)
{
				yyval.createRelationNode = yyvsp[-6].createRelationNode;
			}
break;
case 396:
yyval.relationNode = yyvsp[0].relationNode;
break;
case 397:
yyval.relationNode = yyvsp[-2].relationNode;
break;
case 399:
  if (!yytrial)
{ setClause(yyvsp[-1].relationNode->ssDefiner, "SQL SECURITY", yyvsp[0].boolVal); }
break;
case 400:
  if (!yytrial)
{ setClause(yyvsp[-1].relationNode->replicationState, "PUBLICATION", yyvsp[0].boolVal); }
break;
case 401:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 402:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 403:
  if (!yytrial)
{ yyval.triState = TriState(); }
break;
case 404:
  if (!yytrial)
{ yyval.triState = yyvsp[0].boolVal; }
break;
case 405:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 406:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 407:
  if (!yytrial)
{
				yyval.createRelationNode = newNode<CreateRelationNode>(yyvsp[0].relSourceNode);
				yyval.createRelationNode->relationType = std::nullopt;
			}
break;
case 408:
yyval.createRelationNode = yyvsp[-4].createRelationNode;
break;
case 409:
  if (!yytrial)
{
				yyval.createRelationNode = yyvsp[-6].createRelationNode;
				if (!yyval.createRelationNode->relationType.has_value())
					yyval.createRelationNode->relationType = rel_global_temp_delete;
			}
break;
case 410:
yyval.createRelationNode = yyvsp[0].createRelationNode;
break;
case 412:
yyval.createRelationNode = yyvsp[-2].createRelationNode;
break;
case 415:
  if (!yytrial)
{ setClause(yyvsp[-1].createRelationNode->ssDefiner, "SQL SECURITY", yyvsp[0].triState); }
break;
case 416:
  if (!yytrial)
{ setClause(yyvsp[-4].createRelationNode->relationType, "ON COMMIT DELETE ROWS", rel_global_temp_delete); }
break;
case 417:
  if (!yytrial)
{ setClause(yyvsp[-4].createRelationNode->relationType, "ON COMMIT PRESERVE ROWS", rel_global_temp_preserve); }
break;
case 418:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 419:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 420:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 423:
yyval.relationNode = yyvsp[0].createRelationNode;
break;
case 426:
  if (!yytrial)
{
				RelationNode::AddColumnClause* clause = yyval.addColumnClause =
					newNode<RelationNode::AddColumnClause>();
				clause->field = yyvsp[-1].legacyField;
				clause->field->fld_name = *yyvsp[-2].metaNamePtr;
				clause->defaultValue = yyvsp[0].valueSourceClause;
				yyvsp[-3].relationNode->clauses.add(clause);
			}
break;
case 427:
yyval.addColumnClause = NOTRIAL(yyvsp[0].addColumnClause);
break;
case 428:
  if (!yytrial)
{
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
				yyval.addColumnClause = yyvsp[-3].addColumnClause;
			}
break;
case 429:
  if (!yytrial)
{
				RelationNode::AddColumnClause* clause = yyval.addColumnClause =
					newNode<RelationNode::AddColumnClause>();
				clause->field = yyvsp[-1].legacyField;
				clause->field->fld_name = *yyvsp[-2].metaNamePtr;
				clause->identityOptions = yyvsp[0].identityOptions;
				yyvsp[-3].relationNode->clauses.add(clause);
			}
break;
case 430:
  if (!yytrial)
{
				setCollate(yyvsp[-5].legacyField, yyvsp[0].metaNamePtr);
				yyval.addColumnClause = yyvsp[-3].addColumnClause;
			}
break;
case 431:
  if (!yytrial)
{
			RelationNode::AddColumnClause* clause = newNode<RelationNode::AddColumnClause>();
			clause->field = yyvsp[-1].legacyField;
			clause->field->fld_name = *yyvsp[-2].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-3].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
			yyval.addColumnClause = clause;
		}
break;
case 432:
  if (!yytrial)
{
			RelationNode::AddColumnClause* clause = newNode<RelationNode::AddColumnClause>();
			clause->field = newNode<dsql_fld>();
			clause->field->fld_name = *yyvsp[-1].metaNamePtr;
			clause->computed = yyvsp[0].valueSourceClause;
			yyvsp[-2].relationNode->clauses.add(clause);
			clause->field->flags |= FLD_computed;
			yyval.addColumnClause = clause;
		}
break;
case 433:
  if (!yytrial)
{ yyval.identityOptions = newNode<RelationNode::IdentityOptions>(yyvsp[-2].identityType); }
break;
case 434:
yyval.identityOptions = yyvsp[0].identityOptions;
break;
case 435:
  if (!yytrial)
{ yyval.identityOptions = yyvsp[-2].identityOptions; }
break;
case 436:
  if (!yytrial)
{ yyval.identityType = IDENT_TYPE_BY_DEFAULT; }
break;
case 437:
  if (!yytrial)
{ yyval.identityType = IDENT_TYPE_ALWAYS; }
break;
case 439:
yyval.identityOptions = yyvsp[-1].identityOptions;
break;
case 443:
  if (!yytrial)
{ setClause(yyvsp[-3].identityOptions->startValue, "START WITH", yyvsp[0].int64Val); }
break;
case 444:
  if (!yytrial)
{ setClause(yyvsp[-3].identityOptions->increment, "INCREMENT BY", yyvsp[0].int32Val); }
break;
case 445:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[-1].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(2), YYPOSNARG(4));
			yyval.valueSourceClause = clause;
		}
break;
case 452:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 453:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 454:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 456:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 457:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfTable = *yyvsp[-2].metaNamePtr;
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
		}
break;
case 458:
  if (!yytrial)
{
			yyval.legacyField = newNode<dsql_fld>();
			yyval.legacyField->typeOfName = *yyvsp[0].metaNamePtr;
			yyval.legacyField->fullDomain = true;
		}
break;
case 459:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 460:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 461:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 462:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 463:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 464:
  if (!yytrial)
{ yyval.valueExprNode = yyvsp[0].valueExprNode; }
break;
case 466:
yyval.addColumnClause = yyvsp[0].addColumnClause;
break;
case 469:
yyval.addColumnClause = yyvsp[-1].addColumnClause;
break;
case 471:
  if (!yytrial)
{
			if (yyvsp[-2].metaNamePtr)
				yyvsp[-3].addColumnClause->constraints.back().name = *yyvsp[-2].metaNamePtr;
		}
break;
case 472:
  if (!yytrial)
{
			setClause(yyvsp[-1].addColumnClause->notNullSpecified, "NOT NULL");
			RelationNode::AddConstraintClause& constraint = yyvsp[-1].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_NOT_NULL;
		}
break;
case 473:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-1].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_CHECK;
			constraint.check = yyvsp[0].boolSourceClause;
		}
break;
case 474:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-5].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_FK;

			constraint.columns.add(yyvsp[-5].addColumnClause->field->fld_name);
			constraint.refRelation = *yyvsp[-3].metaNamePtr;
			constraint.refAction = yyvsp[-1].refActionClause;

			const ValueListNode* refColumns = yyvsp[-2].valueListNode;
			if (refColumns)
			{
				const NestConst<ValueExprNode>* ptr = refColumns->items.begin();

				for (const NestConst<ValueExprNode>* const end = refColumns->items.end(); ptr != end; ++ptr)
					constraint.refColumns.add(nodeAs<FieldNode>(*ptr)->dsqlName);
			}

			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 475:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-2].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_UNIQUE;
			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 476:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = yyvsp[-3].addColumnClause->constraints.add();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_PK;
			constraint.index = yyvsp[0].indexConstraintClause;
		}
break;
case 477:
yyval.relationNode = yyvsp[-1].relationNode;
break;
case 478:
  if (!yytrial)
{
			if (yyvsp[-2].metaNamePtr)
				yyvsp[0].addConstraintClause->name = *yyvsp[-2].metaNamePtr;
			yyval.addConstraintClause = yyvsp[0].addConstraintClause;
		}
break;
case 479:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 480:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[0].metaNamePtr; }
break;
case 481:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_UNIQUE;

			const ValueListNode* columns = yyvsp[-1].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-3].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 482:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_PK;

			const ValueListNode* columns = yyvsp[-1].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-4].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 483:
  if (!yytrial)
{
			RelationNode::AddConstraintClause& constraint = *newNode<RelationNode::AddConstraintClause>();
			constraint.constraintType = RelationNode::AddConstraintClause::CTYPE_FK;

			const ValueListNode* columns = yyvsp[-5].valueListNode;
			const NestConst<ValueExprNode>* ptr = columns->items.begin();

			for (const NestConst<ValueExprNode>* const end = columns->items.end(); ptr != end; ++ptr)
				constraint.columns.add(nodeAs<FieldNode>(*ptr)->dsqlName);

			constraint.refRelation = *yyvsp[-3].metaNamePtr;
			constraint.refAction = yyvsp[-1].refActionClause;

			const ValueListNode* refColumns = yyvsp[-2].valueListNode;
			if (refColumns)
			{
				const NestConst<ValueExprNode>* ptr = refColumns->items.begin();

				for (const NestConst<ValueExprNode>* const end = refColumns->items.end(); ptr != end; ++ptr)
					constraint.refColumns.add(nodeAs<FieldNode>(*ptr)->dsqlName);
			}

			constraint.index = yyvsp[0].indexConstraintClause;

			yyvsp[-8].relationNode->clauses.add(&constraint);
			yyval.addConstraintClause = &constraint;
		}
break;
case 484:
  if (!yytrial)
{
			RelationNode::AddConstraintClause* constraint = newNode<RelationNode::AddConstraintClause>();
			constraint->constraintType = RelationNode::AddConstraintClause::CTYPE_CHECK;
			constraint->check = yyvsp[0].boolSourceClause;
			yyvsp[-1].relationNode->clauses.add(constraint);
			yyval.addConstraintClause = constraint;
		}
break;
case 485:
  if (!yytrial)
{ yyval.indexConstraintClause = newNode<RelationNode::IndexConstraintClause>(); }
break;
case 486:
  if (!yytrial)
{
			RelationNode::IndexConstraintClause* clause = yyval.indexConstraintClause =
				newNode<RelationNode::IndexConstraintClause>();
			clause->descending = yyvsp[-2].boolVal;
			clause->name = *yyvsp[0].metaNamePtr;
		}
break;
case 487:
  if (!yytrial)
{ yyval.refActionClause = NULL; }
break;
case 488:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[0].uintVal, 0); }
break;
case 489:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(0, yyvsp[0].uintVal); }
break;
case 490:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[0].uintVal, yyvsp[-1].uintVal); }
break;
case 491:
  if (!yytrial)
{ yyval.refActionClause = newNode<RelationNode::RefActionClause>(yyvsp[-1].uintVal, yyvsp[0].uintVal); }
break;
case 492:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal;}
break;
case 493:
  if (!yytrial)
{ yyval.uintVal = yyvsp[0].uintVal;}
break;
case 494:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_CASCADE; }
break;
case 495:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_SET_DEFAULT; }
break;
case 496:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_SET_NULL; }
break;
case 497:
  if (!yytrial)
{ yyval.uintVal = RelationNode::RefActionClause::ACTION_NONE; }
break;
case 500:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[-4].createAlterProcedureNode;
			yyval.createAlterProcedureNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterProcedureNode->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(5));
			yyval.createAlterProcedureNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterProcedureNode->body = yyvsp[0].stmtNode;
		}
break;
case 501:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[-2].createAlterProcedureNode;
			yyval.createAlterProcedureNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterProcedureNode->source = *yyvsp[0].stringPtr;
		}
break;
case 502:
  if (!yytrial)
{ yyval.createAlterProcedureNode = newNode<CreateAlterProcedureNode>(*yyvsp[0].metaNamePtr); }
break;
case 503:
yyval.parametersClause = NOTRIAL(&yyvsp[0].createAlterProcedureNode->parameters);
break;
case 504:
yyval.parametersClause = NOTRIAL(&yyvsp[-2].createAlterProcedureNode->returns);
break;
case 505:
  if (!yytrial)
{ yyval.createAlterProcedureNode = yyvsp[-4].createAlterProcedureNode; }
break;
case 506:
  if (!yytrial)
{ yyval.createAlterProcedureNode = newNode<CreateAlterProcedureNode>(*yyvsp[0].metaNamePtr); }
break;
case 507:
  if (!yytrial)
{
				yyval.createAlterProcedureNode = yyvsp[-1].createAlterProcedureNode;
				yyval.createAlterProcedureNode->ssDefiner = yyvsp[0].nullableSqlSecurityVal;
			}
break;
case 508:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
			yyval.createAlterProcedureNode->create = false;
		}
break;
case 509:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
			yyval.createAlterProcedureNode->create = false;
		}
break;
case 510:
  if (!yytrial)
{
			yyval.createAlterProcedureNode = yyvsp[0].createAlterProcedureNode;
			yyval.createAlterProcedureNode->alter = true;
		}
break;
case 518:
  if (!yytrial)
{
			setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
			yyvsp[-3].parametersClause->add(newNode<ParameterClause>(yyvsp[-2].legacyField, yyvsp[0].valueSourceClause));
		}
break;
case 521:
  if (!yytrial)
{
			setCollate(yyvsp[-1].legacyField, yyvsp[0].metaNamePtr);
			yyvsp[-2].parametersClause->add(newNode<ParameterClause>(yyvsp[-1].legacyField));
		}
break;
case 522:
  if (!yytrial)
{
			yyval.legacyField = yyvsp[0].legacyField;
			yyval.legacyField->fld_name = *yyvsp[-1].metaNamePtr;
		}
break;
case 523:
  if (!yytrial)
{ yyval.valueSourceClause = NULL; }
break;
case 524:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 525:
  if (!yytrial)
{
			ValueSourceClause* clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 528:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[-4].createAlterFunctionNode;
			yyval.createAlterFunctionNode->ssDefiner = yyvsp[-3].nullableSqlSecurityVal;
			yyval.createAlterFunctionNode->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(5));
			yyval.createAlterFunctionNode->localDeclList = yyvsp[-1].localDeclarationsNode;
			yyval.createAlterFunctionNode->body = yyvsp[0].stmtNode;
		}
break;
case 529:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[-2].createAlterFunctionNode;
			yyval.createAlterFunctionNode->external = yyvsp[-1].externalClause;
			if (yyvsp[0].stringPtr)
				yyval.createAlterFunctionNode->source = *yyvsp[0].stringPtr;
		}
break;
case 530:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 531:
  if (!yytrial)
{
				yyval.createAlterFunctionNode = yyvsp[-6].createAlterFunctionNode;
				yyval.createAlterFunctionNode->returnType = newNode<ParameterClause>(yyvsp[-2].legacyField);
				setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
				yyval.createAlterFunctionNode->deterministic = yyvsp[0].boolVal;
			}
break;
case 532:
  if (!yytrial)
{ yyval.createAlterFunctionNode = newNode<CreateAlterFunctionNode>(*yyvsp[0].metaNamePtr); }
break;
case 533:
  if (!yytrial)
{ yyval.createAlterFunctionNode = yyvsp[-2].createAlterFunctionNode; }
break;
case 536:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterFunctionNode->deterministic, "DETERMINISTIC", yyvsp[0].boolVal); }
break;
case 537:
  if (!yytrial)
{ setClause(yyvsp[-1].createAlterFunctionNode->ssDefiner, "SQL SECURITY", yyvsp[0].nullableSqlSecurityVal); }
break;
case 538:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 539:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 540:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 541:
  if (!yytrial)
{ yyval.boolVal = yyvsp[0].boolVal; }
break;
case 542:
  if (!yytrial)
{
			yyval.externalClause = newNode<ExternalClause>();
			yyval.externalClause->name = *yyvsp[-2].stringPtr;
			yyval.externalClause->engine = *yyvsp[0].metaNamePtr;
		}
break;
case 543:
  if (!yytrial)
{
			yyval.externalClause = newNode<ExternalClause>();
			yyval.externalClause->engine = *yyvsp[0].metaNamePtr;
		}
break;
case 544:
  if (!yytrial)
{ yyval.stringPtr = NULL; }
break;
case 545:
  if (!yytrial)
{ yyval.stringPtr = yyvsp[0].stringPtr; }
break;
case 546:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
			yyval.createAlterFunctionNode->create = false;
		}
break;
case 547:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
			yyval.createAlterFunctionNode->create = false;
		}
break;
case 548:
  if (!yytrial)
{
			yyval.createAlterFunctionNode = yyvsp[0].createAlterFunctionNode;
			yyval.createAlterFunctionNode->alter = true;
		}
break;
case 549:
  if (!yytrial)
{
			CreateAlterPackageNode* node = newNode<CreateAlterPackageNode>(*yyvsp[-5].metaNamePtr);
			node->ssDefiner = yyvsp[-4].nullableSqlSecurityVal;
			node->source = makeParseStr(YYPOSNARG(4), YYPOSNARG(6));
			node->items = yyvsp[-1].packageItems;
			yyval.createAlterPackageNode = node;
		}
break;
case 550:
  if (!yytrial)
{
			CreateAlterPackageNode* node = newNode<CreateAlterPackageNode>(*yyvsp[-1].metaNamePtr);
			node->ssDefiner = yyvsp[0].nullableSqlSecurityVal;
			yyval.createAlterPackageNode = node;
		}
break;
case 552:
  if (!yytrial)
{ yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >(); }
break;
case 553:
  if (!yytrial)
{
			yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >();
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 554:
  if (!yytrial)
{
			yyval.packageItems = yyvsp[-1].packageItems;
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 555:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterFunctionNode); }
break;
case 556:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterProcedureNode); }
break;
case 557:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
			yyval.createAlterPackageNode->create = false;
		}
break;
case 558:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
			yyval.createAlterPackageNode->create = false;
		}
break;
case 559:
  if (!yytrial)
{
			yyval.createAlterPackageNode = yyvsp[0].createAlterPackageNode;
			yyval.createAlterPackageNode->alter = true;
		}
break;
case 560:
  if (!yytrial)
{
			CreatePackageBodyNode* node = newNode<CreatePackageBodyNode>(*yyvsp[-5].metaNamePtr);
			node->source = makeParseStr(YYPOSNARG(3), YYPOSNARG(6));
			node->declaredItems = yyvsp[-2].packageItems;
			node->items = yyvsp[-1].packageItems;
			yyval.createPackageBodyNode = node;
		}
break;
case 561:
  if (!yytrial)
{
			CreatePackageBodyNode* node = newNode<CreatePackageBodyNode>(*yyvsp[-4].metaNamePtr);
			node->source = makeParseStr(YYPOSNARG(3), YYPOSNARG(5));
			node->items = yyvsp[-1].packageItems;
			yyval.createPackageBodyNode = node;
		}
break;
case 562:
  if (!yytrial)
{ yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >(); }
break;
case 564:
  if (!yytrial)
{
			yyval.packageItems = newNode<Array<CreateAlterPackageNode::Item> >();
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 565:
  if (!yytrial)
{
			yyval.packageItems = yyvsp[-1].packageItems;
			yyval.packageItems->add(yyvsp[0].packageItem);
		}
break;
case 566:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[0].createAlterFunctionNode); }
break;
case 567:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterFunctionNode); }
break;
case 568:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[0].createAlterProcedureNode); }
break;
case 569:
  if (!yytrial)
{ yyval.packageItem = CreateAlterPackageNode::Item::create(yyvsp[-1].createAlterProcedureNode); }
break;
case 570:
  if (!yytrial)
{ yyval.ddlNode = newNode<RecreatePackageBodyNode>(yyvsp[0].createPackageBodyNode); }
break;
case 571:
  if (!yytrial)
{
			LocalDeclarationsNode* forward = yyvsp[-1].localDeclarationsNode;
			LocalDeclarationsNode* nonForward = yyvsp[0].localDeclarationsNode;

			if (!forward)
				yyval.localDeclarationsNode = nonForward;
			else
			{
				if (nonForward)
					forward->statements.add(nonForward->statements.begin(), nonForward->statements.getCount());

				yyval.localDeclarationsNode = forward;
			}
		}
break;
case 572:
  if (!yytrial)
{ yyval.localDeclarationsNode = nullptr; }
break;
case 574:
  if (!yytrial)
{
			yyval.localDeclarationsNode = newNode<LocalDeclarationsNode>();
			yyval.localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 575:
  if (!yytrial)
{
			yyvsp[-1].localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
			yyval.localDeclarationsNode = yyvsp[-1].localDeclarationsNode;
		}
break;
case 576:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[-1].declareSubProcNode; }
break;
case 577:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[-1].declareSubFuncNode; }
break;
case 578:
  if (!yytrial)
{ yyval.localDeclarationsNode = nullptr; }
break;
case 580:
  if (!yytrial)
{
			yyval.localDeclarationsNode = newNode<LocalDeclarationsNode>();
			yyval.localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 581:
  if (!yytrial)
{
			yyvsp[-1].localDeclarationsNode->statements.add(yyvsp[0].stmtNode);
			yyval.localDeclarationsNode = yyvsp[-1].localDeclarationsNode;
		}
break;
case 582:
  if (!yytrial)
{
			yyval.stmtNode = yyvsp[-1].stmtNode;
			yyval.stmtNode->line = YYPOSNARG(1).firstLine;
			yyval.stmtNode->column = YYPOSNARG(1).firstColumn;
		}
break;
case 583:
  if (!yytrial)
{
			DeclareSubProcNode* node = yyvsp[-3].declareSubProcNode;
			node->dsqlBlock->localDeclList = yyvsp[-1].localDeclarationsNode;
			node->dsqlBlock->body = yyvsp[0].stmtNode;

			for (FB_SIZE_T i = 0; i < node->dsqlBlock->parameters.getCount(); ++i)
				node->dsqlBlock->parameters[i]->parameterExpr = make_parameter();

			yyval.stmtNode = node;
		}
break;
case 584:
  if (!yytrial)
{
			DeclareSubFuncNode* node = yyvsp[-3].declareSubFuncNode;
			node->dsqlBlock->localDeclList = yyvsp[-1].localDeclarationsNode;
			node->dsqlBlock->body = yyvsp[0].stmtNode;

			for (FB_SIZE_T i = 0; i < node->dsqlBlock->parameters.getCount(); ++i)
				node->dsqlBlock->parameters[i]->parameterExpr = make_parameter();

			yyval.stmtNode = node;
		}
break;
case 585:
  if (!yytrial)
{
				yyval.declareSubProcNode = newNode<DeclareSubProcNode>(NOTRIAL(*yyvsp[0].metaNamePtr));
				yyval.declareSubProcNode->dsqlBlock = newNode<ExecBlockNode>();
			}
break;
case 586:
yyval.parametersClause = NOTRIAL(&yyvsp[0].declareSubProcNode->dsqlBlock->parameters);
break;
case 587:
yyval.parametersClause = NOTRIAL(&yyvsp[-2].declareSubProcNode->dsqlBlock->returns);
break;
case 588:
  if (!yytrial)
{ yyval.declareSubProcNode = yyvsp[-4].declareSubProcNode; }
break;
case 589:
  if (!yytrial)
{
				yyval.declareSubFuncNode = newNode<DeclareSubFuncNode>(NOTRIAL(*yyvsp[0].metaNamePtr));
				yyval.declareSubFuncNode->dsqlBlock = newNode<ExecBlockNode>();
			}
break;
case 590:
yyval.parametersClause = NOTRIAL(&yyvsp[0].declareSubFuncNode->dsqlBlock->parameters);
break;
case 591:
  if (!yytrial)
{
				yyval.declareSubFuncNode = yyvsp[-6].declareSubFuncNode;
				setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
				yyval.declareSubFuncNode->dsqlBlock->returns.add(newNode<ParameterClause>(yyvsp[-2].legacyField));
				yyval.declareSubFuncNode->dsqlDeterministic = yyvsp[0].boolVal;
			}
break;
case 594:
  if (!yytrial)
{
			/* Set collate before node allocation to prevent memory leak on throw*/
			setCollate(yyvsp[-2].legacyField, yyvsp[-1].metaNamePtr);
			DeclareVariableNode* node = newNode<DeclareVariableNode>();
			node->dsqlDef = newNode<ParameterClause>(yyvsp[-2].legacyField, yyvsp[0].valueSourceClause);
			yyval.stmtNode = node;
		}
break;
case 595:
  if (!yytrial)
{ yyval.valueSourceClause = nullptr; }
break;
case 596:
  if (!yytrial)
{
			const auto clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 597:
  if (!yytrial)
{
			const auto clause = newNode<ValueSourceClause>();
			clause->value = yyvsp[0].valueExprNode;
			clause->source = makeParseStr(YYPOSNARG(1), YYPOSNARG(2));
			yyval.valueSourceClause = clause;
		}
break;
case 600:
  if (!yytrial)
{
			DeclareCursorNode* node = newNode<DeclareCursorNode>(*yyvsp[-6].metaNamePtr,
				DeclareCursorNode::CUR_TYPE_EXPLICIT);
			node->dsqlScroll = yyvsp[-5].boolVal;
			node->dsqlSelect = yyvsp[-1].selectNode;
			yyval.stmtNode = node;
		}
break;
case 601:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 602:
  if (!yytrial)
{ yyval.boolVal = false; }
break;
case 603:
  if (!yytrial)
{ yyval.boolVal = true; }
break;
case 606:
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[-1].stmtNode); }
break;
case 607:
  if (!yytrial)
{ yyval.stmtNode = newNode<CompoundStmtNode>(); }
break;
case 608:
  if (!yytrial)
{
			BlockNode* node = newNode<BlockNode>();
			node->action = yyvsp[0].compoundStmtNode;
			yyval.stmtNode = node;
		}
break;
case 609:
  if (!yytrial)
{
			BlockNode* node = newNode<BlockNode>();
			node->action = yyvsp[-1].compoundStmtNode;
			node->handlers = yyvsp[0].compoundStmtNode;
			yyval.stmtNode = node;
		}
break;
case 610:
  if (!yytrial)
{
			yyval.compoundStmtNode = newNode<CompoundStmtNode>();
			yyval.compoundStmtNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 611:
  if (!yytrial)
{
			yyvsp[-1].compoundStmtNode->statements.add(yyvsp[0].stmtNode);
			yyval.compoundStmtNode = yyvsp[-1].compoundStmtNode;
		}
break;
case 612:
{YYVALID;}
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[-1].stmtNode); }
break;
case 613:
{YYVALID;}
  if (!yytrial)
{ yyval.stmtNode = newNode<LineColumnNode>(YYPOSNARG(1).firstLine, YYPOSNARG(1).firstColumn, yyvsp[0].stmtNode); }
break;
case 615:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].storeNode; }
break;
case 616:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].mergeNode; }
break;
case 618:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].updInsNode; }
break;
case 622:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 623:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 624:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 626:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 632:
  if (!yytrial)
{ yyval.stmtNode = newNode<SuspendNode>(); }
break;
case 633:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExitNode>(); }
break;
case 634:
  if (!yytrial)
{ yyval.stmtNode = newNode<ReturnNode>(yyvsp[0].valueExprNode); }
break;
case 635:
  if (!yytrial)
{ yyval.stmtNode = newNode<SessionManagementWrapperNode>(yyvsp[0].mngNode, makeParseStr(YYPOSNARG(1), YYPOSNARG(1))); }
break;
case 637:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].stmtNode; }
break;
case 641:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].forNode; }
break;
case 642:
  if (!yytrial)
{ yyval.stmtNode = yyvsp[0].execStatementNode; }
break;
case 643:
  if (!yytrial)
{
			InAutonomousTransactionNode* node = newNode<InAutonomousTransactionNode>();
			node->action = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 644:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[0].metaNamePtr); }
break;
case 645:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[-1].metaNamePtr, yyvsp[0].valueExprNode); }
break;
case 646:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(*yyvsp[-4].metaNamePtr, (ValueExprNode*) NULL, yyvsp[-1].valueListNode); }
break;
case 647:
  if (!yytrial)
{ yyval.stmtNode = newNode<ExceptionNode>(); }
break;
case 648:
  if (!yytrial)
{
				ForNode* node = newNode<ForNode>();
				node->dsqlLabelName = yyvsp[-2].metaNamePtr;
				node->dsqlSelect = yyvsp[0].selectNode;
				yyval.forNode = node;
			}
break;
case 649:
yyval.forNode = yyvsp[0].forNode;
break;
case 650:
  if (!yytrial)
{
				ForNode* node = yyvsp[-4].forNode;
				node->statement = yyvsp[0].stmtNode;
				yyval.forNode = node;
			}
break;
case 651:
  if (!yytrial)
{
			yyvsp[-2].forNode->dsqlInto = yyvsp[-1].valueListNode;
			yyvsp[-2].forNode->dsqlCursor = yyvsp[0].declCursorNode;
		}
break;
case 652:
  if (!yytrial)
{
			yyvsp[-2].forNode->dsqlInto = yyvsp[-1].valueListNode;
			yyvsp[-2].forNode->dsqlCursor = yyvsp[0].declCursorNode;
		}
break;
case 653:
  if (!yytrial)
{ yyval.valueListNode = NULL; }
break;
case 655:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[0].valueListNode; }
break;
case 656:
  if (!yytrial)
{ yyval.execStatementNode = newNode<ExecStatementNode>(); }
break;
case 657:
yyval.execStatementNode = yyvsp[0].execStatementNode;
break;
case 658:
yyval.execStatementNode = yyvsp[-2].execStatementNode;
break;
case 659:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-4].execStatementNode;
		}
break;
case 660:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-2].execStatementNode;
			yyval.execStatementNode->outputs = yyvsp[0].valueListNode;
		}
break;
case 661:
  if (!yytrial)
{
			yyval.execStatementNode = yyvsp[-2].execStatementNode;
			yyval.execStatementNode->dsqlLabelName = yyvsp[-4].metaNamePtr;
			yyval.execStatementNode->innerStmt = yyvsp[0].stmtNode;
		}
break;
case 662:
  if (!yytrial)
{ yyvsp[-1].execStatementNode->sql = yyvsp[0].valueExprNode; }
break;
case 663:
yyval.execStatementNode = yyvsp[-4].execStatementNode;
break;
case 664:
  if (!yytrial)
{ yyvsp[-7].execStatementNode->sql = yyvsp[-5].valueExprNode; }
break;
case 665:
  if (!yytrial)
{ yyvsp[-7].execStatementNode->sql = yyvsp[-5].valueExprNode; }
break;
case 668:
  if (!yytrial)
{
			if (!yyvsp[-3].execStatementNode->inputNames)
				yyvsp[-3].execStatementNode->inputNames = FB_NEW_POOL(getPool()) EDS::ParamNames(getPool());

			yyvsp[-3].execStatementNode->inputNames->add(yyvsp[-2].metaNamePtr);

			if (!yyvsp[-3].execStatementNode->inputs)
				yyvsp[-3].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-3].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 669:
  if (!yytrial)
{
			if (!yyvsp[-4].execStatementNode->inputNames)
				yyvsp[-4].execStatementNode->inputNames = FB_NEW_POOL(getPool()) EDS::ParamNames(getPool());

			if (!yyvsp[-4].execStatementNode->excessInputs)
				yyvsp[-4].execStatementNode->excessInputs = FB_NEW_POOL(getPool()) EDS::ParamNumbers(getPool());

			yyvsp[-4].execStatementNode->excessInputs->add(yyvsp[-4].execStatementNode->inputNames->getCount());

			yyvsp[-4].execStatementNode->inputNames->add(yyvsp[-2].metaNamePtr);

			if (!yyvsp[-4].execStatementNode->inputs)
				yyvsp[-4].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-4].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 672:
  if (!yytrial)
{
			if (!yyvsp[-1].execStatementNode->inputs)
				yyvsp[-1].execStatementNode->inputs = newNode<ValueListNode>(yyvsp[0].valueExprNode);
			else
				yyvsp[-1].execStatementNode->inputs->add(yyvsp[0].valueExprNode);
		}
break;
case 675:
yyval.execStatementNode = yyvsp[-1].execStatementNode;
break;
case 678:
  if (!yytrial)
{ setClause(yyvsp[-5].execStatementNode->dataSource, "EXTERNAL DATA SOURCE", yyvsp[0].valueExprNode); }
break;
case 679:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->dataSource, "EXTERNAL DATA SOURCE", yyvsp[0].valueExprNode); }
break;
case 680:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->userName, "USER", yyvsp[0].valueExprNode); }
break;
case 681:
  if (!yytrial)
{ setClause(yyvsp[-2].execStatementNode->password, "PASSWORD", yyvsp[0].valueExprNode); }
break;
case 682:
  if (!yytrial)
{ setClause(yyvsp[-2].execStatementNode->role, "ROLE", yyvsp[0].valueExprNode); }
break;
case 683:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->traScope, "TRANSACTION", EDS::traAutonomous); }
break;
case 684:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->traScope, "TRANSACTION", EDS::traCommon); }
break;
case 685:
  if (!yytrial)
{ setClause(yyvsp[-3].execStatementNode->useCallerPrivs, "CALLER PRIVILEGES"); }
break;
case 686:
  if (!yytrial)
{
			IfNode* node = newNode<IfNode>();
			node->condition = yyvsp[-5].boolExprNode;
			node->trueAction = yyvsp[-2].stmtNode;
			node->falseAction = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 687:
  if (!yytrial)
{
			IfNode* node = newNode<IfNode>();
			node->condition = yyvsp[-3].boolExprNode;
			node->trueAction = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 688:
  if (!yytrial)
{
			PostEventNode* node = newNode<PostEventNode>();
			node->event = yyvsp[-1].valueExprNode;
			node->argument = yyvsp[0].valueExprNode;
			yyval.stmtNode = node;
		}
break;
case 689:
  if (!yytrial)
{ yyval.valueExprNode = NULL; }
break;
case 690:
  if (!yytrial)
{
			ForNode* node = newNode<ForNode>();
			node->dsqlSelect = yyvsp[-2].selectNode;
			node->dsqlInto = yyvsp[0].valueListNode;
			yyval.stmtNode = node;
		}
break;
case 691:
  if (!yytrial)
{
			VariableNode* node = newNode<VariableNode>();
			node->dsqlName = *yyvsp[0].metaNamePtr;
			yyval.valueExprNode = node;
		}
break;
case 692:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].valueExprNode); }
break;
case 693:
  if (!yytrial)
{ yyval.valueListNode = newNode<ValueListNode>(yyvsp[0].fieldNode); }
break;
case 694:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].fieldNode); }
break;
case 695:
  if (!yytrial)
{ yyval.valueListNode = yyvsp[-2].valueListNode->add(yyvsp[0].valueExprNode); }
break;
case 696:
  if (!yytrial)
{
			LoopNode* node = newNode<LoopNode>();
			node->dsqlLabelName = yyvsp[-6].metaNamePtr;
			node->dsqlExpr = yyvsp[-3].boolExprNode;
			node->statement = yyvsp[0].stmtNode;
			yyval.stmtNode = node;
		}
break;
case 697:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 698:
  if (!yytrial)
{ yyval.metaNamePtr = yyvsp[-1].metaNamePtr; }
break;
case 699:
  if (!yytrial)
{ yyval.stmtNode = newNode<ContinueLeaveNode>(blr_leave); }
break;
case 700:
  if (!yytrial)
{
			ContinueLeaveNode* node = newNode<ContinueLeaveNode>(blr_leave);
			node->dsqlLabelName = yyvsp[0].metaNamePtr;
			yyval.stmtNode = node;
		}
break;
case 701:
  if (!yytrial)
{
			ContinueLeaveNode* node = newNode<ContinueLeaveNode>(blr_continue_loop);
			node->dsqlLabelName = yyvsp[0].metaNamePtr;
			yyval.stmtNode = node;
		}
break;
case 702:
  if (!yytrial)
{ yyval.metaNamePtr = NULL; }
break;
case 704:
  if (!yytrial)
{ yyval.declCursorNode = NULL; }
break;
case 706:
  if (!yytrial)
{ yyval.declCursorNode = newNode<DeclareCursorNode>(*yyvsp[0].metaNamePtr, DeclareCursorNode::CUR_TYPE_FOR); }
break;
case 707:
  if (!yytrial)
{
			yyval.compoundStmtNode = newNode<CompoundStmtNode>();
			yyval.compoundStmtNode->statements.add(yyvsp[0].stmtNode);
		}
break;
case 708:
  if (!yytrial)
{
			yyvsp[-1].compoundStmtNode->statements.add(yyvsp[0].stmtNode);
			yyval.compoundStmtNode = yyvsp[-1].compoundStmtNode;
		}
break;
case 709:
  if (!yytrial)
{ yyval.errorHandlerNode = newNode<ErrorHandlerNode>(); }
break;
case 710:
yyval.exceptionArray = NOTRIAL(&yyvsp[0].errorHandlerNode->conditions);
break;
case 711:
  if (!yytrial)
{
				ErrorHandlerNode* node = yyvsp[-4].errorHandlerNode;
				node->action = yyvsp[0].stmtNode;
				yyval.stmtNode = node;
			}
break;
case 712:
yyval.exceptionArray = yyvsp[0].exceptionArray;
break;
case 714:
yyval.exceptionArray = yyvsp[-2].exceptionArray;
break;
case 716:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::SQL_CODE;
			item.code = yyvsp[0].int32Val;
		}
break;
case 717:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::SQL_STATE;
			item.name = yyvsp[0].intlStringPtr->getString();
		}
break;
case 718:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::GDS_CODE;
			item.name = yyvsp[0].metaNamePtr->c_str();
		}
break;
case 719:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-2].exceptionArray->add();
			item.type = ExceptionItem::XCP_CODE;
			item.name = yyvsp[0].metaNamePtr->c_str();
		}
break;
case 720:
  if (!yytrial)
{
			ExceptionItem& item = yyvsp[-1].exceptionArray->add();
			item.type = ExceptionItem::XCP_DEFAULT;
		}
break;
